// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package market

import (
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// GetSymbolResp struct for GetSymbolResp
type GetSymbolResp struct {
	// common response
	CommonResponse *types.RestResponse
	// Symbol
	Symbol string `json:"symbol,omitempty"`
	// Contract group
	RootSymbol string `json:"rootSymbol,omitempty"`
	// Type of contract
	Type string `json:"type,omitempty"`
	// First Open Date (milliseconds)
	FirstOpenDate int64 `json:"firstOpenDate,omitempty"`
	// Expiration date (milliseconds) Null means it will never expire
	ExpireDate int64 `json:"expireDate,omitempty"`
	// Settlement date (milliseconds) Null indicates that automatic settlement is not supported
	SettleDate int64 `json:"settleDate,omitempty"`
	// Base currency
	BaseCurrency string `json:"baseCurrency,omitempty"`
	// Quote currency
	QuoteCurrency string `json:"quoteCurrency,omitempty"`
	// Currency used to clear and settle the trades
	SettleCurrency string `json:"settleCurrency,omitempty"`
	// Maximum order quantity
	MaxOrderQty int32 `json:"maxOrderQty,omitempty"`
	// Maximum order price
	MaxPrice float64 `json:"maxPrice,omitempty"`
	// Minimum lot size
	LotSize int32 `json:"lotSize,omitempty"`
	// Minimum price changes
	TickSize float64 `json:"tickSize,omitempty"`
	// Index price of tick size
	IndexPriceTickSize float64 `json:"indexPriceTickSize,omitempty"`
	// The basic unit of the contract API is lots. For the number of coins in each lot, please refer to the param multiplier. For example, for XBTUSDTM, multiplier=0.001, which corresponds to the value of each XBTUSDTM contract being 0.001 BTC. There is also a special case. All coin-swap contracts, such as each XBTUSDM contract, correspond to 1 USD.
	Multiplier float64 `json:"multiplier,omitempty"`
	// Initial margin requirement
	InitialMargin float64 `json:"initialMargin,omitempty"`
	// Maintenance margin requirement
	MaintainMargin float64 `json:"maintainMargin,omitempty"`
	// Maximum risk limit (unit: XBT)
	MaxRiskLimit int32 `json:"maxRiskLimit,omitempty"`
	// Minimum risk limit (unit: XBT)
	MinRiskLimit int32 `json:"minRiskLimit,omitempty"`
	// Risk limit increment value (unit: XBT)
	RiskStep int32 `json:"riskStep,omitempty"`
	// Maker fee rate
	MakerFeeRate float64 `json:"makerFeeRate,omitempty"`
	// Taker fee rate
	TakerFeeRate float64 `json:"takerFeeRate,omitempty"`
	// Deprecated param
	TakerFixFee float64 `json:"takerFixFee,omitempty"`
	// Deprecated param
	MakerFixFee float64 `json:"makerFixFee,omitempty"`
	// Settlement fee
	SettlementFee float64 `json:"settlementFee,omitempty"`
	// Enabled ADL or not
	IsDeleverage bool `json:"isDeleverage,omitempty"`
	// Deprecated param
	IsQuanto bool `json:"isQuanto,omitempty"`
	// Whether it is a reverse contract
	IsInverse bool `json:"isInverse,omitempty"`
	// Marking method
	MarkMethod string `json:"markMethod,omitempty"`
	// Fair price marking method; the Futures contract is null
	FairMethod string `json:"fairMethod,omitempty"`
	// Ticker symbol of the base currency
	FundingBaseSymbol string `json:"fundingBaseSymbol,omitempty"`
	// Ticker symbol of the quote currency
	FundingQuoteSymbol string `json:"fundingQuoteSymbol,omitempty"`
	// Funding rate symbol
	FundingRateSymbol string `json:"fundingRateSymbol,omitempty"`
	// Index symbol
	IndexSymbol string `json:"indexSymbol,omitempty"`
	// Settlement symbol
	SettlementSymbol string `json:"settlementSymbol,omitempty"`
	// Contract status
	Status string `json:"status,omitempty"`
	// Funding fee rate
	FundingFeeRate float64 `json:"fundingFeeRate,omitempty"`
	// Predicted funding fee rate
	PredictedFundingFeeRate float64 `json:"predictedFundingFeeRate,omitempty"`
	// Funding interval (milliseconds)
	FundingRateGranularity int32 `json:"fundingRateGranularity,omitempty"`
	// Open interest (unit: lots)
	OpenInterest string `json:"openInterest,omitempty"`
	// 24-hour turnover
	TurnoverOf24h float64 `json:"turnoverOf24h,omitempty"`
	// 24-hour volume
	VolumeOf24h float64 `json:"volumeOf24h,omitempty"`
	// Mark price
	MarkPrice float64 `json:"markPrice,omitempty"`
	// Index price
	IndexPrice float64 `json:"indexPrice,omitempty"`
	// Last trade price
	LastTradePrice float64 `json:"lastTradePrice,omitempty"`
	// Next funding rate time (milliseconds)
	NextFundingRateTime int32 `json:"nextFundingRateTime,omitempty"`
	// Maximum leverage
	MaxLeverage int32 `json:"maxLeverage,omitempty"`
	// The contract index price source exchange
	SourceExchanges []string `json:"sourceExchanges,omitempty"`
	// Premium index symbol (1 minute)
	PremiumsSymbol1M string `json:"premiumsSymbol1M,omitempty"`
	// Premium index symbol (8 hours)
	PremiumsSymbol8H string `json:"premiumsSymbol8H,omitempty"`
	// Base currency interest rate symbol (1 minute)
	FundingBaseSymbol1M string `json:"fundingBaseSymbol1M,omitempty"`
	// Quote currency interest rate symbol (1 minute)
	FundingQuoteSymbol1M string `json:"fundingQuoteSymbol1M,omitempty"`
	// 24-hour lowest price
	LowPrice float64 `json:"lowPrice,omitempty"`
	// 24-hour highest price
	HighPrice float64 `json:"highPrice,omitempty"`
	// 24-hour % price change
	PriceChgPct float64 `json:"priceChgPct,omitempty"`
	// 24-hour price change
	PriceChg       float64 `json:"priceChg,omitempty"`
	K              float64 `json:"k,omitempty"`
	M              float64 `json:"m,omitempty"`
	F              float64 `json:"f,omitempty"`
	MmrLimit       float64 `json:"mmrLimit,omitempty"`
	MmrLevConstant float64 `json:"mmrLevConstant,omitempty"`
	// Whether support Cross Margin
	SupportCross bool `json:"supportCross,omitempty"`
	// The current maximum buying price allowed
	BuyLimit float64 `json:"buyLimit,omitempty"`
	// The current minimum selling price allowed
	SellLimit float64 `json:"sellLimit,omitempty"`
}

// NewGetSymbolResp instantiates a new GetSymbolResp object
// This constructor will assign default values to properties that have it defined
func NewGetSymbolResp(symbol string, rootSymbol string, Type_ string, firstOpenDate int64, expireDate int64, settleDate int64, baseCurrency string, quoteCurrency string, settleCurrency string, maxOrderQty int32, maxPrice float64, lotSize int32, tickSize float64, indexPriceTickSize float64, multiplier float64, initialMargin float64, maintainMargin float64, maxRiskLimit int32, minRiskLimit int32, riskStep int32, makerFeeRate float64, takerFeeRate float64, takerFixFee float64, makerFixFee float64, settlementFee float64, isDeleverage bool, isQuanto bool, isInverse bool, markMethod string, fairMethod string, fundingBaseSymbol string, fundingQuoteSymbol string, fundingRateSymbol string, indexSymbol string, settlementSymbol string, status string, fundingFeeRate float64, predictedFundingFeeRate float64, fundingRateGranularity int32, openInterest string, turnoverOf24h float64, volumeOf24h float64, markPrice float64, indexPrice float64, lastTradePrice float64, nextFundingRateTime int32, maxLeverage int32, sourceExchanges []string, premiumsSymbol1M string, premiumsSymbol8H string, fundingBaseSymbol1M string, fundingQuoteSymbol1M string, lowPrice float64, highPrice float64, priceChgPct float64, priceChg float64, k float64, m float64, f float64, mmrLimit float64, mmrLevConstant float64, supportCross bool, buyLimit float64, sellLimit float64) *GetSymbolResp {
	this := GetSymbolResp{}
	this.Symbol = symbol
	this.RootSymbol = rootSymbol
	this.Type = Type_
	this.FirstOpenDate = firstOpenDate
	this.ExpireDate = expireDate
	this.SettleDate = settleDate
	this.BaseCurrency = baseCurrency
	this.QuoteCurrency = quoteCurrency
	this.SettleCurrency = settleCurrency
	this.MaxOrderQty = maxOrderQty
	this.MaxPrice = maxPrice
	this.LotSize = lotSize
	this.TickSize = tickSize
	this.IndexPriceTickSize = indexPriceTickSize
	this.Multiplier = multiplier
	this.InitialMargin = initialMargin
	this.MaintainMargin = maintainMargin
	this.MaxRiskLimit = maxRiskLimit
	this.MinRiskLimit = minRiskLimit
	this.RiskStep = riskStep
	this.MakerFeeRate = makerFeeRate
	this.TakerFeeRate = takerFeeRate
	this.TakerFixFee = takerFixFee
	this.MakerFixFee = makerFixFee
	this.SettlementFee = settlementFee
	this.IsDeleverage = isDeleverage
	this.IsQuanto = isQuanto
	this.IsInverse = isInverse
	this.MarkMethod = markMethod
	this.FairMethod = fairMethod
	this.FundingBaseSymbol = fundingBaseSymbol
	this.FundingQuoteSymbol = fundingQuoteSymbol
	this.FundingRateSymbol = fundingRateSymbol
	this.IndexSymbol = indexSymbol
	this.SettlementSymbol = settlementSymbol
	this.Status = status
	this.FundingFeeRate = fundingFeeRate
	this.PredictedFundingFeeRate = predictedFundingFeeRate
	this.FundingRateGranularity = fundingRateGranularity
	this.OpenInterest = openInterest
	this.TurnoverOf24h = turnoverOf24h
	this.VolumeOf24h = volumeOf24h
	this.MarkPrice = markPrice
	this.IndexPrice = indexPrice
	this.LastTradePrice = lastTradePrice
	this.NextFundingRateTime = nextFundingRateTime
	this.MaxLeverage = maxLeverage
	this.SourceExchanges = sourceExchanges
	this.PremiumsSymbol1M = premiumsSymbol1M
	this.PremiumsSymbol8H = premiumsSymbol8H
	this.FundingBaseSymbol1M = fundingBaseSymbol1M
	this.FundingQuoteSymbol1M = fundingQuoteSymbol1M
	this.LowPrice = lowPrice
	this.HighPrice = highPrice
	this.PriceChgPct = priceChgPct
	this.PriceChg = priceChg
	this.K = k
	this.M = m
	this.F = f
	this.MmrLimit = mmrLimit
	this.MmrLevConstant = mmrLevConstant
	this.SupportCross = supportCross
	this.BuyLimit = buyLimit
	this.SellLimit = sellLimit
	return &this
}

// NewGetSymbolRespWithDefaults instantiates a new GetSymbolResp object
// This constructor will only assign default values to properties that have it defined,
func NewGetSymbolRespWithDefaults() *GetSymbolResp {
	this := GetSymbolResp{}
	return &this
}

func (o *GetSymbolResp) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["rootSymbol"] = o.RootSymbol
	toSerialize["type"] = o.Type
	toSerialize["firstOpenDate"] = o.FirstOpenDate
	toSerialize["expireDate"] = o.ExpireDate
	toSerialize["settleDate"] = o.SettleDate
	toSerialize["baseCurrency"] = o.BaseCurrency
	toSerialize["quoteCurrency"] = o.QuoteCurrency
	toSerialize["settleCurrency"] = o.SettleCurrency
	toSerialize["maxOrderQty"] = o.MaxOrderQty
	toSerialize["maxPrice"] = o.MaxPrice
	toSerialize["lotSize"] = o.LotSize
	toSerialize["tickSize"] = o.TickSize
	toSerialize["indexPriceTickSize"] = o.IndexPriceTickSize
	toSerialize["multiplier"] = o.Multiplier
	toSerialize["initialMargin"] = o.InitialMargin
	toSerialize["maintainMargin"] = o.MaintainMargin
	toSerialize["maxRiskLimit"] = o.MaxRiskLimit
	toSerialize["minRiskLimit"] = o.MinRiskLimit
	toSerialize["riskStep"] = o.RiskStep
	toSerialize["makerFeeRate"] = o.MakerFeeRate
	toSerialize["takerFeeRate"] = o.TakerFeeRate
	toSerialize["takerFixFee"] = o.TakerFixFee
	toSerialize["makerFixFee"] = o.MakerFixFee
	toSerialize["settlementFee"] = o.SettlementFee
	toSerialize["isDeleverage"] = o.IsDeleverage
	toSerialize["isQuanto"] = o.IsQuanto
	toSerialize["isInverse"] = o.IsInverse
	toSerialize["markMethod"] = o.MarkMethod
	toSerialize["fairMethod"] = o.FairMethod
	toSerialize["fundingBaseSymbol"] = o.FundingBaseSymbol
	toSerialize["fundingQuoteSymbol"] = o.FundingQuoteSymbol
	toSerialize["fundingRateSymbol"] = o.FundingRateSymbol
	toSerialize["indexSymbol"] = o.IndexSymbol
	toSerialize["settlementSymbol"] = o.SettlementSymbol
	toSerialize["status"] = o.Status
	toSerialize["fundingFeeRate"] = o.FundingFeeRate
	toSerialize["predictedFundingFeeRate"] = o.PredictedFundingFeeRate
	toSerialize["fundingRateGranularity"] = o.FundingRateGranularity
	toSerialize["openInterest"] = o.OpenInterest
	toSerialize["turnoverOf24h"] = o.TurnoverOf24h
	toSerialize["volumeOf24h"] = o.VolumeOf24h
	toSerialize["markPrice"] = o.MarkPrice
	toSerialize["indexPrice"] = o.IndexPrice
	toSerialize["lastTradePrice"] = o.LastTradePrice
	toSerialize["nextFundingRateTime"] = o.NextFundingRateTime
	toSerialize["maxLeverage"] = o.MaxLeverage
	toSerialize["sourceExchanges"] = o.SourceExchanges
	toSerialize["premiumsSymbol1M"] = o.PremiumsSymbol1M
	toSerialize["premiumsSymbol8H"] = o.PremiumsSymbol8H
	toSerialize["fundingBaseSymbol1M"] = o.FundingBaseSymbol1M
	toSerialize["fundingQuoteSymbol1M"] = o.FundingQuoteSymbol1M
	toSerialize["lowPrice"] = o.LowPrice
	toSerialize["highPrice"] = o.HighPrice
	toSerialize["priceChgPct"] = o.PriceChgPct
	toSerialize["priceChg"] = o.PriceChg
	toSerialize["k"] = o.K
	toSerialize["m"] = o.M
	toSerialize["f"] = o.F
	toSerialize["mmrLimit"] = o.MmrLimit
	toSerialize["mmrLevConstant"] = o.MmrLevConstant
	toSerialize["supportCross"] = o.SupportCross
	toSerialize["buyLimit"] = o.BuyLimit
	toSerialize["sellLimit"] = o.SellLimit
	return toSerialize
}

func (o *GetSymbolResp) SetCommonResponse(response *types.RestResponse) {
	o.CommonResponse = response
}
