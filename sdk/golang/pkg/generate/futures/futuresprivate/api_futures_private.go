// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futuresprivate

import (
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/internal/interfaces"
)

type FuturesPrivateWS interface {

	// AllOrder All Order change pushes.
	// Push order changes for all symbol
	// push frequency: real-time
	AllOrder(callback AllOrderEventCallback) (id string, err error)

	// AllPosition All symbol position change events push
	// Subscribe to this topic to get real-time pushes on all symbols’ position change events
	// push frequency: real-time
	AllPosition(callback AllPositionEventCallback) (id string, err error)

	// Balance the balance change push
	// Subscribe to this topic to get real-time balance change pushes
	// push frequency: real-time
	Balance(callback BalanceEventCallback) (id string, err error)

	// CrossLeverage the leverage change push
	// Subscribe to this topic to get real-time pushes on leverage changes of contracts that are in cross margin mode
	// push frequency: real-time
	CrossLeverage(callback CrossLeverageEventCallback) (id string, err error)

	// MarginMode the margin mode change
	// Subscribe to this topic to get real-time pushes on symbols’ margin mode change events
	// push frequency: real-time
	MarginMode(callback MarginModeEventCallback) (id string, err error)

	// Order Order change pushes.
	// Push order changes for the specified symbol
	// push frequency: real-time
	Order(symbol string, callback OrderEventCallback) (id string, err error)

	// Position the position change events push
	// Subscribe this topic to get real-time pushes on symbols’ position change events
	// push frequency: real-time
	Position(symbol string, callback PositionEventCallback) (id string, err error)

	// StopOrders stop order change pushes.
	// Subscribe to this topic to get real-time pushes on stop order changes.
	// push frequency: real-time
	StopOrders(callback StopOrdersEventCallback) (id string, err error)

	// Unsubscribe from topics
	UnSubscribe(id string) error

	// Start websocket
	Start() error

	// Stop websocket
	Stop() error
}

type FuturesPrivateWSImpl struct {
	wsService interfaces.WebSocketService
}

func NewFuturesPrivateWSImp(wsService interfaces.WebSocketService) *FuturesPrivateWSImpl {
	return &FuturesPrivateWSImpl{wsService: wsService}
}

func (impl *FuturesPrivateWSImpl) AllOrder(callback AllOrderEventCallback) (string, error) {
	topicPrefix := "/contractMarket/tradeOrders"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &AllOrderEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) AllPosition(callback AllPositionEventCallback) (string, error) {
	topicPrefix := "/contract/positionAll"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &AllPositionEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) Balance(callback BalanceEventCallback) (string, error) {
	topicPrefix := "/contractAccount/wallet"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &BalanceEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) CrossLeverage(callback CrossLeverageEventCallback) (string, error) {
	topicPrefix := "/contract/crossLeverage"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &CrossLeverageEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) MarginMode(callback MarginModeEventCallback) (string, error) {
	topicPrefix := "/contract/marginMode"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &MarginModeEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) Order(symbol string, callback OrderEventCallback) (string, error) {
	topicPrefix := "/contractMarket/tradeOrders"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &OrderEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) Position(symbol string, callback PositionEventCallback) (string, error) {
	topicPrefix := "/contract/position"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &PositionEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) StopOrders(callback StopOrdersEventCallback) (string, error) {
	topicPrefix := "/contractMarket/advancedOrders"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &StopOrdersEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPrivateWSImpl) UnSubscribe(id string) error {
	return impl.wsService.Unsubscribe(id)
}

func (impl *FuturesPrivateWSImpl) Start() error {
	return impl.wsService.Start()
}

func (impl *FuturesPrivateWSImpl) Stop() error {
	return impl.wsService.Stop()
}
