// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futurespublic

import (
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/internal/interfaces"
	"strings"
)

type FuturesPublicWS interface {

	// Announcement announcement
	// Subscribe this topic to get Funding Fee Settlement.
	// push frequency: Settlement is made every 8 hours, real-time push
	Announcement(symbol string, callback AnnouncementEventCallback) (id string, err error)

	// Execution Match execution data.
	// For each order executed, the system will send you the match messages in the format as following.
	// push frequency: real-time
	Execution(symbol string, callback ExecutionEventCallback) (id string, err error)

	// Instrument instrument
	// Subscribe this topic to get the mark Price, index Price or funding fee Rate
	// push frequency: mark.index.price 1s, funding.rate 1min
	Instrument(symbol string, callback InstrumentEventCallback) (id string, err error)

	// Klines Klines
	// Subscribe to this topic to get K-Line data.
	// push frequency: 1s
	Klines(symbol string, type_ string, callback KlinesEventCallback) (id string, err error)

	// OrderbookIncrement Orderbook - Increment
	// The system will return the increment change orderbook data (all depth). If there is no change in the market, data will not be pushed.
	// push frequency: real-time
	OrderbookIncrement(symbol string, callback OrderbookIncrementEventCallback) (id string, err error)

	// OrderbookLevel50 Orderbook - Level50
	// The depth50 market data.
	// push frequency: 100ms
	OrderbookLevel50(symbol string, callback OrderbookLevel50EventCallback) (id string, err error)

	// OrderbookLevel5 Orderbook - Level5
	// The system will return the 5 best ask/bid orders data. If there is no change in the market, data will not be pushed
	// push frequency: 100ms
	OrderbookLevel5(symbol string, callback OrderbookLevel5EventCallback) (id string, err error)

	// SymbolSnapshot Symbol Snapshot
	// Get symbol snapshot.
	// push frequency: 5000ms
	SymbolSnapshot(symbol string, callback SymbolSnapshotEventCallback) (id string, err error)

	// TickerV1 Get Ticker(not recommended)
	// Subscribe to this topic to get real-time pushes on BBO changes. It is not recommended to use this topic any more. For real-time ticker information, please subscribe /contractMarket/tickerV2:{symbol}.
	// push frequency: real-time
	TickerV1(symbol string, callback TickerV1EventCallback) (id string, err error)

	// TickerV2 Get Ticker V2
	// Subscribe to this topic to get real-time pushes of BBO changes. After subscription, when there are changes in the order book (not necessarily ask1/bid1 changes), the system will push the real-time ticker symbol information to you.
	// push frequency: real-time
	TickerV2(symbol string, callback TickerV2EventCallback) (id string, err error)

	// Unsubscribe from topics
	UnSubscribe(id string) error

	// Start websocket
	Start() error

	// Stop websocket
	Stop() error
}

type FuturesPublicWSImpl struct {
	wsService interfaces.WebSocketService
}

func NewFuturesPublicWSImp(wsService interfaces.WebSocketService) *FuturesPublicWSImpl {
	return &FuturesPublicWSImpl{wsService: wsService}
}

func (impl *FuturesPublicWSImpl) Announcement(symbol string, callback AnnouncementEventCallback) (string, error) {
	topicPrefix := "/contract/announcement"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &AnnouncementEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) Execution(symbol string, callback ExecutionEventCallback) (string, error) {
	topicPrefix := "/contractMarket/execution"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &ExecutionEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) Instrument(symbol string, callback InstrumentEventCallback) (string, error) {
	topicPrefix := "/contract/instrument"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &InstrumentEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) Klines(symbol string, type_ string, callback KlinesEventCallback) (string, error) {
	topicPrefix := "/contractMarket/limitCandle"

	args := []string{strings.Join([]string{symbol, type_}, "_")}

	return impl.wsService.Subscribe(topicPrefix, args, &KlinesEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) OrderbookIncrement(symbol string, callback OrderbookIncrementEventCallback) (string, error) {
	topicPrefix := "/contractMarket/level2"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookIncrementEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) OrderbookLevel50(symbol string, callback OrderbookLevel50EventCallback) (string, error) {
	topicPrefix := "/contractMarket/level2Depth50"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookLevel50EventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) OrderbookLevel5(symbol string, callback OrderbookLevel5EventCallback) (string, error) {
	topicPrefix := "/contractMarket/level2Depth5"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookLevel5EventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) SymbolSnapshot(symbol string, callback SymbolSnapshotEventCallback) (string, error) {
	topicPrefix := "/contractMarket/snapshot"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &SymbolSnapshotEventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) TickerV1(symbol string, callback TickerV1EventCallback) (string, error) {
	topicPrefix := "/contractMarket/ticker"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &TickerV1EventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) TickerV2(symbol string, callback TickerV2EventCallback) (string, error) {
	topicPrefix := "/contractMarket/tickerV2"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &TickerV2EventCallbackWrapper{callback: callback})
}

func (impl *FuturesPublicWSImpl) UnSubscribe(id string) error {
	return impl.wsService.Unsubscribe(id)
}

func (impl *FuturesPublicWSImpl) Start() error {
	return impl.wsService.Start()
}

func (impl *FuturesPublicWSImpl) Stop() error {
	return impl.wsService.Stop()
}
