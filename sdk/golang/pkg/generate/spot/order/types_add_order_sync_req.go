// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

// AddOrderSyncReq struct for AddOrderSyncReq
type AddOrderSyncReq struct {
	// Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
	ClientOid *string `json:"clientOid,omitempty"`
	// Specify if the order is to 'buy' or 'sell'.
	Side string `json:"side,omitempty"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// Specify if the order is a 'limit' order or 'market' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
	Type string `json:"type,omitempty"`
	// Order placement remarks, length cannot exceed 20 characters (ASCII)
	Remark *string `json:"remark,omitempty"`
	// [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
	Stp *string `json:"stp,omitempty"`
	// Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
	Price *string `json:"price,omitempty"`
	// Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
	Size *string `json:"size,omitempty"`
	// [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
	TimeInForce *string `json:"timeInForce,omitempty"`
	// passive order labels, this is disabled when the order timing strategy is IOC or FOK
	PostOnly *bool `json:"postOnly,omitempty"`
	// [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
	Hidden *bool `json:"hidden,omitempty"`
	// Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
	Iceberg *bool `json:"iceberg,omitempty"`
	// Maximum visible quantity in iceberg orders
	VisibleSize *string `json:"visibleSize,omitempty"`
	// Order tag, length cannot exceed 20 characters (ASCII)
	Tags *string `json:"tags,omitempty"`
	// Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
	CancelAfter *int64 `json:"cancelAfter,omitempty"`
	// When **type** is market, select one out of two: size or funds
	Funds *string `json:"funds,omitempty"`
	// Order failed after timeout of specified milliseconds, If clientTimestamp + allowMaxTimeWindow < Gateway received the message time, this order will fail.
	AllowMaxTimeWindow *int64 `json:"allowMaxTimeWindow,omitempty"`
	// Equal to KC-API-TIMESTAMP. Needs to be defined if allowMaxTimeWindow is specified.
	ClientTimestamp *int64 `json:"clientTimestamp,omitempty"`
}

// NewAddOrderSyncReq instantiates a new AddOrderSyncReq object
// This constructor will assign default values to properties that have it defined
func NewAddOrderSyncReq(side string, symbol string, Type_ string) *AddOrderSyncReq {
	this := AddOrderSyncReq{}
	this.Side = side
	this.Symbol = symbol
	this.Type = Type_
	var timeInForce string = "GTC"
	this.TimeInForce = &timeInForce
	var postOnly bool = false
	this.PostOnly = &postOnly
	var hidden bool = false
	this.Hidden = &hidden
	var iceberg bool = false
	this.Iceberg = &iceberg
	var cancelAfter int64 = -1
	this.CancelAfter = &cancelAfter
	return &this
}

// NewAddOrderSyncReqWithDefaults instantiates a new AddOrderSyncReq object
// This constructor will only assign default values to properties that have it defined,
func NewAddOrderSyncReqWithDefaults() *AddOrderSyncReq {
	this := AddOrderSyncReq{}
	var timeInForce string = "GTC"
	this.TimeInForce = &timeInForce
	var postOnly bool = false
	this.PostOnly = &postOnly
	var hidden bool = false
	this.Hidden = &hidden
	var iceberg bool = false
	this.Iceberg = &iceberg
	var cancelAfter int64 = -1
	this.CancelAfter = &cancelAfter
	return &this
}

func (o *AddOrderSyncReq) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["side"] = o.Side
	toSerialize["symbol"] = o.Symbol
	toSerialize["type"] = o.Type
	toSerialize["remark"] = o.Remark
	toSerialize["stp"] = o.Stp
	toSerialize["price"] = o.Price
	toSerialize["size"] = o.Size
	toSerialize["timeInForce"] = o.TimeInForce
	toSerialize["postOnly"] = o.PostOnly
	toSerialize["hidden"] = o.Hidden
	toSerialize["iceberg"] = o.Iceberg
	toSerialize["visibleSize"] = o.VisibleSize
	toSerialize["tags"] = o.Tags
	toSerialize["cancelAfter"] = o.CancelAfter
	toSerialize["funds"] = o.Funds
	toSerialize["allowMaxTimeWindow"] = o.AllowMaxTimeWindow
	toSerialize["clientTimestamp"] = o.ClientTimestamp
	return toSerialize
}

type AddOrderSyncReqBuilder struct {
	obj *AddOrderSyncReq
}

func NewAddOrderSyncReqBuilder() *AddOrderSyncReqBuilder {
	return &AddOrderSyncReqBuilder{obj: NewAddOrderSyncReqWithDefaults()}
}

// Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
func (builder *AddOrderSyncReqBuilder) SetClientOid(value string) *AddOrderSyncReqBuilder {
	builder.obj.ClientOid = &value
	return builder
}

// Specify if the order is to 'buy' or 'sell'.
func (builder *AddOrderSyncReqBuilder) SetSide(value string) *AddOrderSyncReqBuilder {
	builder.obj.Side = value
	return builder
}

// symbol
func (builder *AddOrderSyncReqBuilder) SetSymbol(value string) *AddOrderSyncReqBuilder {
	builder.obj.Symbol = value
	return builder
}

// Specify if the order is a 'limit' order or 'market' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
func (builder *AddOrderSyncReqBuilder) SetType(value string) *AddOrderSyncReqBuilder {
	builder.obj.Type = value
	return builder
}

// Order placement remarks, length cannot exceed 20 characters (ASCII)
func (builder *AddOrderSyncReqBuilder) SetRemark(value string) *AddOrderSyncReqBuilder {
	builder.obj.Remark = &value
	return builder
}

// [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
func (builder *AddOrderSyncReqBuilder) SetStp(value string) *AddOrderSyncReqBuilder {
	builder.obj.Stp = &value
	return builder
}

// Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
func (builder *AddOrderSyncReqBuilder) SetPrice(value string) *AddOrderSyncReqBuilder {
	builder.obj.Price = &value
	return builder
}

// Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
func (builder *AddOrderSyncReqBuilder) SetSize(value string) *AddOrderSyncReqBuilder {
	builder.obj.Size = &value
	return builder
}

// [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
func (builder *AddOrderSyncReqBuilder) SetTimeInForce(value string) *AddOrderSyncReqBuilder {
	builder.obj.TimeInForce = &value
	return builder
}

// passive order labels, this is disabled when the order timing strategy is IOC or FOK
func (builder *AddOrderSyncReqBuilder) SetPostOnly(value bool) *AddOrderSyncReqBuilder {
	builder.obj.PostOnly = &value
	return builder
}

// [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
func (builder *AddOrderSyncReqBuilder) SetHidden(value bool) *AddOrderSyncReqBuilder {
	builder.obj.Hidden = &value
	return builder
}

// Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
func (builder *AddOrderSyncReqBuilder) SetIceberg(value bool) *AddOrderSyncReqBuilder {
	builder.obj.Iceberg = &value
	return builder
}

// Maximum visible quantity in iceberg orders
func (builder *AddOrderSyncReqBuilder) SetVisibleSize(value string) *AddOrderSyncReqBuilder {
	builder.obj.VisibleSize = &value
	return builder
}

// Order tag, length cannot exceed 20 characters (ASCII)
func (builder *AddOrderSyncReqBuilder) SetTags(value string) *AddOrderSyncReqBuilder {
	builder.obj.Tags = &value
	return builder
}

// Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
func (builder *AddOrderSyncReqBuilder) SetCancelAfter(value int64) *AddOrderSyncReqBuilder {
	builder.obj.CancelAfter = &value
	return builder
}

// When **type** is market, select one out of two: size or funds
func (builder *AddOrderSyncReqBuilder) SetFunds(value string) *AddOrderSyncReqBuilder {
	builder.obj.Funds = &value
	return builder
}

// Order failed after timeout of specified milliseconds, If clientTimestamp + allowMaxTimeWindow < Gateway received the message time, this order will fail.
func (builder *AddOrderSyncReqBuilder) SetAllowMaxTimeWindow(value int64) *AddOrderSyncReqBuilder {
	builder.obj.AllowMaxTimeWindow = &value
	return builder
}

// Equal to KC-API-TIMESTAMP. Needs to be defined if allowMaxTimeWindow is specified.
func (builder *AddOrderSyncReqBuilder) SetClientTimestamp(value int64) *AddOrderSyncReqBuilder {
	builder.obj.ClientTimestamp = &value
	return builder
}

func (builder *AddOrderSyncReqBuilder) Build() *AddOrderSyncReq {
	return builder.obj
}
