// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package spotprivate

import (
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/internal/interfaces"
)

type SpotPrivateWS interface {

	// Account Get Account Balance
	// You will receive this message when an account balance changes. The message contains the details of the change.
	// push frequency: real-time
	Account(callback AccountEventCallback) (id string, err error)

	// OrderV1 Get Order(V1)
	// This topic will push all change events of your orders.
	// push frequency: real-time
	OrderV1(callback OrderV1EventCallback) (id string, err error)

	// OrderV2 Get Order(V2)
	// This topic will push all change events of your orders. Compared with v1, v2 adds an Order Status: \&quot;new\&quot;, there is no difference in push speed
	// push frequency: real-time
	OrderV2(callback OrderV2EventCallback) (id string, err error)

	// StopOrder Get Stop Order
	// This topic will push all change events of your stop orders.
	// push frequency: real-time
	StopOrder(callback StopOrderEventCallback) (id string, err error)

	// Unsubscribe from topics
	UnSubscribe(id string) error

	// Start websocket
	Start() error

	// Stop websocket
	Stop() error
}

type SpotPrivateWSImpl struct {
	wsService interfaces.WebSocketService
}

func NewSpotPrivateWSImp(wsService interfaces.WebSocketService) *SpotPrivateWSImpl {
	return &SpotPrivateWSImpl{wsService: wsService}
}

func (impl *SpotPrivateWSImpl) Account(callback AccountEventCallback) (string, error) {
	topicPrefix := "/account/balance"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &AccountEventCallbackWrapper{callback: callback})
}

func (impl *SpotPrivateWSImpl) OrderV1(callback OrderV1EventCallback) (string, error) {
	topicPrefix := "/spotMarket/tradeOrders"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &OrderV1EventCallbackWrapper{callback: callback})
}

func (impl *SpotPrivateWSImpl) OrderV2(callback OrderV2EventCallback) (string, error) {
	topicPrefix := "/spotMarket/tradeOrdersV2"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &OrderV2EventCallbackWrapper{callback: callback})
}

func (impl *SpotPrivateWSImpl) StopOrder(callback StopOrderEventCallback) (string, error) {
	topicPrefix := "/spotMarket/advancedOrders"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &StopOrderEventCallbackWrapper{callback: callback})
}

func (impl *SpotPrivateWSImpl) UnSubscribe(id string) error {
	return impl.wsService.Unsubscribe(id)
}

func (impl *SpotPrivateWSImpl) Start() error {
	return impl.wsService.Start()
}

func (impl *SpotPrivateWSImpl) Stop() error {
	return impl.wsService.Stop()
}
