// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package spotpublic

import (
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/internal/interfaces"
	"strings"
)

type SpotPublicWS interface {

	// AllTickers Get All Tickers
	// Subscribe to this topic to get pushes on all market symbol BBO changes.
	// push frequency: once every 100ms
	AllTickers(callback AllTickersEventCallback) (id string, err error)

	// CallAuctionInfo Get Call Auction Info
	// Subscribe to this topic to get the specified symbol call auction info.
	// push frequency: once every 100ms
	CallAuctionInfo(symbol string, callback CallAuctionInfoEventCallback) (id string, err error)

	// CallAuctionOrderbookLevel50 CallAuctionOrderbook - Level50
	// The system will return the call auction 50 best ask/bid orders data, If there is no change in the market, data will not be pushed
	// push frequency: once every 100ms
	CallAuctionOrderbookLevel50(symbol string, callback CallAuctionOrderbookLevel50EventCallback) (id string, err error)

	// Klines Klines
	// Subscribe to this topic to get K-Line data.
	// push frequency: real-time
	Klines(symbol string, type_ string, callback KlinesEventCallback) (id string, err error)

	// MarketSnapshot Market Snapshot
	// Subscribe this topic to get snapshot data for the entire market.
	// push frequency: once every 2s
	MarketSnapshot(market string, callback MarketSnapshotEventCallback) (id string, err error)

	// OrderbookIncrement Orderbook - Increment
	// The system will return the increment change orderbook data (all depths); a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
	// push frequency: real-time
	OrderbookIncrement(symbol []string, callback OrderbookIncrementEventCallback) (id string, err error)

	// OrderbookLevel1 Orderbook - Level1
	// The system will return the 1 best ask/bid orders data; a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
	// push frequency: once every 10ms
	OrderbookLevel1(symbol []string, callback OrderbookLevel1EventCallback) (id string, err error)

	// OrderbookLevel50 Orderbook - Level50
	// The system will return data for the 50 best ask/bid orders; a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
	// push frequency: once every 100ms
	OrderbookLevel50(symbol []string, callback OrderbookLevel50EventCallback) (id string, err error)

	// OrderbookLevel5 Orderbook - Level5
	// The system will return the 5 best ask/bid orders data; a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
	// push frequency: once every 100ms
	OrderbookLevel5(symbol []string, callback OrderbookLevel5EventCallback) (id string, err error)

	// SymbolSnapshot Symbol Snapshot
	// Subscribe to get snapshot data for a single symbol.
	// push frequency: once every 2s
	SymbolSnapshot(symbol string, callback SymbolSnapshotEventCallback) (id string, err error)

	// Ticker Get Ticker
	// Subscribe to this topic to get specified symbol pushes on BBO changes.
	// push frequency: once every 100ms
	Ticker(symbol []string, callback TickerEventCallback) (id string, err error)

	// Trade Trade
	// Subscribe to this topic to get Level 3 matching event data flows. A topic supports up to 100 symbols.
	// push frequency: real-time
	Trade(symbol []string, callback TradeEventCallback) (id string, err error)

	// Unsubscribe from topics
	UnSubscribe(id string) error

	// Start websocket
	Start() error

	// Stop websocket
	Stop() error
}

type SpotPublicWSImpl struct {
	wsService interfaces.WebSocketService
}

func NewSpotPublicWSImp(wsService interfaces.WebSocketService) *SpotPublicWSImpl {
	return &SpotPublicWSImpl{wsService: wsService}
}

func (impl *SpotPublicWSImpl) AllTickers(callback AllTickersEventCallback) (string, error) {
	topicPrefix := "/market/ticker:all"

	args := []string{}

	return impl.wsService.Subscribe(topicPrefix, args, &AllTickersEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) CallAuctionInfo(symbol string, callback CallAuctionInfoEventCallback) (string, error) {
	topicPrefix := "/callauction/callauctionData"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &CallAuctionInfoEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) CallAuctionOrderbookLevel50(symbol string, callback CallAuctionOrderbookLevel50EventCallback) (string, error) {
	topicPrefix := "/callauction/level2Depth50"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &CallAuctionOrderbookLevel50EventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) Klines(symbol string, type_ string, callback KlinesEventCallback) (string, error) {
	topicPrefix := "/market/candles"

	args := []string{strings.Join([]string{symbol, type_}, "_")}

	return impl.wsService.Subscribe(topicPrefix, args, &KlinesEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) MarketSnapshot(market string, callback MarketSnapshotEventCallback) (string, error) {
	topicPrefix := "/market/snapshot"

	args := []string{market}

	return impl.wsService.Subscribe(topicPrefix, args, &MarketSnapshotEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) OrderbookIncrement(symbol []string, callback OrderbookIncrementEventCallback) (string, error) {
	topicPrefix := "/market/level2"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookIncrementEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) OrderbookLevel1(symbol []string, callback OrderbookLevel1EventCallback) (string, error) {
	topicPrefix := "/spotMarket/level1"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookLevel1EventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) OrderbookLevel50(symbol []string, callback OrderbookLevel50EventCallback) (string, error) {
	topicPrefix := "/spotMarket/level2Depth50"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookLevel50EventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) OrderbookLevel5(symbol []string, callback OrderbookLevel5EventCallback) (string, error) {
	topicPrefix := "/spotMarket/level2Depth5"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &OrderbookLevel5EventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) SymbolSnapshot(symbol string, callback SymbolSnapshotEventCallback) (string, error) {
	topicPrefix := "/market/snapshot"

	args := []string{symbol}

	return impl.wsService.Subscribe(topicPrefix, args, &SymbolSnapshotEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) Ticker(symbol []string, callback TickerEventCallback) (string, error) {
	topicPrefix := "/market/ticker"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &TickerEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) Trade(symbol []string, callback TradeEventCallback) (string, error) {
	topicPrefix := "/market/match"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &TradeEventCallbackWrapper{callback: callback})
}

func (impl *SpotPublicWSImpl) UnSubscribe(id string) error {
	return impl.wsService.Unsubscribe(id)
}

func (impl *SpotPublicWSImpl) Start() error {
	return impl.wsService.Start()
}

func (impl *SpotPublicWSImpl) Stop() error {
	return impl.wsService.Stop()
}
