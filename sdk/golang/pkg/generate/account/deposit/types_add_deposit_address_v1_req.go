// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package deposit

// AddDepositAddressV1Req struct for AddDepositAddressV1Req
type AddDepositAddressV1Req struct {
	// currency
	Currency string `json:"currency,omitempty"`
	// The chainId of currency, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native. This only applies to multi-chain currencies; no need for single-chain currencies.
	Chain *string `json:"chain,omitempty"`
	// Deposit account type: main (funding account), trade (spot trading account); the default is main
	To *string `json:"to,omitempty"`
}

// NewAddDepositAddressV1Req instantiates a new AddDepositAddressV1Req object
// This constructor will assign default values to properties that have it defined
func NewAddDepositAddressV1Req(currency string) *AddDepositAddressV1Req {
	this := AddDepositAddressV1Req{}
	this.Currency = currency
	var chain string = "eth"
	this.Chain = &chain
	var to string = "MAIN"
	this.To = &to
	return &this
}

// NewAddDepositAddressV1ReqWithDefaults instantiates a new AddDepositAddressV1Req object
// This constructor will only assign default values to properties that have it defined,
func NewAddDepositAddressV1ReqWithDefaults() *AddDepositAddressV1Req {
	this := AddDepositAddressV1Req{}
	var chain string = "eth"
	this.Chain = &chain
	var to string = "MAIN"
	this.To = &to
	return &this
}

func (o *AddDepositAddressV1Req) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["chain"] = o.Chain
	toSerialize["to"] = o.To
	return toSerialize
}

type AddDepositAddressV1ReqBuilder struct {
	obj *AddDepositAddressV1Req
}

func NewAddDepositAddressV1ReqBuilder() *AddDepositAddressV1ReqBuilder {
	return &AddDepositAddressV1ReqBuilder{obj: NewAddDepositAddressV1ReqWithDefaults()}
}

// currency
func (builder *AddDepositAddressV1ReqBuilder) SetCurrency(value string) *AddDepositAddressV1ReqBuilder {
	builder.obj.Currency = value
	return builder
}

// The chainId of currency, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native. This only applies to multi-chain currencies; no need for single-chain currencies.
func (builder *AddDepositAddressV1ReqBuilder) SetChain(value string) *AddDepositAddressV1ReqBuilder {
	builder.obj.Chain = &value
	return builder
}

// Deposit account type: main (funding account), trade (spot trading account); the default is main
func (builder *AddDepositAddressV1ReqBuilder) SetTo(value string) *AddDepositAddressV1ReqBuilder {
	builder.obj.To = &value
	return builder
}

func (builder *AddDepositAddressV1ReqBuilder) Build() *AddDepositAddressV1Req {
	return builder.obj
}
