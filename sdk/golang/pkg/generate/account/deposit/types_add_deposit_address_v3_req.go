// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package deposit

// AddDepositAddressV3Req struct for AddDepositAddressV3Req
type AddDepositAddressV3Req struct {
	// currency
	Currency string `json:"currency,omitempty"`
	// The chainId of currency, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native.
	Chain string `json:"chain,omitempty"`
	// Deposit account type: MAIN (funding account), TRADE (spot trading account); the default is MAIN
	To *string `json:"to,omitempty"`
	// Deposit amount. This parameter is only used when applying for invoices on the Lightning Network. This parameter is invalid if it is not passed through the Lightning Network.
	Amount *string `json:"amount,omitempty"`
}

// NewAddDepositAddressV3Req instantiates a new AddDepositAddressV3Req object
// This constructor will assign default values to properties that have it defined
func NewAddDepositAddressV3Req(currency string, chain string) *AddDepositAddressV3Req {
	this := AddDepositAddressV3Req{}
	this.Currency = currency
	this.Chain = chain
	var to string = "MAIN"
	this.To = &to
	return &this
}

// NewAddDepositAddressV3ReqWithDefaults instantiates a new AddDepositAddressV3Req object
// This constructor will only assign default values to properties that have it defined,
func NewAddDepositAddressV3ReqWithDefaults() *AddDepositAddressV3Req {
	this := AddDepositAddressV3Req{}
	var chain string = "eth"
	this.Chain = chain
	var to string = "MAIN"
	this.To = &to
	return &this
}

func (o *AddDepositAddressV3Req) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["chain"] = o.Chain
	toSerialize["to"] = o.To
	toSerialize["amount"] = o.Amount
	return toSerialize
}

type AddDepositAddressV3ReqBuilder struct {
	obj *AddDepositAddressV3Req
}

func NewAddDepositAddressV3ReqBuilder() *AddDepositAddressV3ReqBuilder {
	return &AddDepositAddressV3ReqBuilder{obj: NewAddDepositAddressV3ReqWithDefaults()}
}

// currency
func (builder *AddDepositAddressV3ReqBuilder) SetCurrency(value string) *AddDepositAddressV3ReqBuilder {
	builder.obj.Currency = value
	return builder
}

// The chainId of currency, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native.
func (builder *AddDepositAddressV3ReqBuilder) SetChain(value string) *AddDepositAddressV3ReqBuilder {
	builder.obj.Chain = value
	return builder
}

// Deposit account type: MAIN (funding account), TRADE (spot trading account); the default is MAIN
func (builder *AddDepositAddressV3ReqBuilder) SetTo(value string) *AddDepositAddressV3ReqBuilder {
	builder.obj.To = &value
	return builder
}

// Deposit amount. This parameter is only used when applying for invoices on the Lightning Network. This parameter is invalid if it is not passed through the Lightning Network.
func (builder *AddDepositAddressV3ReqBuilder) SetAmount(value string) *AddDepositAddressV3ReqBuilder {
	builder.obj.Amount = &value
	return builder
}

func (builder *AddDepositAddressV3ReqBuilder) Build() *AddDepositAddressV3Req {
	return builder.obj
}
