# API FUNCTION TEMPLATE


func TestTransferGetTransferQuotasReq(t *testing.T) {
    // GetTransferQuotas
    // Get Transfer Quotas
    // /api/v1/accounts/transferable

    builder := transfer.NewGetTransferQuotasReqBuilder()
    builder.SetCurrency(?).SetType(?).SetTag(?)
    req := builder.Build()

    resp, err := transferApi.GetTransferQuotas(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestTransferFlexTransferReq(t *testing.T) {
    // FlexTransfer
    // Flex Transfer
    // /api/v3/accounts/universal-transfer

    builder := transfer.NewFlexTransferReqBuilder()
    builder.SetClientOid(?).SetCurrency(?).SetAmount(?).SetFromUserId(?).SetFromAccountType(?).SetFromAccountTag(?).SetType(?).SetToUserId(?).SetToAccountType(?).SetToAccountTag(?)
    req := builder.Build()

    resp, err := transferApi.FlexTransfer(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestTransferSubAccountTransferReq(t *testing.T) {
    // SubAccountTransfer
    // Sub-account Transfer
    // /api/v2/accounts/sub-transfer

    builder := transfer.NewSubAccountTransferReqBuilder()
    builder.SetClientOid(?).SetCurrency(?).SetAmount(?).SetDirection(?).SetAccountType(?).SetSubAccountType(?).SetSubUserId(?).SetTag(?).SetSubTag(?)
    req := builder.Build()

    resp, err := transferApi.SubAccountTransfer(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestTransferInnerTransferReq(t *testing.T) {
    // InnerTransfer
    // Internal Transfer
    // /api/v2/accounts/inner-transfer

    builder := transfer.NewInnerTransferReqBuilder()
    builder.SetClientOid(?).SetCurrency(?).SetAmount(?).SetTo(?).SetFromTag(?).SetToTag(?).SetFrom(?)
    req := builder.Build()

    resp, err := transferApi.InnerTransfer(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestTransferFuturesAccountTransferOutReq(t *testing.T) {
    // FuturesAccountTransferOut
    // Futures Account Transfer Out
    // /api/v3/transfer-out

    builder := transfer.NewFuturesAccountTransferOutReqBuilder()
    builder.SetCurrency(?).SetAmount(?).SetRecAccountType(?)
    req := builder.Build()

    resp, err := transferApi.FuturesAccountTransferOut(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestTransferFuturesAccountTransferInReq(t *testing.T) {
    // FuturesAccountTransferIn
    // Futures Account Transfer In
    // /api/v1/transfer-in

    builder := transfer.NewFuturesAccountTransferInReqBuilder()
    builder.SetCurrency(?).SetAmount(?).SetPayAccountType(?)
    req := builder.Build()

    resp, err := transferApi.FuturesAccountTransferIn(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestTransferGetFuturesAccountTransferOutLedgerReq(t *testing.T) {
    // GetFuturesAccountTransferOutLedger
    // Get Futures Account Transfer Out Ledger
    // /api/v1/transfer-list

    builder := transfer.NewGetFuturesAccountTransferOutLedgerReqBuilder()
    builder.SetCurrency(?).SetType(?).SetTag(?).SetStartAt(?).SetEndAt(?).SetCurrentPage(?).SetPageSize(?)
    req := builder.Build()

    resp, err := transferApi.GetFuturesAccountTransferOutLedger(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}

