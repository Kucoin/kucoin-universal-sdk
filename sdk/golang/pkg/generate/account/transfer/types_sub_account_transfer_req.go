// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package transfer

// SubAccountTransferReq struct for SubAccountTransferReq
type SubAccountTransferReq struct {
	// Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
	ClientOid string `json:"clientOid,omitempty"`
	// currency
	Currency string `json:"currency,omitempty"`
	// Transfer amount: The amount is a positive integer multiple of the currency precision.
	Amount string `json:"amount,omitempty"`
	// OUT — the master user to sub user IN — the sub user to the master user
	Direction string `json:"direction,omitempty"`
	// Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
	AccountType *string `json:"accountType,omitempty"`
	// Sub-account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
	SubAccountType *string `json:"subAccountType,omitempty"`
	// the user ID of a sub-account.
	SubUserId *string `json:"subUserId,omitempty"`
	//  Need to be defined if accountType=ISOLATED.
	Tag *string `json:"tag,omitempty"`
	//  Need to be defined if subAccountType=ISOLATED.
	SubTag string `json:"subTag,omitempty"`
}

// NewSubAccountTransferReq instantiates a new SubAccountTransferReq object
// This constructor will assign default values to properties that have it defined
func NewSubAccountTransferReq(clientOid string, currency string, amount string, direction string, subTag string) *SubAccountTransferReq {
	this := SubAccountTransferReq{}
	this.ClientOid = clientOid
	this.Currency = currency
	this.Amount = amount
	this.Direction = direction
	var accountType string = "MAIN"
	this.AccountType = &accountType
	var subAccountType string = "MAIN"
	this.SubAccountType = &subAccountType
	this.SubTag = subTag
	return &this
}

// NewSubAccountTransferReqWithDefaults instantiates a new SubAccountTransferReq object
// This constructor will only assign default values to properties that have it defined,
func NewSubAccountTransferReqWithDefaults() *SubAccountTransferReq {
	this := SubAccountTransferReq{}
	var accountType string = "MAIN"
	this.AccountType = &accountType
	var subAccountType string = "MAIN"
	this.SubAccountType = &subAccountType
	return &this
}

func (o *SubAccountTransferReq) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["currency"] = o.Currency
	toSerialize["amount"] = o.Amount
	toSerialize["direction"] = o.Direction
	toSerialize["accountType"] = o.AccountType
	toSerialize["subAccountType"] = o.SubAccountType
	toSerialize["subUserId"] = o.SubUserId
	toSerialize["tag"] = o.Tag
	toSerialize["subTag"] = o.SubTag
	return toSerialize
}

type SubAccountTransferReqBuilder struct {
	obj *SubAccountTransferReq
}

func NewSubAccountTransferReqBuilder() *SubAccountTransferReqBuilder {
	return &SubAccountTransferReqBuilder{obj: NewSubAccountTransferReqWithDefaults()}
}

// Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
func (builder *SubAccountTransferReqBuilder) SetClientOid(value string) *SubAccountTransferReqBuilder {
	builder.obj.ClientOid = value
	return builder
}

// currency
func (builder *SubAccountTransferReqBuilder) SetCurrency(value string) *SubAccountTransferReqBuilder {
	builder.obj.Currency = value
	return builder
}

// Transfer amount: The amount is a positive integer multiple of the currency precision.
func (builder *SubAccountTransferReqBuilder) SetAmount(value string) *SubAccountTransferReqBuilder {
	builder.obj.Amount = value
	return builder
}

// OUT — the master user to sub user IN — the sub user to the master user
func (builder *SubAccountTransferReqBuilder) SetDirection(value string) *SubAccountTransferReqBuilder {
	builder.obj.Direction = value
	return builder
}

// Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
func (builder *SubAccountTransferReqBuilder) SetAccountType(value string) *SubAccountTransferReqBuilder {
	builder.obj.AccountType = &value
	return builder
}

// Sub-account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
func (builder *SubAccountTransferReqBuilder) SetSubAccountType(value string) *SubAccountTransferReqBuilder {
	builder.obj.SubAccountType = &value
	return builder
}

// the user ID of a sub-account.
func (builder *SubAccountTransferReqBuilder) SetSubUserId(value string) *SubAccountTransferReqBuilder {
	builder.obj.SubUserId = &value
	return builder
}

// Need to be defined if accountType=ISOLATED.
func (builder *SubAccountTransferReqBuilder) SetTag(value string) *SubAccountTransferReqBuilder {
	builder.obj.Tag = &value
	return builder
}

// Need to be defined if subAccountType=ISOLATED.
func (builder *SubAccountTransferReqBuilder) SetSubTag(value string) *SubAccountTransferReqBuilder {
	builder.obj.SubTag = value
	return builder
}

func (builder *SubAccountTransferReqBuilder) Build() *SubAccountTransferReq {
	return builder.obj
}
