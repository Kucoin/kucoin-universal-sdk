// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package withdrawal

// WithdrawalV1Req struct for WithdrawalV1Req
type WithdrawalV1Req struct {
	// currency
	Currency string `json:"currency,omitempty"`
	// The chainId of currency, For a currency with multiple chains, it is recommended to specify the chain parameter instead of using the default chain; you can query the chainId through the response of the GET /api/v3/currencies/{currency} interface.
	Chain *string `json:"chain,omitempty"`
	// Withdrawal address
	Address string `json:"address,omitempty"`
	// Withdrawal amount, a positive number which is a multiple of the amount precision
	Amount int64 `json:"amount,omitempty"`
	// Address remark. If there’s no remark, it is empty. When you withdraw from other platforms to KuCoin, you need to fill in memo(tag). Be careful: If you do not fill in memo(tag), your deposit may not be available.
	Memo *string `json:"memo,omitempty"`
	// Internal withdrawal or not. Default: False
	IsInner *bool `json:"isInner,omitempty"`
	// Remark
	Remark *string `json:"remark,omitempty"`
	// Withdrawal fee deduction type: INTERNAL, EXTERNAL, or not specified  1. INTERNAL: Deduct the transaction fees from your withdrawal amount 2. EXTERNAL: Deduct the transaction fees from your main account 3. If you don't specify the feeDeductType parameter, when the balance in your main account is sufficient to support the withdrawal, the system will initially deduct the transaction fees from your main account. But if the balance in your main account is not sufficient to support the withdrawal, the system will deduct the fees from your withdrawal amount. For example: Suppose you are going to withdraw 1 BTC from the KuCoin platform (transaction fee: 0.0001BTC), if the balance in your main account is insufficient, the system will deduct the transaction fees from your withdrawal amount. In this case, you will be receiving 0.9999BTC.
	FeeDeductType *string `json:"feeDeductType,omitempty"`
}

// NewWithdrawalV1Req instantiates a new WithdrawalV1Req object
// This constructor will assign default values to properties that have it defined
func NewWithdrawalV1Req(currency string, address string, amount int64) *WithdrawalV1Req {
	this := WithdrawalV1Req{}
	this.Currency = currency
	var chain string = "eth"
	this.Chain = &chain
	this.Address = address
	this.Amount = amount
	var isInner bool = false
	this.IsInner = &isInner
	return &this
}

// NewWithdrawalV1ReqWithDefaults instantiates a new WithdrawalV1Req object
// This constructor will only assign default values to properties that have it defined,
func NewWithdrawalV1ReqWithDefaults() *WithdrawalV1Req {
	this := WithdrawalV1Req{}
	var chain string = "eth"
	this.Chain = &chain
	var isInner bool = false
	this.IsInner = &isInner
	return &this
}

func (o *WithdrawalV1Req) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["chain"] = o.Chain
	toSerialize["address"] = o.Address
	toSerialize["amount"] = o.Amount
	toSerialize["memo"] = o.Memo
	toSerialize["isInner"] = o.IsInner
	toSerialize["remark"] = o.Remark
	toSerialize["feeDeductType"] = o.FeeDeductType
	return toSerialize
}

type WithdrawalV1ReqBuilder struct {
	obj *WithdrawalV1Req
}

func NewWithdrawalV1ReqBuilder() *WithdrawalV1ReqBuilder {
	return &WithdrawalV1ReqBuilder{obj: NewWithdrawalV1ReqWithDefaults()}
}

// currency
func (builder *WithdrawalV1ReqBuilder) SetCurrency(value string) *WithdrawalV1ReqBuilder {
	builder.obj.Currency = value
	return builder
}

// The chainId of currency, For a currency with multiple chains, it is recommended to specify the chain parameter instead of using the default chain; you can query the chainId through the response of the GET /api/v3/currencies/{currency} interface.
func (builder *WithdrawalV1ReqBuilder) SetChain(value string) *WithdrawalV1ReqBuilder {
	builder.obj.Chain = &value
	return builder
}

// Withdrawal address
func (builder *WithdrawalV1ReqBuilder) SetAddress(value string) *WithdrawalV1ReqBuilder {
	builder.obj.Address = value
	return builder
}

// Withdrawal amount, a positive number which is a multiple of the amount precision
func (builder *WithdrawalV1ReqBuilder) SetAmount(value int64) *WithdrawalV1ReqBuilder {
	builder.obj.Amount = value
	return builder
}

// Address remark. If there’s no remark, it is empty. When you withdraw from other platforms to KuCoin, you need to fill in memo(tag). Be careful: If you do not fill in memo(tag), your deposit may not be available.
func (builder *WithdrawalV1ReqBuilder) SetMemo(value string) *WithdrawalV1ReqBuilder {
	builder.obj.Memo = &value
	return builder
}

// Internal withdrawal or not. Default: False
func (builder *WithdrawalV1ReqBuilder) SetIsInner(value bool) *WithdrawalV1ReqBuilder {
	builder.obj.IsInner = &value
	return builder
}

// Remark
func (builder *WithdrawalV1ReqBuilder) SetRemark(value string) *WithdrawalV1ReqBuilder {
	builder.obj.Remark = &value
	return builder
}

// Withdrawal fee deduction type: INTERNAL, EXTERNAL, or not specified  1. INTERNAL: Deduct the transaction fees from your withdrawal amount 2. EXTERNAL: Deduct the transaction fees from your main account 3. If you don't specify the feeDeductType parameter, when the balance in your main account is sufficient to support the withdrawal, the system will initially deduct the transaction fees from your main account. But if the balance in your main account is not sufficient to support the withdrawal, the system will deduct the fees from your withdrawal amount. For example: Suppose you are going to withdraw 1 BTC from the KuCoin platform (transaction fee: 0.0001BTC), if the balance in your main account is insufficient, the system will deduct the transaction fees from your withdrawal amount. In this case, you will be receiving 0.9999BTC.
func (builder *WithdrawalV1ReqBuilder) SetFeeDeductType(value string) *WithdrawalV1ReqBuilder {
	builder.obj.FeeDeductType = &value
	return builder
}

func (builder *WithdrawalV1ReqBuilder) Build() *WithdrawalV1Req {
	return builder.obj
}
