// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

// GetTradeHistoryItems struct for GetTradeHistoryItems
type GetTradeHistoryItems struct {
	// ID of transaction detail
	Id int64 `json:"id,omitempty"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// Trade ID, symbol latitude increment
	TradeId int64 `json:"tradeId,omitempty"`
	// The unique order id generated by the trading system
	OrderId string `json:"orderId,omitempty"`
	// Counterparty order ID
	CounterOrderId string `json:"counterOrderId,omitempty"`
	// Buy or sell
	Side string `json:"side,omitempty"`
	// Liquidity type: taker or maker
	Liquidity  string `json:"liquidity,omitempty"`
	ForceTaker bool   `json:"forceTaker,omitempty"`
	// Order Price
	Price string `json:"price,omitempty"`
	// Order Size
	Size string `json:"size,omitempty"`
	// Order Funds
	Funds string `json:"funds,omitempty"`
	// [Handling fees](https://www.kucoin.com/docs-new/api-5327739)
	Fee string `json:"fee,omitempty"`
	// Fee rate
	FeeRate string `json:"feeRate,omitempty"`
	// Currency used to calculate trading fee
	FeeCurrency string `json:"feeCurrency,omitempty"`
	// Take Profit and Stop Loss type, currently HFT does not support the Take Profit and Stop Loss type, so it is empty
	Stop string `json:"stop,omitempty"`
	// Trade type, redundancy param
	TradeType string `json:"tradeType,omitempty"`
	// Users in some regions have this field
	Tax string `json:"tax,omitempty"`
	// Tax Rate: Users in some regions must query this field
	TaxRate string `json:"taxRate,omitempty"`
	// Specify if the order is a 'limit' order or 'market' order.
	Type      string `json:"type,omitempty"`
	CreatedAt int64  `json:"createdAt,omitempty"`
}

// NewGetTradeHistoryItems instantiates a new GetTradeHistoryItems object
// This constructor will assign default values to properties that have it defined
func NewGetTradeHistoryItems(id int64, symbol string, tradeId int64, orderId string, counterOrderId string, side string, liquidity string, forceTaker bool, price string, size string, funds string, fee string, feeRate string, feeCurrency string, stop string, tradeType string, tax string, taxRate string, Type_ string, createdAt int64) *GetTradeHistoryItems {
	this := GetTradeHistoryItems{}
	this.Id = id
	this.Symbol = symbol
	this.TradeId = tradeId
	this.OrderId = orderId
	this.CounterOrderId = counterOrderId
	this.Side = side
	this.Liquidity = liquidity
	this.ForceTaker = forceTaker
	this.Price = price
	this.Size = size
	this.Funds = funds
	this.Fee = fee
	this.FeeRate = feeRate
	this.FeeCurrency = feeCurrency
	this.Stop = stop
	this.TradeType = tradeType
	this.Tax = tax
	this.TaxRate = taxRate
	this.Type = Type_
	this.CreatedAt = createdAt
	return &this
}

// NewGetTradeHistoryItemsWithDefaults instantiates a new GetTradeHistoryItems object
// This constructor will only assign default values to properties that have it defined,
func NewGetTradeHistoryItemsWithDefaults() *GetTradeHistoryItems {
	this := GetTradeHistoryItems{}
	return &this
}

func (o *GetTradeHistoryItems) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["symbol"] = o.Symbol
	toSerialize["tradeId"] = o.TradeId
	toSerialize["orderId"] = o.OrderId
	toSerialize["counterOrderId"] = o.CounterOrderId
	toSerialize["side"] = o.Side
	toSerialize["liquidity"] = o.Liquidity
	toSerialize["forceTaker"] = o.ForceTaker
	toSerialize["price"] = o.Price
	toSerialize["size"] = o.Size
	toSerialize["funds"] = o.Funds
	toSerialize["fee"] = o.Fee
	toSerialize["feeRate"] = o.FeeRate
	toSerialize["feeCurrency"] = o.FeeCurrency
	toSerialize["stop"] = o.Stop
	toSerialize["tradeType"] = o.TradeType
	toSerialize["tax"] = o.Tax
	toSerialize["taxRate"] = o.TaxRate
	toSerialize["type"] = o.Type
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize
}
