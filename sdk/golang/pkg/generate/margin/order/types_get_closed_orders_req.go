// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

// GetClosedOrdersReq struct for GetClosedOrdersReq
type GetClosedOrdersReq struct {
	// symbol
	Symbol *string `json:"symbol,omitempty" url:"symbol,omitempty"`
	// Transaction type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
	TradeType *string `json:"tradeType,omitempty" url:"tradeType,omitempty"`
	// Specify if the order is to 'buy' or 'sell'.
	Side *string `json:"side,omitempty" url:"side,omitempty"`
	// Specify if the order is a 'limit' order or 'market' order.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
	LastId *int64 `json:"lastId,omitempty" url:"lastId,omitempty"`
	// Default20, Max100
	Limit *int32 `json:"limit,omitempty" url:"limit,omitempty"`
	// Start time (milliseconds)
	StartAt *int64 `json:"startAt,omitempty" url:"startAt,omitempty"`
	// End time (milliseconds)
	EndAt *int64 `json:"endAt,omitempty" url:"endAt,omitempty"`
}

// NewGetClosedOrdersReq instantiates a new GetClosedOrdersReq object
// This constructor will assign default values to properties that have it defined
func NewGetClosedOrdersReq() *GetClosedOrdersReq {
	this := GetClosedOrdersReq{}
	var limit int32 = 20
	this.Limit = &limit
	return &this
}

// NewGetClosedOrdersReqWithDefaults instantiates a new GetClosedOrdersReq object
// This constructor will only assign default values to properties that have it defined,
func NewGetClosedOrdersReqWithDefaults() *GetClosedOrdersReq {
	this := GetClosedOrdersReq{}
	var limit int32 = 20
	this.Limit = &limit
	return &this
}

func (o *GetClosedOrdersReq) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["tradeType"] = o.TradeType
	toSerialize["side"] = o.Side
	toSerialize["type"] = o.Type
	toSerialize["lastId"] = o.LastId
	toSerialize["limit"] = o.Limit
	toSerialize["startAt"] = o.StartAt
	toSerialize["endAt"] = o.EndAt
	return toSerialize
}

type GetClosedOrdersReqBuilder struct {
	obj *GetClosedOrdersReq
}

func NewGetClosedOrdersReqBuilder() *GetClosedOrdersReqBuilder {
	return &GetClosedOrdersReqBuilder{obj: NewGetClosedOrdersReqWithDefaults()}
}

// symbol
func (builder *GetClosedOrdersReqBuilder) SetSymbol(value string) *GetClosedOrdersReqBuilder {
	builder.obj.Symbol = &value
	return builder
}

// Transaction type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
func (builder *GetClosedOrdersReqBuilder) SetTradeType(value string) *GetClosedOrdersReqBuilder {
	builder.obj.TradeType = &value
	return builder
}

// Specify if the order is to 'buy' or 'sell'.
func (builder *GetClosedOrdersReqBuilder) SetSide(value string) *GetClosedOrdersReqBuilder {
	builder.obj.Side = &value
	return builder
}

// Specify if the order is a 'limit' order or 'market' order.
func (builder *GetClosedOrdersReqBuilder) SetType(value string) *GetClosedOrdersReqBuilder {
	builder.obj.Type = &value
	return builder
}

// The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
func (builder *GetClosedOrdersReqBuilder) SetLastId(value int64) *GetClosedOrdersReqBuilder {
	builder.obj.LastId = &value
	return builder
}

// Default20, Max100
func (builder *GetClosedOrdersReqBuilder) SetLimit(value int32) *GetClosedOrdersReqBuilder {
	builder.obj.Limit = &value
	return builder
}

// Start time (milliseconds)
func (builder *GetClosedOrdersReqBuilder) SetStartAt(value int64) *GetClosedOrdersReqBuilder {
	builder.obj.StartAt = &value
	return builder
}

// End time (milliseconds)
func (builder *GetClosedOrdersReqBuilder) SetEndAt(value int64) *GetClosedOrdersReqBuilder {
	builder.obj.EndAt = &value
	return builder
}

func (builder *GetClosedOrdersReqBuilder) Build() *GetClosedOrdersReq {
	return builder.obj
}
