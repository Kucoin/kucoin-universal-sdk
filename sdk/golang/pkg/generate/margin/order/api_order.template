# API FUNCTION TEMPLATE


func TestOrderAddOrderReq(t *testing.T) {
    // AddOrder
    // Add Order
    // /api/v3/hf/margin/order

    builder := order.NewAddOrderReqBuilder()
    builder.SetClientOid(?).SetSide(?).SetSymbol(?).SetType(?).SetStp(?).SetPrice(?).SetSize(?).SetTimeInForce(?).SetPostOnly(?).SetHidden(?).SetIceberg(?).SetVisibleSize(?).SetCancelAfter(?).SetFunds(?).SetIsIsolated(?).SetAutoBorrow(?).SetAutoRepay(?)
    req := builder.Build()

    resp, err := orderApi.AddOrder(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderAddOrderTestReq(t *testing.T) {
    // AddOrderTest
    // Add Order Test
    // /api/v3/hf/margin/order/test

    builder := order.NewAddOrderTestReqBuilder()
    builder.SetClientOid(?).SetSide(?).SetSymbol(?).SetType(?).SetStp(?).SetPrice(?).SetSize(?).SetTimeInForce(?).SetPostOnly(?).SetHidden(?).SetIceberg(?).SetVisibleSize(?).SetCancelAfter(?).SetFunds(?).SetIsIsolated(?).SetAutoBorrow(?).SetAutoRepay(?)
    req := builder.Build()

    resp, err := orderApi.AddOrderTest(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderCancelOrderByOrderIdReq(t *testing.T) {
    // CancelOrderByOrderId
    // Cancel Order By OrderId
    // /api/v3/hf/margin/orders/{orderId}

    builder := order.NewCancelOrderByOrderIdReqBuilder()
    builder.SetOrderId(?).SetSymbol(?)
    req := builder.Build()

    resp, err := orderApi.CancelOrderByOrderId(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderCancelOrderByClientOidReq(t *testing.T) {
    // CancelOrderByClientOid
    // Cancel Order By ClientOid
    // /api/v3/hf/margin/orders/client-order/{clientOid}

    builder := order.NewCancelOrderByClientOidReqBuilder()
    builder.SetClientOid(?).SetSymbol(?)
    req := builder.Build()

    resp, err := orderApi.CancelOrderByClientOid(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderCancelAllOrdersBySymbolReq(t *testing.T) {
    // CancelAllOrdersBySymbol
    // Cancel All Orders By Symbol
    // /api/v3/hf/margin/orders

    builder := order.NewCancelAllOrdersBySymbolReqBuilder()
    builder.SetSymbol(?).SetTradeType(?)
    req := builder.Build()

    resp, err := orderApi.CancelAllOrdersBySymbol(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderGetSymbolsWithOpenOrderReq(t *testing.T) {
    // GetSymbolsWithOpenOrder
    // Get Symbols With Open Order
    // /api/v3/hf/margin/order/active/symbols

    builder := order.NewGetSymbolsWithOpenOrderReqBuilder()
    builder.SetTradeType(?)
    req := builder.Build()

    resp, err := orderApi.GetSymbolsWithOpenOrder(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderGetOpenOrdersReq(t *testing.T) {
    // GetOpenOrders
    // Get Open Orders
    // /api/v3/hf/margin/orders/active

    builder := order.NewGetOpenOrdersReqBuilder()
    builder.SetSymbol(?).SetTradeType(?)
    req := builder.Build()

    resp, err := orderApi.GetOpenOrders(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderGetClosedOrdersReq(t *testing.T) {
    // GetClosedOrders
    // Get Closed Orders
    // /api/v3/hf/margin/orders/done

    builder := order.NewGetClosedOrdersReqBuilder()
    builder.SetSymbol(?).SetTradeType(?).SetSide(?).SetType(?).SetLastId(?).SetLimit(?).SetStartAt(?).SetEndAt(?)
    req := builder.Build()

    resp, err := orderApi.GetClosedOrders(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderGetTradeHistoryReq(t *testing.T) {
    // GetTradeHistory
    // Get Trade History
    // /api/v3/hf/margin/fills

    builder := order.NewGetTradeHistoryReqBuilder()
    builder.SetSymbol(?).SetTradeType(?).SetOrderId(?).SetSide(?).SetType(?).SetLastId(?).SetLimit(?).SetStartAt(?).SetEndAt(?)
    req := builder.Build()

    resp, err := orderApi.GetTradeHistory(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderGetOrderByOrderIdReq(t *testing.T) {
    // GetOrderByOrderId
    // Get Order By OrderId
    // /api/v3/hf/margin/orders/{orderId}

    builder := order.NewGetOrderByOrderIdReqBuilder()
    builder.SetOrderId(?).SetSymbol(?)
    req := builder.Build()

    resp, err := orderApi.GetOrderByOrderId(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderGetOrderByClientOidReq(t *testing.T) {
    // GetOrderByClientOid
    // Get Order By ClientOid
    // /api/v3/hf/margin/orders/client-order/{clientOid}

    builder := order.NewGetOrderByClientOidReqBuilder()
    builder.SetClientOid(?).SetSymbol(?)
    req := builder.Build()

    resp, err := orderApi.GetOrderByClientOid(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderAddOrderV1Req(t *testing.T) {
    // AddOrderV1
    // Add Order - V1
    // /api/v1/margin/order

    builder := order.NewAddOrderV1ReqBuilder()
    builder.SetClientOid(?).SetSide(?).SetSymbol(?).SetType(?).SetStp(?).SetPrice(?).SetSize(?).SetTimeInForce(?).SetPostOnly(?).SetHidden(?).SetIceberg(?).SetVisibleSize(?).SetCancelAfter(?).SetFunds(?).SetAutoBorrow(?).SetAutoRepay(?).SetMarginModel(?)
    req := builder.Build()

    resp, err := orderApi.AddOrderV1(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestOrderAddOrderTestV1Req(t *testing.T) {
    // AddOrderTestV1
    // Add Order Test - V1
    // /api/v1/margin/order/test

    builder := order.NewAddOrderTestV1ReqBuilder()
    builder.SetClientOid(?).SetSide(?).SetSymbol(?).SetType(?).SetStp(?).SetPrice(?).SetSize(?).SetTimeInForce(?).SetPostOnly(?).SetHidden(?).SetIceberg(?).SetVisibleSize(?).SetCancelAfter(?).SetFunds(?).SetAutoBorrow(?).SetAutoRepay(?).SetMarginModel(?)
    req := builder.Build()

    resp, err := orderApi.AddOrderTestV1(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}

