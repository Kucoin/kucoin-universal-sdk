// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package order

// AddOrderV1Req struct for AddOrderV1Req
type AddOrderV1Req struct {
	// Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
	ClientOid string `json:"clientOid,omitempty"`
	// Specify if the order is to 'buy' or 'sell'.
	Side string `json:"side,omitempty"`
	// symbol
	Symbol string `json:"symbol,omitempty"`
	// Specify if the order is a 'limit' order or 'market' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
	Type *string `json:"type,omitempty"`
	// [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
	Stp *string `json:"stp,omitempty"`
	// Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
	Price *string `json:"price,omitempty"`
	// Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
	Size *string `json:"size,omitempty"`
	// [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
	TimeInForce *string `json:"timeInForce,omitempty"`
	// passive order labels, this is disabled when the order timing strategy is IOC or FOK
	PostOnly *bool `json:"postOnly,omitempty"`
	// Hidden or not (not shown in order book)
	Hidden *bool `json:"hidden,omitempty"`
	// Whether or not only visible portions of orders are shown in iceberg orders
	Iceberg *bool `json:"iceberg,omitempty"`
	// Maximum visible quantity in iceberg orders
	VisibleSize *string `json:"visibleSize,omitempty"`
	// Cancel after n seconds, the order timing strategy is GTT
	CancelAfter *int64 `json:"cancelAfter,omitempty"`
	// When **type** is market, select one out of two: size or funds
	Funds *string `json:"funds,omitempty"`
	// When Margin Account has inefficient balance, our system autoborrows inefficient assets and opens positions according to the lowest market interest rate.
	AutoBorrow *bool `json:"autoBorrow,omitempty"`
	// AutoPay allows the return of borrowed assets when you close a position. Our system automatically triggers the repayment and the maximum repayment amount equals to the filled-order amount.
	AutoRepay *bool `json:"autoRepay,omitempty"`
	// The type of trading, including cross (cross mode) and isolated (isolated mode). It is set at cross by default.
	MarginModel *string `json:"marginModel,omitempty"`
}

// NewAddOrderV1Req instantiates a new AddOrderV1Req object
// This constructor will assign default values to properties that have it defined
func NewAddOrderV1Req(clientOid string, side string, symbol string) *AddOrderV1Req {
	this := AddOrderV1Req{}
	this.ClientOid = clientOid
	this.Side = side
	this.Symbol = symbol
	var Type_ string = "limit"
	this.Type = &Type_
	var timeInForce string = "GTC"
	this.TimeInForce = &timeInForce
	var postOnly bool = false
	this.PostOnly = &postOnly
	var hidden bool = false
	this.Hidden = &hidden
	var iceberg bool = false
	this.Iceberg = &iceberg
	var autoBorrow bool = false
	this.AutoBorrow = &autoBorrow
	var autoRepay bool = false
	this.AutoRepay = &autoRepay
	var marginModel string = "cross"
	this.MarginModel = &marginModel
	return &this
}

// NewAddOrderV1ReqWithDefaults instantiates a new AddOrderV1Req object
// This constructor will only assign default values to properties that have it defined,
func NewAddOrderV1ReqWithDefaults() *AddOrderV1Req {
	this := AddOrderV1Req{}
	var Type_ string = "limit"
	this.Type = &Type_
	var timeInForce string = "GTC"
	this.TimeInForce = &timeInForce
	var postOnly bool = false
	this.PostOnly = &postOnly
	var hidden bool = false
	this.Hidden = &hidden
	var iceberg bool = false
	this.Iceberg = &iceberg
	var autoBorrow bool = false
	this.AutoBorrow = &autoBorrow
	var autoRepay bool = false
	this.AutoRepay = &autoRepay
	var marginModel string = "cross"
	this.MarginModel = &marginModel
	return &this
}

func (o *AddOrderV1Req) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["side"] = o.Side
	toSerialize["symbol"] = o.Symbol
	toSerialize["type"] = o.Type
	toSerialize["stp"] = o.Stp
	toSerialize["price"] = o.Price
	toSerialize["size"] = o.Size
	toSerialize["timeInForce"] = o.TimeInForce
	toSerialize["postOnly"] = o.PostOnly
	toSerialize["hidden"] = o.Hidden
	toSerialize["iceberg"] = o.Iceberg
	toSerialize["visibleSize"] = o.VisibleSize
	toSerialize["cancelAfter"] = o.CancelAfter
	toSerialize["funds"] = o.Funds
	toSerialize["autoBorrow"] = o.AutoBorrow
	toSerialize["autoRepay"] = o.AutoRepay
	toSerialize["marginModel"] = o.MarginModel
	return toSerialize
}

type AddOrderV1ReqBuilder struct {
	obj *AddOrderV1Req
}

func NewAddOrderV1ReqBuilder() *AddOrderV1ReqBuilder {
	return &AddOrderV1ReqBuilder{obj: NewAddOrderV1ReqWithDefaults()}
}

// Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
func (builder *AddOrderV1ReqBuilder) SetClientOid(value string) *AddOrderV1ReqBuilder {
	builder.obj.ClientOid = value
	return builder
}

// Specify if the order is to 'buy' or 'sell'.
func (builder *AddOrderV1ReqBuilder) SetSide(value string) *AddOrderV1ReqBuilder {
	builder.obj.Side = value
	return builder
}

// symbol
func (builder *AddOrderV1ReqBuilder) SetSymbol(value string) *AddOrderV1ReqBuilder {
	builder.obj.Symbol = value
	return builder
}

// Specify if the order is a 'limit' order or 'market' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
func (builder *AddOrderV1ReqBuilder) SetType(value string) *AddOrderV1ReqBuilder {
	builder.obj.Type = &value
	return builder
}

// [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
func (builder *AddOrderV1ReqBuilder) SetStp(value string) *AddOrderV1ReqBuilder {
	builder.obj.Stp = &value
	return builder
}

// Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
func (builder *AddOrderV1ReqBuilder) SetPrice(value string) *AddOrderV1ReqBuilder {
	builder.obj.Price = &value
	return builder
}

// Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
func (builder *AddOrderV1ReqBuilder) SetSize(value string) *AddOrderV1ReqBuilder {
	builder.obj.Size = &value
	return builder
}

// [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
func (builder *AddOrderV1ReqBuilder) SetTimeInForce(value string) *AddOrderV1ReqBuilder {
	builder.obj.TimeInForce = &value
	return builder
}

// passive order labels, this is disabled when the order timing strategy is IOC or FOK
func (builder *AddOrderV1ReqBuilder) SetPostOnly(value bool) *AddOrderV1ReqBuilder {
	builder.obj.PostOnly = &value
	return builder
}

// Hidden or not (not shown in order book)
func (builder *AddOrderV1ReqBuilder) SetHidden(value bool) *AddOrderV1ReqBuilder {
	builder.obj.Hidden = &value
	return builder
}

// Whether or not only visible portions of orders are shown in iceberg orders
func (builder *AddOrderV1ReqBuilder) SetIceberg(value bool) *AddOrderV1ReqBuilder {
	builder.obj.Iceberg = &value
	return builder
}

// Maximum visible quantity in iceberg orders
func (builder *AddOrderV1ReqBuilder) SetVisibleSize(value string) *AddOrderV1ReqBuilder {
	builder.obj.VisibleSize = &value
	return builder
}

// Cancel after n seconds, the order timing strategy is GTT
func (builder *AddOrderV1ReqBuilder) SetCancelAfter(value int64) *AddOrderV1ReqBuilder {
	builder.obj.CancelAfter = &value
	return builder
}

// When **type** is market, select one out of two: size or funds
func (builder *AddOrderV1ReqBuilder) SetFunds(value string) *AddOrderV1ReqBuilder {
	builder.obj.Funds = &value
	return builder
}

// When Margin Account has inefficient balance, our system autoborrows inefficient assets and opens positions according to the lowest market interest rate.
func (builder *AddOrderV1ReqBuilder) SetAutoBorrow(value bool) *AddOrderV1ReqBuilder {
	builder.obj.AutoBorrow = &value
	return builder
}

// AutoPay allows the return of borrowed assets when you close a position. Our system automatically triggers the repayment and the maximum repayment amount equals to the filled-order amount.
func (builder *AddOrderV1ReqBuilder) SetAutoRepay(value bool) *AddOrderV1ReqBuilder {
	builder.obj.AutoRepay = &value
	return builder
}

// The type of trading, including cross (cross mode) and isolated (isolated mode). It is set at cross by default.
func (builder *AddOrderV1ReqBuilder) SetMarginModel(value string) *AddOrderV1ReqBuilder {
	builder.obj.MarginModel = &value
	return builder
}

func (builder *AddOrderV1ReqBuilder) Build() *AddOrderV1Req {
	return builder.obj
}
