# API FUNCTION TEMPLATE


func TestDebitBorrowReq(t *testing.T) {
    // Borrow
    // Borrow
    // /api/v3/margin/borrow

    builder := debit.NewBorrowReqBuilder()
    builder.SetCurrency(?).SetSize(?).SetTimeInForce(?).SetSymbol(?).SetIsIsolated(?).SetIsHf(?)
    req := builder.Build()

    resp, err := debitApi.Borrow(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestDebitGetBorrowHistoryReq(t *testing.T) {
    // GetBorrowHistory
    // Get Borrow History
    // /api/v3/margin/borrow

    builder := debit.NewGetBorrowHistoryReqBuilder()
    builder.SetCurrency(?).SetIsIsolated(?).SetSymbol(?).SetOrderNo(?).SetStartTime(?).SetEndTime(?).SetCurrentPage(?).SetPageSize(?)
    req := builder.Build()

    resp, err := debitApi.GetBorrowHistory(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestDebitRepayReq(t *testing.T) {
    // Repay
    // Repay
    // /api/v3/margin/repay

    builder := debit.NewRepayReqBuilder()
    builder.SetCurrency(?).SetSize(?).SetSymbol(?).SetIsIsolated(?).SetIsHf(?)
    req := builder.Build()

    resp, err := debitApi.Repay(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestDebitGetRepayHistoryReq(t *testing.T) {
    // GetRepayHistory
    // Get Repay History
    // /api/v3/margin/repay

    builder := debit.NewGetRepayHistoryReqBuilder()
    builder.SetCurrency(?).SetIsIsolated(?).SetSymbol(?).SetOrderNo(?).SetStartTime(?).SetEndTime(?).SetCurrentPage(?).SetPageSize(?)
    req := builder.Build()

    resp, err := debitApi.GetRepayHistory(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestDebitGetInterestHistoryReq(t *testing.T) {
    // GetInterestHistory
    // Get Interest History.
    // /api/v3/margin/interest

    builder := debit.NewGetInterestHistoryReqBuilder()
    builder.SetCurrency(?).SetIsIsolated(?).SetSymbol(?).SetStartTime(?).SetEndTime(?).SetCurrentPage(?).SetPageSize(?)
    req := builder.Build()

    resp, err := debitApi.GetInterestHistory(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestDebitModifyLeverageReq(t *testing.T) {
    // ModifyLeverage
    // Modify Leverage
    // /api/v3/position/update-user-leverage

    builder := debit.NewModifyLeverageReqBuilder()
    builder.SetSymbol(?).SetIsIsolated(?).SetLeverage(?)
    req := builder.Build()

    resp, err := debitApi.ModifyLeverage(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}

