// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package marginpublic

import (
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/internal/interfaces"
)

type MarginPublicWS interface {

	// IndexPrice Index Price
	// Subscribe to this topic to get the index price for margin trading. The following ticker symbols are supported: List of currently supported symbols.
	// push frequency: once every 1s
	IndexPrice(symbol []string, callback IndexPriceEventCallback) (id string, err error)

	// MarkPrice Mark Price
	// Subscribe to this topic to get the mark price for margin trading. The following ticker symbols are supported: List of currently supported symbols
	// push frequency: once every 1s
	MarkPrice(symbol []string, callback MarkPriceEventCallback) (id string, err error)

	// Unsubscribe from topics
	UnSubscribe(id string) error

	// Start websocket
	Start() error

	// Stop websocket
	Stop() error
}

type MarginPublicWSImpl struct {
	wsService interfaces.WebSocketService
}

func NewMarginPublicWSImp(wsService interfaces.WebSocketService) *MarginPublicWSImpl {
	return &MarginPublicWSImpl{wsService: wsService}
}

func (impl *MarginPublicWSImpl) IndexPrice(symbol []string, callback IndexPriceEventCallback) (string, error) {
	topicPrefix := "/indicator/index"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &IndexPriceEventCallbackWrapper{callback: callback})
}

func (impl *MarginPublicWSImpl) MarkPrice(symbol []string, callback MarkPriceEventCallback) (string, error) {
	topicPrefix := "/indicator/markPrice"

	args := symbol

	return impl.wsService.Subscribe(topicPrefix, args, &MarkPriceEventCallbackWrapper{callback: callback})
}

func (impl *MarginPublicWSImpl) UnSubscribe(id string) error {
	return impl.wsService.Unsubscribe(id)
}

func (impl *MarginPublicWSImpl) Start() error {
	return impl.wsService.Start()
}

func (impl *MarginPublicWSImpl) Stop() error {
	return impl.wsService.Stop()
}
