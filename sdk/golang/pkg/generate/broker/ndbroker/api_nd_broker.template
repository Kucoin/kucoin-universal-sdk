# API FUNCTION TEMPLATE


func TestNDBrokerSubmitKYCReq(t *testing.T) {
    // SubmitKYC
    // Submit KYC
    // /api/kyc/ndBroker/proxyClient/submit

    builder := ndbroker.NewSubmitKYCReqBuilder()
    builder.SetClientUid(?).SetFirstName(?).SetLastName(?).SetIssueCountry(?).SetBirthDate(?).SetIdentityType(?).SetIdentityNumber(?).SetExpireDate(?).SetFrontPhoto(?).SetBackendPhoto(?).SetFacePhoto(?)
    req := builder.Build()

    resp, err := ndbrokerApi.SubmitKYC(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetKYCStatusReq(t *testing.T) {
    // GetKYCStatus
    // Get KYC Status
    // /api/kyc/ndBroker/proxyClient/status/list

    builder := ndbroker.NewGetKYCStatusReqBuilder()
    builder.SetClientUids(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetKYCStatus(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetKYCStatusListReq(t *testing.T) {
    // GetKYCStatusList
    // Get KYC Status List
    // /api/kyc/ndBroker/proxyClient/status/page

    builder := ndbroker.NewGetKYCStatusListReqBuilder()
    builder.SetPageNumber(?).SetPageSize(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetKYCStatusList(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetBrokerInfoReq(t *testing.T) {
    // GetBrokerInfo
    // Get Broker Info
    // /api/v1/broker/nd/info

    builder := ndbroker.NewGetBrokerInfoReqBuilder()
    builder.SetBegin(?).SetEnd(?).SetTradeType(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetBrokerInfo(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerAddSubAccountReq(t *testing.T) {
    // AddSubAccount
    // Add sub-account
    // /api/v1/broker/nd/account

    builder := ndbroker.NewAddSubAccountReqBuilder()
    builder.SetAccountName(?)
    req := builder.Build()

    resp, err := ndbrokerApi.AddSubAccount(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetSubAccountReq(t *testing.T) {
    // GetSubAccount
    // Get sub-account
    // /api/v1/broker/nd/account

    builder := ndbroker.NewGetSubAccountReqBuilder()
    builder.SetUid(?).SetCurrentPage(?).SetPageSize(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetSubAccount(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerAddSubAccountApiReq(t *testing.T) {
    // AddSubAccountApi
    // Add sub-account API
    // /api/v1/broker/nd/account/apikey

    builder := ndbroker.NewAddSubAccountApiReqBuilder()
    builder.SetUid(?).SetPassphrase(?).SetIpWhitelist(?).SetPermissions(?).SetLabel(?)
    req := builder.Build()

    resp, err := ndbrokerApi.AddSubAccountApi(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetSubAccountAPIReq(t *testing.T) {
    // GetSubAccountAPI
    // Get sub-account API
    // /api/v1/broker/nd/account/apikey

    builder := ndbroker.NewGetSubAccountAPIReqBuilder()
    builder.SetUid(?).SetApiKey(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetSubAccountAPI(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerModifySubAccountApiReq(t *testing.T) {
    // ModifySubAccountApi
    // Modify sub-account API
    // /api/v1/broker/nd/account/update-apikey

    builder := ndbroker.NewModifySubAccountApiReqBuilder()
    builder.SetUid(?).SetIpWhitelist(?).SetPermissions(?).SetLabel(?).SetApiKey(?)
    req := builder.Build()

    resp, err := ndbrokerApi.ModifySubAccountApi(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerDeleteSubAccountAPIReq(t *testing.T) {
    // DeleteSubAccountAPI
    // Delete sub-account API
    // /api/v1/broker/nd/account/apikey

    builder := ndbroker.NewDeleteSubAccountAPIReqBuilder()
    builder.SetUid(?).SetApiKey(?)
    req := builder.Build()

    resp, err := ndbrokerApi.DeleteSubAccountAPI(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerTransferReq(t *testing.T) {
    // Transfer
    // Transfer
    // /api/v1/broker/nd/transfer

    builder := ndbroker.NewTransferReqBuilder()
    builder.SetCurrency(?).SetAmount(?).SetDirection(?).SetAccountType(?).SetSpecialUid(?).SetSpecialAccountType(?).SetClientOid(?)
    req := builder.Build()

    resp, err := ndbrokerApi.Transfer(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetTransferHistoryReq(t *testing.T) {
    // GetTransferHistory
    // Get Transfer History
    // /api/v3/broker/nd/transfer/detail

    builder := ndbroker.NewGetTransferHistoryReqBuilder()
    builder.SetOrderId(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetTransferHistory(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetDepositListReq(t *testing.T) {
    // GetDepositList
    // Get Deposit List
    // /api/v1/asset/ndbroker/deposit/list

    builder := ndbroker.NewGetDepositListReqBuilder()
    builder.SetCurrency(?).SetStatus(?).SetHash(?).SetStartTimestamp(?).SetEndTimestamp(?).SetLimit(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetDepositList(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetDepositDetailReq(t *testing.T) {
    // GetDepositDetail
    // Get Deposit Detail
    // /api/v3/broker/nd/deposit/detail

    builder := ndbroker.NewGetDepositDetailReqBuilder()
    builder.SetCurrency(?).SetHash(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetDepositDetail(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetWithdrawDetailReq(t *testing.T) {
    // GetWithdrawDetail
    // Get Withdraw Detail
    // /api/v3/broker/nd/withdraw/detail

    builder := ndbroker.NewGetWithdrawDetailReqBuilder()
    builder.SetWithdrawalId(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetWithdrawDetail(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}


func TestNDBrokerGetRebaseReq(t *testing.T) {
    // GetRebase
    // Get Broker Rebate
    // /api/v1/broker/nd/rebase/download

    builder := ndbroker.NewGetRebaseReqBuilder()
    builder.SetBegin(?).SetEnd(?).SetTradeType(?)
    req := builder.Build()

    resp, err := ndbrokerApi.GetRebase(req, context.TODO())
    if err != nil {
        panic(err)
    }
    data, err := json.Marshal(resp.ToMap())
    if err != nil {
        panic(err)
    }
    fmt.Println("code:", resp.CommonResponse.Code)
    fmt.Println("message:", resp.CommonResponse.Message)
    fmt.Println("data:", string(data))
}

