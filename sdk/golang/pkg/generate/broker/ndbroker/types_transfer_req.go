// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package ndbroker

// TransferReq struct for TransferReq
type TransferReq struct {
	// Currency
	Currency string `json:"currency,omitempty"`
	// Transfer Amount (must be a positive integer in the currency's precision)
	Amount string `json:"amount,omitempty"`
	// Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
	Direction string `json:"direction,omitempty"`
	// Broker account types: MAIN (Funding account), TRADE (Spot trading account)
	AccountType string `json:"accountType,omitempty"`
	// Broker sub-account uid, must be the Broker sub-account created by the current Broker user.
	SpecialUid string `json:"specialUid,omitempty"`
	// Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
	SpecialAccountType string `json:"specialAccountType,omitempty"`
	// Client Order ID, The unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
	ClientOid string `json:"clientOid,omitempty"`
}

// NewTransferReq instantiates a new TransferReq object
// This constructor will assign default values to properties that have it defined
func NewTransferReq(currency string, amount string, direction string, accountType string, specialUid string, specialAccountType string, clientOid string) *TransferReq {
	this := TransferReq{}
	this.Currency = currency
	this.Amount = amount
	this.Direction = direction
	this.AccountType = accountType
	this.SpecialUid = specialUid
	this.SpecialAccountType = specialAccountType
	this.ClientOid = clientOid
	return &this
}

// NewTransferReqWithDefaults instantiates a new TransferReq object
// This constructor will only assign default values to properties that have it defined,
func NewTransferReqWithDefaults() *TransferReq {
	this := TransferReq{}
	return &this
}

func (o *TransferReq) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["amount"] = o.Amount
	toSerialize["direction"] = o.Direction
	toSerialize["accountType"] = o.AccountType
	toSerialize["specialUid"] = o.SpecialUid
	toSerialize["specialAccountType"] = o.SpecialAccountType
	toSerialize["clientOid"] = o.ClientOid
	return toSerialize
}

type TransferReqBuilder struct {
	obj *TransferReq
}

func NewTransferReqBuilder() *TransferReqBuilder {
	return &TransferReqBuilder{obj: NewTransferReqWithDefaults()}
}

// Currency
func (builder *TransferReqBuilder) SetCurrency(value string) *TransferReqBuilder {
	builder.obj.Currency = value
	return builder
}

// Transfer Amount (must be a positive integer in the currency's precision)
func (builder *TransferReqBuilder) SetAmount(value string) *TransferReqBuilder {
	builder.obj.Amount = value
	return builder
}

// Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
func (builder *TransferReqBuilder) SetDirection(value string) *TransferReqBuilder {
	builder.obj.Direction = value
	return builder
}

// Broker account types: MAIN (Funding account), TRADE (Spot trading account)
func (builder *TransferReqBuilder) SetAccountType(value string) *TransferReqBuilder {
	builder.obj.AccountType = value
	return builder
}

// Broker sub-account uid, must be the Broker sub-account created by the current Broker user.
func (builder *TransferReqBuilder) SetSpecialUid(value string) *TransferReqBuilder {
	builder.obj.SpecialUid = value
	return builder
}

// Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
func (builder *TransferReqBuilder) SetSpecialAccountType(value string) *TransferReqBuilder {
	builder.obj.SpecialAccountType = value
	return builder
}

// Client Order ID, The unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
func (builder *TransferReqBuilder) SetClientOid(value string) *TransferReqBuilder {
	builder.obj.ClientOid = value
	return builder
}

func (builder *TransferReqBuilder) Build() *TransferReq {
	return builder.obj
}
