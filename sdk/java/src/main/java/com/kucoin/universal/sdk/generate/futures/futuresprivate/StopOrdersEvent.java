// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.futuresprivate;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class StopOrdersEvent implements Response<StopOrdersEvent, WsMessage<StopOrdersEvent>> {
  /** */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** Margin Mode */
  @JsonProperty("marginMode")
  private MarginModeEnum marginMode;

  /** The unique order id generated by the trading system */
  @JsonProperty("orderId")
  private String orderId;

  /** Order Price */
  @JsonProperty("orderPrice")
  private String orderPrice;

  /** User-specified order type */
  @JsonProperty("orderType")
  private OrderTypeEnum orderType;

  /** buy or sell */
  @JsonProperty("side")
  private SideEnum side;

  /** User-specified order size */
  @JsonProperty("size")
  private Integer size;

  /** Either 'down' or 'up' */
  @JsonProperty("stop")
  private StopEnum stop;

  /** Stop Price */
  @JsonProperty("stopPrice")
  private String stopPrice;

  /** */
  @JsonProperty("stopPriceType")
  private String stopPriceType;

  /**
   * Symbol of the contract. Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-221752070)
   */
  @JsonProperty("symbol")
  private String symbol;

  /** */
  @JsonProperty("ts")
  private Long ts;

  /** Order Type */
  @JsonProperty("type")
  private TypeEnum type;

  /** common response */
  @JsonIgnore private WsMessage<StopOrdersEvent> commonResponse;

  @Override
  public void setCommonResponse(WsMessage<StopOrdersEvent> response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, StopOrdersEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback<StopOrdersEvent> of(Callback callback) {
      return msg -> callback.onEvent(msg.getTopic(), msg.getSubject(), msg.getData());
    }
  }

  public enum MarginModeEnum {
    /** Isolated Margin */
    ISOLATED("ISOLATED"),
    /** Cross Margin */
    CROSS("CROSS");

    private final String value;

    MarginModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MarginModeEnum fromValue(String value) {
      for (MarginModeEnum b : MarginModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum OrderTypeEnum {
    /** Stop order */
    STOP("stop");

    private final String value;

    OrderTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderTypeEnum fromValue(String value) {
      for (OrderTypeEnum b : OrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SideEnum {
    /** buy */
    BUY("buy"),
    /** sell */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopEnum {
    /** Triggers when the price reaches or goes below the stopPrice */
    DOWN("down"),
    /** Triggers when the price reaches or goes above the stopPrice. */
    UP("up");

    private final String value;

    StopEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopEnum fromValue(String value) {
      for (StopEnum b : StopEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** the order is in the order book (maker order) */
    OPEN("open"),
    /** when the stop order has been triggered */
    TRIGGERED("triggered"),
    /** when the order has been canceled */
    CANCEL("cancel");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
