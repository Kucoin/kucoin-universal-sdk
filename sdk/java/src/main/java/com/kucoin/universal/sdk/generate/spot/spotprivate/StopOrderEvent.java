// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.spotprivate;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class StopOrderEvent implements Response<StopOrderEvent, WsMessage> {
  /** Order created time (milliseconds) */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** The unique order id generated by the trading system */
  @JsonProperty("orderId")
  private String orderId;

  /** Price */
  @JsonProperty("orderPrice")
  private String orderPrice;

  /** User-specified order type */
  @JsonProperty("orderType")
  private OrderTypeEnum orderType;

  /** buy or sell */
  @JsonProperty("side")
  private SideEnum side;

  /** User-specified order size */
  @JsonProperty("size")
  private String size;

  /** Order type */
  @JsonProperty("stop")
  private StopEnum stop;

  /** Stop Price */
  @JsonProperty("stopPrice")
  private String stopPrice;

  /** symbol */
  @JsonProperty("symbol")
  private String symbol;

  /**
   * The type of trading: TRADE (Spot), MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated
   * Margin).
   */
  @JsonProperty("tradeType")
  private TradeTypeEnum tradeType;

  /** Push time (nanoseconds) */
  @JsonProperty("ts")
  private Long ts;

  /** Order Type */
  @JsonProperty("type")
  private TypeEnum type;

  /** common response */
  @JsonIgnore private WsMessage commonResponse;

  @Override
  public void setCommonResponse(WsMessage response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, StopOrderEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback<StopOrderEvent> of(Callback callback) {
      return (msg, objectMapper) ->
          callback.onEvent(
              msg.getTopic(),
              msg.getSubject(),
              objectMapper.convertValue(msg.getData(), StopOrderEvent.class));
    }
  }

  public enum OrderTypeEnum {
    /** stop */
    STOP("stop");

    private final String value;

    OrderTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderTypeEnum fromValue(String value) {
      for (OrderTypeEnum b : OrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SideEnum {
    /** buy */
    BUY("buy"),
    /** sell */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopEnum {
    /** stop loss order */
    LOSS("loss"),
    /** Take profit order */
    ENTRY("entry"),
    /** Limit stop loss OCO order */
    LLO("l_l_o"),
    /** Trigger stop loss OCO order */
    LSO("l_s_o"),
    /** Limit stop profit OCO order */
    ELO("e_l_o"),
    /** Trigger stop profit OCO order */
    ESO("e_s_o"),
    /** Moving stop loss order */
    TSO("tso");

    private final String value;

    StopEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopEnum fromValue(String value) {
      for (StopEnum b : StopEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TradeTypeEnum {
    /** Spot */
    TRADE("TRADE"),
    /** Spot margin trade */
    MARGIN_TRADE("MARGIN_TRADE"),
    /** Spot margin isolated trade */
    MARGIN_ISOLATED_TRADE("MARGIN_ISOLATED_TRADE");

    private final String value;

    TradeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TradeTypeEnum fromValue(String value) {
      for (TradeTypeEnum b : TradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** The order is in the order book (maker order) */
    OPEN("open"),
    /**
     * The message sent when the order is matched, 1. When the status is open and the type is match,
     * it is a maker match. 2. When the status is match and the type is match, it is a taker match.
     */
    MATCH("match"),
    /**
     * The message sent due to the order being modified: STP triggering, partial cancellation of the
     * order. Includes these three scenarios: 1. When the status is open and the type is update:
     * partial amounts of the order have been canceled, or STP triggers 2. When the status is match
     * and the type is update: STP triggers 3. When the status is done and the type is update:
     * partial amounts of the order have been filled and the unfilled part got canceled, or STP is
     * triggered.
     */
    UPDATE("update"),
    /** The message sent when the status of the order changes to DONE after the transaction */
    FILLED("filled"),
    /** The message sent when the status of the order changes to DONE due to being canceled */
    CANCEL("cancel"),
    /**
     * The message sent when the order enters the matching system. When the order has just entered
     * the matching system and has not yet done matching logic with the counterparty, a private
     * message with the message type &quot;received&quot; and the order status &quot;new&quot; will
     * be pushed.
     */
    RECEIVED("received");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
