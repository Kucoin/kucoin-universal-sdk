package com.kucoin.universal.sdk.generate.earn.earn;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class EarnApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /** purchase Request Purchase /api/v1/earn/orders */
  public static void testPurchaseRequest() throws Exception {
    String data = "{\"productId\": \"2611\", \"amount\": \"1\", \"accountType\": \"TRADE\"}";
    PurchaseReq obj = mapper.readValue(data, PurchaseReq.class);
  }

  /** purchase Response Purchase /api/v1/earn/orders */
  public static void testPurchaseResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderId\": \"2767291\",\n"
            + "        \"orderTxId\": \"6603694\"\n"
            + "    }\n"
            + "}";
    RestResponse<PurchaseResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<PurchaseResp>>() {});
  }

  /** getRedeemPreview Request Get Redeem Preview /api/v1/earn/redeem-preview */
  public static void testGetRedeemPreviewRequest() throws Exception {
    String data = "{\"orderId\": \"2767291\", \"fromAccountType\": \"MAIN\"}";
    GetRedeemPreviewReq obj = mapper.readValue(data, GetRedeemPreviewReq.class);
  }

  /** getRedeemPreview Response Get Redeem Preview /api/v1/earn/redeem-preview */
  public static void testGetRedeemPreviewResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currency\": \"KCS\",\n"
            + "        \"redeemAmount\": \"1\",\n"
            + "        \"penaltyInterestAmount\": \"0\",\n"
            + "        \"redeemPeriod\": 3,\n"
            + "        \"deliverTime\": 1729518951000,\n"
            + "        \"manualRedeemable\": true,\n"
            + "        \"redeemAll\": false\n"
            + "    }\n"
            + "}";
    RestResponse<GetRedeemPreviewResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetRedeemPreviewResp>>() {});
  }

  /** redeem Request Redeem /api/v1/earn/orders */
  public static void testRedeemRequest() throws Exception {
    String data =
        "{\"orderId\": \"2767291\", \"amount\": \"example_string_default_value\","
            + " \"fromAccountType\": \"MAIN\", \"confirmPunishRedeem\": \"1\"}";
    RedeemReq obj = mapper.readValue(data, RedeemReq.class);
  }

  /** redeem Response Redeem /api/v1/earn/orders */
  public static void testRedeemResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderTxId\": \"6603700\",\n"
            + "        \"deliverTime\": 1729517805000,\n"
            + "        \"status\": \"PENDING\",\n"
            + "        \"amount\": \"1\"\n"
            + "    }\n"
            + "}";
    RestResponse<RedeemResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<RedeemResp>>() {});
  }

  /** getSavingsProducts Request Get Savings Products /api/v1/earn/saving/products */
  public static void testGetSavingsProductsRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetSavingsProductsReq obj = mapper.readValue(data, GetSavingsProductsReq.class);
  }

  /** getSavingsProducts Response Get Savings Products /api/v1/earn/saving/products */
  public static void testGetSavingsProductsResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"2172\",\n"
            + "            \"currency\": \"BTC\",\n"
            + "            \"category\": \"DEMAND\",\n"
            + "            \"type\": \"DEMAND\",\n"
            + "            \"precision\": 8,\n"
            + "            \"productUpperLimit\": \"480\",\n"
            + "            \"productRemainAmount\": \"132.36153083\",\n"
            + "            \"userUpperLimit\": \"20\",\n"
            + "            \"userLowerLimit\": \"0.01\",\n"
            + "            \"redeemPeriod\": 0,\n"
            + "            \"lockStartTime\": 1644807600000,\n"
            + "            \"lockEndTime\": null,\n"
            + "            \"applyStartTime\": 1644807600000,\n"
            + "            \"applyEndTime\": null,\n"
            + "            \"returnRate\": \"0.00047208\",\n"
            + "            \"incomeCurrency\": \"BTC\",\n"
            + "            \"earlyRedeemSupported\": 0,\n"
            + "            \"status\": \"ONGOING\",\n"
            + "            \"redeemType\": \"MANUAL\",\n"
            + "            \"incomeReleaseType\": \"DAILY\",\n"
            + "            \"interestDate\": 1729267200000,\n"
            + "            \"duration\": 0,\n"
            + "            \"newUserOnly\": 0\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetSavingsProductsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSavingsProductsResp>>() {});
  }

  /** getPromotionProducts Request Get Promotion Products /api/v1/earn/promotion/products */
  public static void testGetPromotionProductsRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetPromotionProductsReq obj = mapper.readValue(data, GetPromotionProductsReq.class);
  }

  /** getPromotionProducts Response Get Promotion Products /api/v1/earn/promotion/products */
  public static void testGetPromotionProductsResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"2685\",\n"
            + "            \"currency\": \"BTC\",\n"
            + "            \"category\": \"ACTIVITY\",\n"
            + "            \"type\": \"TIME\",\n"
            + "            \"precision\": 8,\n"
            + "            \"productUpperLimit\": \"50\",\n"
            + "            \"userUpperLimit\": \"1\",\n"
            + "            \"userLowerLimit\": \"0.001\",\n"
            + "            \"redeemPeriod\": 0,\n"
            + "            \"lockStartTime\": 1702371601000,\n"
            + "            \"lockEndTime\": 1729858405000,\n"
            + "            \"applyStartTime\": 1702371600000,\n"
            + "            \"applyEndTime\": null,\n"
            + "            \"returnRate\": \"0.03\",\n"
            + "            \"incomeCurrency\": \"BTC\",\n"
            + "            \"earlyRedeemSupported\": 0,\n"
            + "            \"productRemainAmount\": \"49.78203998\",\n"
            + "            \"status\": \"ONGOING\",\n"
            + "            \"redeemType\": \"TRANS_DEMAND\",\n"
            + "            \"incomeReleaseType\": \"DAILY\",\n"
            + "            \"interestDate\": 1729253605000,\n"
            + "            \"duration\": 7,\n"
            + "            \"newUserOnly\": 1\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetPromotionProductsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetPromotionProductsResp>>() {});
  }

  /** getStakingProducts Request Get Staking Products /api/v1/earn/staking/products */
  public static void testGetStakingProductsRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetStakingProductsReq obj = mapper.readValue(data, GetStakingProductsReq.class);
  }

  /** getStakingProducts Response Get Staking Products /api/v1/earn/staking/products */
  public static void testGetStakingProductsResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"2535\",\n"
            + "            \"currency\": \"STX\",\n"
            + "            \"category\": \"STAKING\",\n"
            + "            \"type\": \"DEMAND\",\n"
            + "            \"precision\": 8,\n"
            + "            \"productUpperLimit\": \"1000000\",\n"
            + "            \"userUpperLimit\": \"10000\",\n"
            + "            \"userLowerLimit\": \"1\",\n"
            + "            \"redeemPeriod\": 14,\n"
            + "            \"lockStartTime\": 1688614514000,\n"
            + "            \"lockEndTime\": null,\n"
            + "            \"applyStartTime\": 1688614512000,\n"
            + "            \"applyEndTime\": null,\n"
            + "            \"returnRate\": \"0.045\",\n"
            + "            \"incomeCurrency\": \"BTC\",\n"
            + "            \"earlyRedeemSupported\": 0,\n"
            + "            \"productRemainAmount\": \"254032.90178701\",\n"
            + "            \"status\": \"ONGOING\",\n"
            + "            \"redeemType\": \"MANUAL\",\n"
            + "            \"incomeReleaseType\": \"DAILY\",\n"
            + "            \"interestDate\": 1729267200000,\n"
            + "            \"duration\": 0,\n"
            + "            \"newUserOnly\": 0\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetStakingProductsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetStakingProductsResp>>() {});
  }

  /** getKcsStakingProducts Request Get KCS Staking Products /api/v1/earn/kcs-staking/products */
  public static void testGetKcsStakingProductsRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetKcsStakingProductsReq obj = mapper.readValue(data, GetKcsStakingProductsReq.class);
  }

  /** getKcsStakingProducts Response Get KCS Staking Products /api/v1/earn/kcs-staking/products */
  public static void testGetKcsStakingProductsResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"2611\",\n"
            + "            \"currency\": \"KCS\",\n"
            + "            \"category\": \"KCS_STAKING\",\n"
            + "            \"type\": \"DEMAND\",\n"
            + "            \"precision\": 8,\n"
            + "            \"productUpperLimit\": \"100000000\",\n"
            + "            \"userUpperLimit\": \"100000000\",\n"
            + "            \"userLowerLimit\": \"1\",\n"
            + "            \"redeemPeriod\": 3,\n"
            + "            \"lockStartTime\": 1701252000000,\n"
            + "            \"lockEndTime\": null,\n"
            + "            \"applyStartTime\": 1701252000000,\n"
            + "            \"applyEndTime\": null,\n"
            + "            \"returnRate\": \"0.03471727\",\n"
            + "            \"incomeCurrency\": \"KCS\",\n"
            + "            \"earlyRedeemSupported\": 0,\n"
            + "            \"productRemainAmount\": \"58065850.54998251\",\n"
            + "            \"status\": \"ONGOING\",\n"
            + "            \"redeemType\": \"MANUAL\",\n"
            + "            \"incomeReleaseType\": \"DAILY\",\n"
            + "            \"interestDate\": 1729267200000,\n"
            + "            \"duration\": 0,\n"
            + "            \"newUserOnly\": 0\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetKcsStakingProductsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetKcsStakingProductsResp>>() {});
  }

  /** getETHStakingProducts Request Get ETH Staking Products /api/v1/earn/eth-staking/products */
  public static void testGetETHStakingProductsRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetETHStakingProductsReq obj = mapper.readValue(data, GetETHStakingProductsReq.class);
  }

  /** getETHStakingProducts Response Get ETH Staking Products /api/v1/earn/eth-staking/products */
  public static void testGetETHStakingProductsResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"ETH2\",\n"
            + "            \"category\": \"ETH2\",\n"
            + "            \"type\": \"DEMAND\",\n"
            + "            \"precision\": 8,\n"
            + "            \"currency\": \"ETH\",\n"
            + "            \"incomeCurrency\": \"ETH2\",\n"
            + "            \"returnRate\": \"0.028\",\n"
            + "            \"userLowerLimit\": \"0.01\",\n"
            + "            \"userUpperLimit\": \"8557.3597075\",\n"
            + "            \"productUpperLimit\": \"8557.3597075\",\n"
            + "            \"productRemainAmount\": \"8557.3597075\",\n"
            + "            \"redeemPeriod\": 5,\n"
            + "            \"redeemType\": \"MANUAL\",\n"
            + "            \"incomeReleaseType\": \"DAILY\",\n"
            + "            \"applyStartTime\": 1729255485000,\n"
            + "            \"applyEndTime\": null,\n"
            + "            \"lockStartTime\": 1729255485000,\n"
            + "            \"lockEndTime\": null,\n"
            + "            \"interestDate\": 1729267200000,\n"
            + "            \"newUserOnly\": 0,\n"
            + "            \"earlyRedeemSupported\": 0,\n"
            + "            \"duration\": 0,\n"
            + "            \"status\": \"ONGOING\"\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetETHStakingProductsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetETHStakingProductsResp>>() {});
  }

  /** getAccountHolding Request Get Account Holding /api/v1/earn/hold-assets */
  public static void testGetAccountHoldingRequest() throws Exception {
    String data =
        "{\"currency\": \"KCS\", \"productId\": \"example_string_default_value\","
            + " \"productCategory\": \"DEMAND\", \"currentPage\": 1, \"pageSize\": 10}";
    GetAccountHoldingReq obj = mapper.readValue(data, GetAccountHoldingReq.class);
  }

  /** getAccountHolding Response Get Account Holding /api/v1/earn/hold-assets */
  public static void testGetAccountHoldingResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"totalNum\": 1,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 15,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"orderId\": \"2767291\",\n"
            + "                \"productId\": \"2611\",\n"
            + "                \"productCategory\": \"KCS_STAKING\",\n"
            + "                \"productType\": \"DEMAND\",\n"
            + "                \"currency\": \"KCS\",\n"
            + "                \"incomeCurrency\": \"KCS\",\n"
            + "                \"returnRate\": \"0.03471727\",\n"
            + "                \"holdAmount\": \"1\",\n"
            + "                \"redeemedAmount\": \"0\",\n"
            + "                \"redeemingAmount\": \"1\",\n"
            + "                \"lockStartTime\": 1701252000000,\n"
            + "                \"lockEndTime\": null,\n"
            + "                \"purchaseTime\": 1729257513000,\n"
            + "                \"redeemPeriod\": 3,\n"
            + "                \"status\": \"REDEEMING\",\n"
            + "                \"earlyRedeemSupported\": 0\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetAccountHoldingResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetAccountHoldingResp>>() {});
  }

  public static void runAllTests() {
    run(EarnApiAutoGeneratedTest::testPurchaseRequest, "testPurchaseRequest");
    run(EarnApiAutoGeneratedTest::testPurchaseResponse, "testPurchaseResponse");
    run(EarnApiAutoGeneratedTest::testGetRedeemPreviewRequest, "testGetRedeemPreviewRequest");
    run(EarnApiAutoGeneratedTest::testGetRedeemPreviewResponse, "testGetRedeemPreviewResponse");
    run(EarnApiAutoGeneratedTest::testRedeemRequest, "testRedeemRequest");
    run(EarnApiAutoGeneratedTest::testRedeemResponse, "testRedeemResponse");
    run(EarnApiAutoGeneratedTest::testGetSavingsProductsRequest, "testGetSavingsProductsRequest");
    run(EarnApiAutoGeneratedTest::testGetSavingsProductsResponse, "testGetSavingsProductsResponse");
    run(
        EarnApiAutoGeneratedTest::testGetPromotionProductsRequest,
        "testGetPromotionProductsRequest");
    run(
        EarnApiAutoGeneratedTest::testGetPromotionProductsResponse,
        "testGetPromotionProductsResponse");
    run(EarnApiAutoGeneratedTest::testGetStakingProductsRequest, "testGetStakingProductsRequest");
    run(EarnApiAutoGeneratedTest::testGetStakingProductsResponse, "testGetStakingProductsResponse");
    run(
        EarnApiAutoGeneratedTest::testGetKcsStakingProductsRequest,
        "testGetKcsStakingProductsRequest");
    run(
        EarnApiAutoGeneratedTest::testGetKcsStakingProductsResponse,
        "testGetKcsStakingProductsResponse");
    run(
        EarnApiAutoGeneratedTest::testGetETHStakingProductsRequest,
        "testGetETHStakingProductsRequest");
    run(
        EarnApiAutoGeneratedTest::testGetETHStakingProductsResponse,
        "testGetETHStakingProductsResponse");
    run(EarnApiAutoGeneratedTest::testGetAccountHoldingRequest, "testGetAccountHoldingRequest");
    run(EarnApiAutoGeneratedTest::testGetAccountHoldingResponse, "testGetAccountHoldingResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
