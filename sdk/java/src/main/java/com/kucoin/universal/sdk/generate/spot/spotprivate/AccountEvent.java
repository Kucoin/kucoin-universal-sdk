// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.spotprivate;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class AccountEvent implements Response<AccountEvent, WsMessage> {
  /** Account ID */
  @JsonProperty("accountId")
  private String accountId;

  /** Funds available to withdraw or trade */
  @JsonProperty("available")
  private String available;

  /** The change of available Funds */
  @JsonProperty("availableChange")
  private String availableChange;

  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** Funds on hold (not available for use) */
  @JsonProperty("hold")
  private String hold;

  /** The change of hold funds */
  @JsonProperty("holdChange")
  private String holdChange;

  /** */
  @JsonProperty("relationContext")
  private AccountRelationContext relationContext;

  /** Relation event */
  @JsonProperty("relationEvent")
  private String relationEvent;

  /** Relation event Id */
  @JsonProperty("relationEventId")
  private String relationEventId;

  /** */
  @JsonProperty("time")
  private String time;

  /** Total balance = available + hold */
  @JsonProperty("total")
  private String total;

  /** common response */
  @JsonIgnore private WsMessage commonResponse;

  @Override
  public void setCommonResponse(WsMessage response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, AccountEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback<AccountEvent> of(Callback callback) {
      return (msg, objectMapper) ->
          callback.onEvent(
              msg.getTopic(),
              msg.getSubject(),
              objectMapper.convertValue(msg.getData(), AccountEvent.class));
    }
  }
}
