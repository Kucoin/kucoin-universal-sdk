// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.futuresprivate;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class BalanceEvent implements Response<BalanceEvent, WsMessage<BalanceEvent>> {
  /** Margin of the cross margin position */
  @JsonProperty("crossPosMargin")
  private String crossPosMargin;

  /** Margin of the isolated margin order */
  @JsonProperty("isolatedOrderMargin")
  private String isolatedOrderMargin;

  /** Frozen Balance */
  @JsonProperty("holdBalance")
  private String holdBalance;

  /** Equity */
  @JsonProperty("equity")
  private String equity;

  /**
   * Version. When holding a cross margin position, the available balance may change with
   * fluctuations in the mark price, leading to discrepancies in the available balance for the same
   * version number.
   */
  @JsonProperty("version")
  private String version;

  /** Available Balance */
  @JsonProperty("availableBalance")
  private String availableBalance;

  /** Margin of the isolated margin position, including isolated margin funding fees */
  @JsonProperty("isolatedPosMargin")
  private String isolatedPosMargin;

  /** Wallet Balance */
  @JsonProperty("walletBalance")
  private String walletBalance;

  /** Isolated margin funding fee */
  @JsonProperty("isolatedFundingFeeMargin")
  private String isolatedFundingFeeMargin;

  /** Unrealized PNL in cross margin mode */
  @JsonProperty("crossUnPnl")
  private String crossUnPnl;

  /** Total margin under cross margin mode */
  @JsonProperty("totalCrossMargin")
  private String totalCrossMargin;

  /** Currency Symbol */
  @JsonProperty("currency")
  private String currency;

  /** Unrealized PNL in isolated margin mode */
  @JsonProperty("isolatedUnPnl")
  private String isolatedUnPnl;

  /** Margin of the cross margin order */
  @JsonProperty("crossOrderMargin")
  private String crossOrderMargin;

  /** Last modified time */
  @JsonProperty("timestamp")
  private String timestamp;

  /** common response */
  @JsonIgnore private WsMessage<BalanceEvent> commonResponse;

  @Override
  public void setCommonResponse(WsMessage<BalanceEvent> response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, BalanceEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback<BalanceEvent> of(Callback callback) {
      return msg -> callback.onEvent(msg.getTopic(), msg.getSubject(), msg.getData());
    }
  }
}
