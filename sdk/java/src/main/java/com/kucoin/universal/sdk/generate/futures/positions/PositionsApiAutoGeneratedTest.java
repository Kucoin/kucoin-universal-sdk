package com.kucoin.universal.sdk.generate.futures.positions;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class PositionsApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** getMarginMode Request Get Margin Mode /api/v2/position/getMarginMode */
  public static void testGetMarginModeRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\"}";
    GetMarginModeReq obj = mapper.readValue(data, GetMarginModeReq.class);
  }

  /** getMarginMode Response Get Margin Mode /api/v2/position/getMarginMode */
  public static void testGetMarginModeResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "        \\\"marginMode\\\": \\\"ISOLATED\\\"\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetMarginModeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarginModeResp>>() {});
  }

  /** switchMarginMode Request Switch Margin Mode /api/v2/position/changeMarginMode */
  public static void testSwitchMarginModeRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"marginMode\\\": \\\"ISOLATED\\\"}";
    SwitchMarginModeReq obj = mapper.readValue(data, SwitchMarginModeReq.class);
  }

  /** switchMarginMode Response Switch Margin Mode /api/v2/position/changeMarginMode */
  public static void testSwitchMarginModeResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "        \\\"marginMode\\\": \\\"ISOLATED\\\"\\n"
            + "    }\\n"
            + "}";
    RestResponse<SwitchMarginModeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<SwitchMarginModeResp>>() {});
  }

  /**
   * batchSwitchMarginMode Request Batch Switch Margin Mode /api/v2/position/batchChangeMarginMode
   */
  public static void testBatchSwitchMarginModeRequest() throws Exception {
    String data =
        "{\\\"marginMode\\\": \\\"ISOLATED\\\", \\\"symbols\\\": [\\\"XBTUSDTM\\\","
            + " \\\"ETHUSDTM\\\"]}";
    BatchSwitchMarginModeReq obj = mapper.readValue(data, BatchSwitchMarginModeReq.class);
  }

  /**
   * batchSwitchMarginMode Response Batch Switch Margin Mode /api/v2/position/batchChangeMarginMode
   */
  public static void testBatchSwitchMarginModeResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"marginMode\\\": {\\n"
            + "            \\\"ETHUSDTM\\\": \\\"ISOLATED\\\",\\n"
            + "            \\\"XBTUSDTM\\\": \\\"CROSS\\\"\\n"
            + "        },\\n"
            + "        \\\"errors\\\": [\\n"
            + "            {\\n"
            + "                \\\"code\\\": \\\"50002\\\",\\n"
            + "                \\\"msg\\\": \\\"exist.order.or.position\\\",\\n"
            + "                \\\"symbol\\\": \\\"XBTUSDTM\\\"\\n"
            + "            }\\n"
            + "        ]\\n"
            + "    }\\n"
            + "}";
    RestResponse<BatchSwitchMarginModeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<BatchSwitchMarginModeResp>>() {});
  }

  /** getMaxOpenSize Request Get Max Open Size /api/v2/getMaxOpenSize */
  public static void testGetMaxOpenSizeRequest() throws Exception {
    String data =
        "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"price\\\": \\\"example_string_default_value\\\","
            + " \\\"leverage\\\": 123456}";
    GetMaxOpenSizeReq obj = mapper.readValue(data, GetMaxOpenSizeReq.class);
  }

  /** getMaxOpenSize Response Get Max Open Size /api/v2/getMaxOpenSize */
  public static void testGetMaxOpenSizeResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "        \\\"maxBuyOpenSize\\\": 0,\\n"
            + "        \\\"maxSellOpenSize\\\": 0\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetMaxOpenSizeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMaxOpenSizeResp>>() {});
  }

  /** getPositionDetails Request Get Position Details /api/v1/position */
  public static void testGetPositionDetailsRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"example_string_default_value\\\"}";
    GetPositionDetailsReq obj = mapper.readValue(data, GetPositionDetailsReq.class);
  }

  /** getPositionDetails Response Get Position Details /api/v1/position */
  public static void testGetPositionDetailsResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"id\\\": \\\"500000000000988255\\\",\\n"
            + "        \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "        \\\"autoDeposit\\\": false,\\n"
            + "        \\\"crossMode\\\": false,\\n"
            + "        \\\"maintMarginReq\\\": 0.005,\\n"
            + "        \\\"riskLimit\\\": 500000,\\n"
            + "        \\\"realLeverage\\\": 2.88,\\n"
            + "        \\\"delevPercentage\\\": 0.18,\\n"
            + "        \\\"openingTimestamp\\\": 1729155616322,\\n"
            + "        \\\"currentTimestamp\\\": 1729482542135,\\n"
            + "        \\\"currentQty\\\": 1,\\n"
            + "        \\\"currentCost\\\": 67.4309,\\n"
            + "        \\\"currentComm\\\": 0.01925174,\\n"
            + "        \\\"unrealisedCost\\\": 67.4309,\\n"
            + "        \\\"realisedGrossCost\\\": 0.0,\\n"
            + "        \\\"realisedCost\\\": 0.01925174,\\n"
            + "        \\\"isOpen\\\": true,\\n"
            + "        \\\"markPrice\\\": 68900.7,\\n"
            + "        \\\"markValue\\\": 68.9007,\\n"
            + "        \\\"posCost\\\": 67.4309,\\n"
            + "        \\\"posCross\\\": 0.01645214,\\n"
            + "        \\\"posCrossMargin\\\": 0,\\n"
            + "        \\\"posInit\\\": 22.4769666644,\\n"
            + "        \\\"posComm\\\": 0.0539546299,\\n"
            + "        \\\"posCommCommon\\\": 0.0539447199,\\n"
            + "        \\\"posLoss\\\": 0.03766885,\\n"
            + "        \\\"posMargin\\\": 22.5097045843,\\n"
            + "        \\\"posFunding\\\": -0.0212068,\\n"
            + "        \\\"posMaint\\\": 0.3931320569,\\n"
            + "        \\\"maintMargin\\\": 23.9795045843,\\n"
            + "        \\\"realisedGrossPnl\\\": 0.0,\\n"
            + "        \\\"realisedPnl\\\": -0.06166534,\\n"
            + "        \\\"unrealisedPnl\\\": 1.4698,\\n"
            + "        \\\"unrealisedPnlPcnt\\\": 0.0218,\\n"
            + "        \\\"unrealisedRoePcnt\\\": 0.0654,\\n"
            + "        \\\"avgEntryPrice\\\": 67430.9,\\n"
            + "        \\\"liquidationPrice\\\": 45314.33,\\n"
            + "        \\\"bankruptPrice\\\": 44975.16,\\n"
            + "        \\\"settleCurrency\\\": \\\"USDT\\\",\\n"
            + "        \\\"maintainMargin\\\": 0.005,\\n"
            + "        \\\"riskLimitLevel\\\": 2,\\n"
            + "        \\\"marginMode\\\": \\\"ISOLATED\\\",\\n"
            + "        \\\"positionSide\\\": \\\"BOTH\\\",\\n"
            + "        \\\"leverage\\\": 2.88\\n"
            + "    }\\n"
            + "}\\n";
    RestResponse<GetPositionDetailsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetPositionDetailsResp>>() {});
  }

  /** getPositionList Request Get Position List /api/v1/positions */
  public static void testGetPositionListRequest() throws Exception {
    String data = "{\\\"currency\\\": \\\"USDT\\\"}";
    GetPositionListReq obj = mapper.readValue(data, GetPositionListReq.class);
  }

  /** getPositionList Response Get Position List /api/v1/positions */
  public static void testGetPositionListResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": [\\n"
            + "        {\\n"
            + "            \\\"id\\\": \\\"500000000001046430\\\",\\n"
            + "            \\\"symbol\\\": \\\"ETHUSDM\\\",\\n"
            + "            \\\"crossMode\\\": true,\\n"
            + "            \\\"delevPercentage\\\": 0.71,\\n"
            + "            \\\"openingTimestamp\\\": 1730635780702,\\n"
            + "            \\\"currentTimestamp\\\": 1730636040926,\\n"
            + "            \\\"currentQty\\\": 1,\\n"
            + "            \\\"currentCost\\\": -4.069805E-4,\\n"
            + "            \\\"currentComm\\\": 2.441E-7,\\n"
            + "            \\\"unrealisedCost\\\": -4.069805E-4,\\n"
            + "            \\\"realisedGrossCost\\\": 0.0,\\n"
            + "            \\\"realisedCost\\\": 2.441E-7,\\n"
            + "            \\\"isOpen\\\": true,\\n"
            + "            \\\"markPrice\\\": 2454.12,\\n"
            + "            \\\"markValue\\\": -4.07478E-4,\\n"
            + "            \\\"posCost\\\": -4.069805E-4,\\n"
            + "            \\\"posInit\\\": 4.06981E-5,\\n"
            + "            \\\"posMargin\\\": 4.07478E-5,\\n"
            + "            \\\"realisedGrossPnl\\\": 0.0,\\n"
            + "            \\\"realisedPnl\\\": -2.441E-7,\\n"
            + "            \\\"unrealisedPnl\\\": -4.975E-7,\\n"
            + "            \\\"unrealisedPnlPcnt\\\": -0.0012,\\n"
            + "            \\\"unrealisedRoePcnt\\\": -0.0122,\\n"
            + "            \\\"avgEntryPrice\\\": 2457.12,\\n"
            + "            \\\"liquidationPrice\\\": 1429.96,\\n"
            + "            \\\"bankruptPrice\\\": 1414.96,\\n"
            + "            \\\"settleCurrency\\\": \\\"ETH\\\",\\n"
            + "            \\\"isInverse\\\": true,\\n"
            + "            \\\"marginMode\\\": \\\"CROSS\\\",\\n"
            + "            \\\"positionSide\\\": \\\"BOTH\\\",\\n"
            + "            \\\"leverage\\\": 10\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"id\\\": \\\"500000000000988255\\\",\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"autoDeposit\\\": true,\\n"
            + "            \\\"crossMode\\\": false,\\n"
            + "            \\\"maintMarginReq\\\": 0.005,\\n"
            + "            \\\"riskLimit\\\": 500000,\\n"
            + "            \\\"realLeverage\\\": 2.97,\\n"
            + "            \\\"delevPercentage\\\": 0.5,\\n"
            + "            \\\"openingTimestamp\\\": 1729155616322,\\n"
            + "            \\\"currentTimestamp\\\": 1730636040926,\\n"
            + "            \\\"currentQty\\\": 1,\\n"
            + "            \\\"currentCost\\\": 67.4309,\\n"
            + "            \\\"currentComm\\\": -0.15936162,\\n"
            + "            \\\"unrealisedCost\\\": 67.4309,\\n"
            + "            \\\"realisedGrossCost\\\": 0.0,\\n"
            + "            \\\"realisedCost\\\": -0.15936162,\\n"
            + "            \\\"isOpen\\\": true,\\n"
            + "            \\\"markPrice\\\": 68323.06,\\n"
            + "            \\\"markValue\\\": 68.32306,\\n"
            + "            \\\"posCost\\\": 67.4309,\\n"
            + "            \\\"posCross\\\": 0.06225152,\\n"
            + "            \\\"posCrossMargin\\\": 0,\\n"
            + "            \\\"posInit\\\": 22.2769666644,\\n"
            + "            \\\"posComm\\\": 0.0539821899,\\n"
            + "            \\\"posCommCommon\\\": 0.0539447199,\\n"
            + "            \\\"posLoss\\\": 0.26210915,\\n"
            + "            \\\"posMargin\\\": 22.1310912243,\\n"
            + "            \\\"posFunding\\\": -0.19982016,\\n"
            + "            \\\"posMaint\\\": 0.4046228699,\\n"
            + "            \\\"maintMargin\\\": 23.0232512243,\\n"
            + "            \\\"realisedGrossPnl\\\": 0.0,\\n"
            + "            \\\"realisedPnl\\\": -0.2402787,\\n"
            + "            \\\"unrealisedPnl\\\": 0.89216,\\n"
            + "            \\\"unrealisedPnlPcnt\\\": 0.0132,\\n"
            + "            \\\"unrealisedRoePcnt\\\": 0.04,\\n"
            + "            \\\"avgEntryPrice\\\": 67430.9,\\n"
            + "            \\\"liquidationPrice\\\": 45704.44,\\n"
            + "            \\\"bankruptPrice\\\": 45353.8,\\n"
            + "            \\\"settleCurrency\\\": \\\"USDT\\\",\\n"
            + "            \\\"isInverse\\\": false,\\n"
            + "            \\\"maintainMargin\\\": 0.005,\\n"
            + "            \\\"marginMode\\\": \\\"ISOLATED\\\",\\n"
            + "            \\\"positionSide\\\": \\\"BOTH\\\",\\n"
            + "            \\\"leverage\\\": 2.97\\n"
            + "        }\\n"
            + "    ]\\n"
            + "}";
    RestResponse<GetPositionListResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetPositionListResp>>() {});
  }

  /** getPositionsHistory Request Get Positions History /api/v1/history-positions */
  public static void testGetPositionsHistoryRequest() throws Exception {
    String data =
        "{\\\"symbol\\\": \\\"example_string_default_value\\\", \\\"from\\\": 123456, \\\"to\\\":"
            + " 123456, \\\"limit\\\": 10, \\\"pageId\\\": 1}";
    GetPositionsHistoryReq obj = mapper.readValue(data, GetPositionsHistoryReq.class);
  }

  /** getPositionsHistory Response Get Positions History /api/v1/history-positions */
  public static void testGetPositionsHistoryResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"currentPage\\\": 1,\\n"
            + "        \\\"pageSize\\\": 10,\\n"
            + "        \\\"totalNum\\\": 1,\\n"
            + "        \\\"totalPage\\\": 1,\\n"
            + "        \\\"items\\\": [\\n"
            + "            {\\n"
            + "                \\\"closeId\\\": \\\"500000000036305465\\\",\\n"
            + "                \\\"userId\\\": \\\"633559791e1cbc0001f319bc\\\",\\n"
            + "                \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "                \\\"settleCurrency\\\": \\\"USDT\\\",\\n"
            + "                \\\"leverage\\\": \\\"1.0\\\",\\n"
            + "                \\\"type\\\": \\\"CLOSE_LONG\\\",\\n"
            + "                \\\"pnl\\\": \\\"0.51214413\\\",\\n"
            + "                \\\"realisedGrossCost\\\": \\\"-0.5837\\\",\\n"
            + "                \\\"realisedGrossCostNew\\\": \\\"-0.5837\\\",\\n"
            + "                \\\"withdrawPnl\\\": \\\"0.0\\\",\\n"
            + "                \\\"tradeFee\\\": \\\"0.03766066\\\",\\n"
            + "                \\\"fundingFee\\\": \\\"-0.03389521\\\",\\n"
            + "                \\\"openTime\\\": 1735549162120,\\n"
            + "                \\\"closeTime\\\": 1735589352069,\\n"
            + "                \\\"openPrice\\\": \\\"93859.8\\\",\\n"
            + "                \\\"closePrice\\\": \\\"94443.5\\\",\\n"
            + "                \\\"marginMode\\\": \\\"CROSS\\\",\\n"
            + "                \\\"tax\\\": \\\"0.0\\\",\\n"
            + "                \\\"roe\\\": null,\\n"
            + "                \\\"liquidAmount\\\": null,\\n"
            + "                \\\"liquidPrice\\\": null,\\n"
            + "                \\\"side\\\": \\\"LONG\\\"\\n"
            + "            }\\n"
            + "        ]\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetPositionsHistoryResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetPositionsHistoryResp>>() {});
  }

  /** getMaxWithdrawMargin Request Get Max Withdraw Margin /api/v1/margin/maxWithdrawMargin */
  public static void testGetMaxWithdrawMarginRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"example_string_default_value\\\"}";
    GetMaxWithdrawMarginReq obj = mapper.readValue(data, GetMaxWithdrawMarginReq.class);
  }

  /** getMaxWithdrawMargin Response Get Max Withdraw Margin /api/v1/margin/maxWithdrawMargin */
  public static void testGetMaxWithdrawMarginResponse() throws Exception {
    String data =
        "{\\n    \\\"code\\\": \\\"200000\\\",\\n    \\\"data\\\": \\\"21.1135719252\\\"\\n}";
    RestResponse<GetMaxWithdrawMarginResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMaxWithdrawMarginResp>>() {});
  }

  /** getCrossMarginLeverage Request Get Cross Margin Leverage /api/v2/getCrossUserLeverage */
  public static void testGetCrossMarginLeverageRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\"}";
    GetCrossMarginLeverageReq obj = mapper.readValue(data, GetCrossMarginLeverageReq.class);
  }

  /** getCrossMarginLeverage Response Get Cross Margin Leverage /api/v2/getCrossUserLeverage */
  public static void testGetCrossMarginLeverageResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "        \\\"leverage\\\": \\\"3\\\"\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetCrossMarginLeverageResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetCrossMarginLeverageResp>>() {});
  }

  /** modifyMarginLeverage Request Modify Cross Margin Leverage /api/v2/changeCrossUserLeverage */
  public static void testModifyMarginLeverageRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"leverage\\\": \\\"10\\\"}";
    ModifyMarginLeverageReq obj = mapper.readValue(data, ModifyMarginLeverageReq.class);
  }

  /** modifyMarginLeverage Response Modify Cross Margin Leverage /api/v2/changeCrossUserLeverage */
  public static void testModifyMarginLeverageResponse() throws Exception {
    String data = "{\\n    \\\"code\\\": \\\"200000\\\",\\n    \\\"data\\\": true\\n}";
    RestResponse<ModifyMarginLeverageResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<ModifyMarginLeverageResp>>() {});
  }

  /** addIsolatedMargin Request Add Isolated Margin /api/v1/position/margin/deposit-margin */
  public static void testAddIsolatedMarginRequest() throws Exception {
    String data =
        "{\\\"symbol\\\": \\\"string\\\", \\\"margin\\\": 0, \\\"bizNo\\\": \\\"string\\\"}";
    AddIsolatedMarginReq obj = mapper.readValue(data, AddIsolatedMarginReq.class);
  }

  /** addIsolatedMargin Response Add Isolated Margin /api/v1/position/margin/deposit-margin */
  public static void testAddIsolatedMarginResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"id\\\": \\\"6200c9b83aecfb000152ddcd\\\",\\n"
            + "        \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "        \\\"autoDeposit\\\": false,\\n"
            + "        \\\"maintMarginReq\\\": 0.005,\\n"
            + "        \\\"riskLimit\\\": 500000,\\n"
            + "        \\\"realLeverage\\\": 18.72,\\n"
            + "        \\\"crossMode\\\": false,\\n"
            + "        \\\"delevPercentage\\\": 0.66,\\n"
            + "        \\\"openingTimestamp\\\": 1646287090131,\\n"
            + "        \\\"currentTimestamp\\\": 1646295055021,\\n"
            + "        \\\"currentQty\\\": 1,\\n"
            + "        \\\"currentCost\\\": 43.388,\\n"
            + "        \\\"currentComm\\\": 0.0260328,\\n"
            + "        \\\"unrealisedCost\\\": 43.388,\\n"
            + "        \\\"realisedGrossCost\\\": 0,\\n"
            + "        \\\"realisedCost\\\": 0.0260328,\\n"
            + "        \\\"isOpen\\\": true,\\n"
            + "        \\\"markPrice\\\": 43536.65,\\n"
            + "        \\\"markValue\\\": 43.53665,\\n"
            + "        \\\"posCost\\\": 43.388,\\n"
            + "        \\\"posCross\\\": 0.000024985,\\n"
            + "        \\\"posInit\\\": 2.1694,\\n"
            + "        \\\"posComm\\\": 0.02733446,\\n"
            + "        \\\"posLoss\\\": 0,\\n"
            + "        \\\"posMargin\\\": 2.19675944,\\n"
            + "        \\\"posMaint\\\": 0.24861326,\\n"
            + "        \\\"maintMargin\\\": 2.34540944,\\n"
            + "        \\\"realisedGrossPnl\\\": 0,\\n"
            + "        \\\"realisedPnl\\\": -0.0260328,\\n"
            + "        \\\"unrealisedPnl\\\": 0.14865,\\n"
            + "        \\\"unrealisedPnlPcnt\\\": 0.0034,\\n"
            + "        \\\"unrealisedRoePcnt\\\": 0.0685,\\n"
            + "        \\\"avgEntryPrice\\\": 43388,\\n"
            + "        \\\"liquidationPrice\\\": 41440,\\n"
            + "        \\\"bankruptPrice\\\": 41218,\\n"
            + "        \\\"userId\\\": 1234321123,\\n"
            + "        \\\"settleCurrency\\\": \\\"USDT\\\"\\n"
            + "    }\\n"
            + "}";
    RestResponse<AddIsolatedMarginResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<AddIsolatedMarginResp>>() {});
  }

  /** removeIsolatedMargin Request Remove Isolated Margin /api/v1/margin/withdrawMargin */
  public static void testRemoveIsolatedMarginRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"withdrawAmount\\\": \\\"0.0000001\\\"}";
    RemoveIsolatedMarginReq obj = mapper.readValue(data, RemoveIsolatedMarginReq.class);
  }

  /** removeIsolatedMargin Response Remove Isolated Margin /api/v1/margin/withdrawMargin */
  public static void testRemoveIsolatedMarginResponse() throws Exception {
    String data = "{\\n    \\\"code\\\": \\\"200000\\\",\\n    \\\"data\\\": \\\"0.1\\\"\\n}";
    RestResponse<RemoveIsolatedMarginResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<RemoveIsolatedMarginResp>>() {});
  }

  /** getCrossMarginRiskLimit Request Get Cross Margin Risk Limit /api/v2/batchGetCrossOrderLimit */
  public static void testGetCrossMarginRiskLimitRequest() throws Exception {
    String data =
        "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"totalMargin\\\":"
            + " \\\"example_string_default_value\\\", \\\"leverage\\\": 123456}";
    GetCrossMarginRiskLimitReq obj = mapper.readValue(data, GetCrossMarginRiskLimitReq.class);
  }

  /**
   * getCrossMarginRiskLimit Response Get Cross Margin Risk Limit /api/v2/batchGetCrossOrderLimit
   */
  public static void testGetCrossMarginRiskLimitResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": [\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"maxOpenSize\\\": 12102,\\n"
            + "            \\\"maxOpenValue\\\": \\\"1234549.2240000000\\\",\\n"
            + "            \\\"totalMargin\\\": \\\"10000\\\",\\n"
            + "            \\\"price\\\": \\\"102012\\\",\\n"
            + "            \\\"leverage\\\": \\\"125.00\\\",\\n"
            + "            \\\"mmr\\\": \\\"0.00416136\\\",\\n"
            + "            \\\"imr\\\": \\\"0.008\\\",\\n"
            + "            \\\"currency\\\": \\\"USDT\\\"\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"ETHUSDTM\\\",\\n"
            + "            \\\"maxOpenSize\\\": 38003,\\n"
            + "            \\\"maxOpenValue\\\": \\\"971508.6920000000\\\",\\n"
            + "            \\\"totalMargin\\\": \\\"10000\\\",\\n"
            + "            \\\"price\\\": \\\"2556.4\\\",\\n"
            + "            \\\"leverage\\\": \\\"100.00\\\",\\n"
            + "            \\\"mmr\\\": \\\"0.0054623236\\\",\\n"
            + "            \\\"imr\\\": \\\"0.01\\\",\\n"
            + "            \\\"currency\\\": \\\"USDT\\\"\\n"
            + "        }\\n"
            + "    ]\\n"
            + "}";
    RestResponse<GetCrossMarginRiskLimitResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetCrossMarginRiskLimitResp>>() {});
  }

  /**
   * getIsolatedMarginRiskLimit Request Get Isolated Margin Risk Limit
   * /api/v1/contracts/risk-limit/{symbol}
   */
  public static void testGetIsolatedMarginRiskLimitRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\"}";
    GetIsolatedMarginRiskLimitReq obj = mapper.readValue(data, GetIsolatedMarginRiskLimitReq.class);
  }

  /**
   * getIsolatedMarginRiskLimit Response Get Isolated Margin Risk Limit
   * /api/v1/contracts/risk-limit/{symbol}
   */
  public static void testGetIsolatedMarginRiskLimitResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": [\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 1,\\n"
            + "            \\\"maxRiskLimit\\\": 100000,\\n"
            + "            \\\"minRiskLimit\\\": 0,\\n"
            + "            \\\"maxLeverage\\\": 125,\\n"
            + "            \\\"initialMargin\\\": 0.008,\\n"
            + "            \\\"maintainMargin\\\": 0.004\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 2,\\n"
            + "            \\\"maxRiskLimit\\\": 500000,\\n"
            + "            \\\"minRiskLimit\\\": 100000,\\n"
            + "            \\\"maxLeverage\\\": 100,\\n"
            + "            \\\"initialMargin\\\": 0.01,\\n"
            + "            \\\"maintainMargin\\\": 0.005\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 3,\\n"
            + "            \\\"maxRiskLimit\\\": 1000000,\\n"
            + "            \\\"minRiskLimit\\\": 500000,\\n"
            + "            \\\"maxLeverage\\\": 75,\\n"
            + "            \\\"initialMargin\\\": 0.014,\\n"
            + "            \\\"maintainMargin\\\": 0.007\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 4,\\n"
            + "            \\\"maxRiskLimit\\\": 2000000,\\n"
            + "            \\\"minRiskLimit\\\": 1000000,\\n"
            + "            \\\"maxLeverage\\\": 50,\\n"
            + "            \\\"initialMargin\\\": 0.02,\\n"
            + "            \\\"maintainMargin\\\": 0.01\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 5,\\n"
            + "            \\\"maxRiskLimit\\\": 3000000,\\n"
            + "            \\\"minRiskLimit\\\": 2000000,\\n"
            + "            \\\"maxLeverage\\\": 30,\\n"
            + "            \\\"initialMargin\\\": 0.034,\\n"
            + "            \\\"maintainMargin\\\": 0.017\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 6,\\n"
            + "            \\\"maxRiskLimit\\\": 5000000,\\n"
            + "            \\\"minRiskLimit\\\": 3000000,\\n"
            + "            \\\"maxLeverage\\\": 20,\\n"
            + "            \\\"initialMargin\\\": 0.05,\\n"
            + "            \\\"maintainMargin\\\": 0.025\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 7,\\n"
            + "            \\\"maxRiskLimit\\\": 8000000,\\n"
            + "            \\\"minRiskLimit\\\": 5000000,\\n"
            + "            \\\"maxLeverage\\\": 10,\\n"
            + "            \\\"initialMargin\\\": 0.1,\\n"
            + "            \\\"maintainMargin\\\": 0.05\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 8,\\n"
            + "            \\\"maxRiskLimit\\\": 12000000,\\n"
            + "            \\\"minRiskLimit\\\": 8000000,\\n"
            + "            \\\"maxLeverage\\\": 5,\\n"
            + "            \\\"initialMargin\\\": 0.2,\\n"
            + "            \\\"maintainMargin\\\": 0.1\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 9,\\n"
            + "            \\\"maxRiskLimit\\\": 20000000,\\n"
            + "            \\\"minRiskLimit\\\": 12000000,\\n"
            + "            \\\"maxLeverage\\\": 4,\\n"
            + "            \\\"initialMargin\\\": 0.25,\\n"
            + "            \\\"maintainMargin\\\": 0.125\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 10,\\n"
            + "            \\\"maxRiskLimit\\\": 30000000,\\n"
            + "            \\\"minRiskLimit\\\": 20000000,\\n"
            + "            \\\"maxLeverage\\\": 3,\\n"
            + "            \\\"initialMargin\\\": 0.334,\\n"
            + "            \\\"maintainMargin\\\": 0.167\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 11,\\n"
            + "            \\\"maxRiskLimit\\\": 40000000,\\n"
            + "            \\\"minRiskLimit\\\": 30000000,\\n"
            + "            \\\"maxLeverage\\\": 2,\\n"
            + "            \\\"initialMargin\\\": 0.5,\\n"
            + "            \\\"maintainMargin\\\": 0.25\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"XBTUSDTM\\\",\\n"
            + "            \\\"level\\\": 12,\\n"
            + "            \\\"maxRiskLimit\\\": 50000000,\\n"
            + "            \\\"minRiskLimit\\\": 40000000,\\n"
            + "            \\\"maxLeverage\\\": 1,\\n"
            + "            \\\"initialMargin\\\": 1.0,\\n"
            + "            \\\"maintainMargin\\\": 0.5\\n"
            + "        }\\n"
            + "    ]\\n"
            + "}";
    RestResponse<GetIsolatedMarginRiskLimitResp> resp =
        mapper.readValue(
            data, new TypeReference<RestResponse<GetIsolatedMarginRiskLimitResp>>() {});
  }

  /**
   * modifyIsolatedMarginRiskLimt Request Modify Isolated Margin Risk Limit
   * /api/v1/position/risk-limit-level/change
   */
  public static void testModifyIsolatedMarginRiskLimtRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"level\\\": 2}";
    ModifyIsolatedMarginRiskLimtReq obj =
        mapper.readValue(data, ModifyIsolatedMarginRiskLimtReq.class);
  }

  /**
   * modifyIsolatedMarginRiskLimt Response Modify Isolated Margin Risk Limit
   * /api/v1/position/risk-limit-level/change
   */
  public static void testModifyIsolatedMarginRiskLimtResponse() throws Exception {
    String data = "{\\n    \\\"code\\\": \\\"200000\\\",\\n    \\\"data\\\": true\\n}";
    RestResponse<ModifyIsolatedMarginRiskLimtResp> resp =
        mapper.readValue(
            data, new TypeReference<RestResponse<ModifyIsolatedMarginRiskLimtResp>>() {});
  }

  /**
   * modifyAutoDepositStatus Request Modify Isolated Margin Auto-Deposit Status
   * /api/v1/position/margin/auto-deposit-status
   */
  public static void testModifyAutoDepositStatusRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"XBTUSDTM\\\", \\\"status\\\": true}";
    ModifyAutoDepositStatusReq obj = mapper.readValue(data, ModifyAutoDepositStatusReq.class);
  }

  /**
   * modifyAutoDepositStatus Response Modify Isolated Margin Auto-Deposit Status
   * /api/v1/position/margin/auto-deposit-status
   */
  public static void testModifyAutoDepositStatusResponse() throws Exception {
    String data = "{\\n    \\\"code\\\": \\\"200000\\\",\\n    \\\"data\\\": true\\n}";
    RestResponse<ModifyAutoDepositStatusResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<ModifyAutoDepositStatusResp>>() {});
  }

  public static void runAllTests() {
    run(PositionsApiAutoGeneratedTest::testGetMarginModeRequest, "testGetMarginModeRequest");
    run(PositionsApiAutoGeneratedTest::testGetMarginModeResponse, "testGetMarginModeResponse");
    run(PositionsApiAutoGeneratedTest::testSwitchMarginModeRequest, "testSwitchMarginModeRequest");
    run(
        PositionsApiAutoGeneratedTest::testSwitchMarginModeResponse,
        "testSwitchMarginModeResponse");
    run(
        PositionsApiAutoGeneratedTest::testBatchSwitchMarginModeRequest,
        "testBatchSwitchMarginModeRequest");
    run(
        PositionsApiAutoGeneratedTest::testBatchSwitchMarginModeResponse,
        "testBatchSwitchMarginModeResponse");
    run(PositionsApiAutoGeneratedTest::testGetMaxOpenSizeRequest, "testGetMaxOpenSizeRequest");
    run(PositionsApiAutoGeneratedTest::testGetMaxOpenSizeResponse, "testGetMaxOpenSizeResponse");
    run(
        PositionsApiAutoGeneratedTest::testGetPositionDetailsRequest,
        "testGetPositionDetailsRequest");
    run(
        PositionsApiAutoGeneratedTest::testGetPositionDetailsResponse,
        "testGetPositionDetailsResponse");
    run(PositionsApiAutoGeneratedTest::testGetPositionListRequest, "testGetPositionListRequest");
    run(PositionsApiAutoGeneratedTest::testGetPositionListResponse, "testGetPositionListResponse");
    run(
        PositionsApiAutoGeneratedTest::testGetPositionsHistoryRequest,
        "testGetPositionsHistoryRequest");
    run(
        PositionsApiAutoGeneratedTest::testGetPositionsHistoryResponse,
        "testGetPositionsHistoryResponse");
    run(
        PositionsApiAutoGeneratedTest::testGetMaxWithdrawMarginRequest,
        "testGetMaxWithdrawMarginRequest");
    run(
        PositionsApiAutoGeneratedTest::testGetMaxWithdrawMarginResponse,
        "testGetMaxWithdrawMarginResponse");
    run(
        PositionsApiAutoGeneratedTest::testGetCrossMarginLeverageRequest,
        "testGetCrossMarginLeverageRequest");
    run(
        PositionsApiAutoGeneratedTest::testGetCrossMarginLeverageResponse,
        "testGetCrossMarginLeverageResponse");
    run(
        PositionsApiAutoGeneratedTest::testModifyMarginLeverageRequest,
        "testModifyMarginLeverageRequest");
    run(
        PositionsApiAutoGeneratedTest::testModifyMarginLeverageResponse,
        "testModifyMarginLeverageResponse");
    run(
        PositionsApiAutoGeneratedTest::testAddIsolatedMarginRequest,
        "testAddIsolatedMarginRequest");
    run(
        PositionsApiAutoGeneratedTest::testAddIsolatedMarginResponse,
        "testAddIsolatedMarginResponse");
    run(
        PositionsApiAutoGeneratedTest::testRemoveIsolatedMarginRequest,
        "testRemoveIsolatedMarginRequest");
    run(
        PositionsApiAutoGeneratedTest::testRemoveIsolatedMarginResponse,
        "testRemoveIsolatedMarginResponse");
    run(
        PositionsApiAutoGeneratedTest::testGetCrossMarginRiskLimitRequest,
        "testGetCrossMarginRiskLimitRequest");
    run(
        PositionsApiAutoGeneratedTest::testGetCrossMarginRiskLimitResponse,
        "testGetCrossMarginRiskLimitResponse");
    run(
        PositionsApiAutoGeneratedTest::testGetIsolatedMarginRiskLimitRequest,
        "testGetIsolatedMarginRiskLimitRequest");
    run(
        PositionsApiAutoGeneratedTest::testGetIsolatedMarginRiskLimitResponse,
        "testGetIsolatedMarginRiskLimitResponse");
    run(
        PositionsApiAutoGeneratedTest::testModifyIsolatedMarginRiskLimtRequest,
        "testModifyIsolatedMarginRiskLimtRequest");
    run(
        PositionsApiAutoGeneratedTest::testModifyIsolatedMarginRiskLimtResponse,
        "testModifyIsolatedMarginRiskLimtResponse");
    run(
        PositionsApiAutoGeneratedTest::testModifyAutoDepositStatusRequest,
        "testModifyAutoDepositStatusRequest");
    run(
        PositionsApiAutoGeneratedTest::testModifyAutoDepositStatusResponse,
        "testModifyAutoDepositStatusResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
