// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class BatchAddOrdersSyncOrderList implements Request {
  /**
   * Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a
   * UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is
   * returned when order information is obtained. You can use clientOid to tag your orders.
   * ClientOid is different from the order ID created by the service provider. Please do not
   * initiate requests using the same clientOid. The maximum length for the ClientOid is 40
   * characters.
   */
  @JsonProperty("clientOid")
  private String clientOid;

  /** symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** Specify if the order is a 'limit' order or 'market' order. */
  @JsonProperty("type")
  private TypeEnum type;

  /**
   * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during
   * trading
   */
  @JsonProperty("timeInForce")
  @Builder.Default
  private TimeInForceEnum timeInForce = TimeInForceEnum.GTC;

  /** Specify if the order is to 'buy' or 'sell'. */
  @JsonProperty("side")
  private SideEnum side;

  /** Specify price for order */
  @JsonProperty("price")
  private String price;

  /**
   * Specify quantity for order. When **type** is limited, select one out of two: size or funds.
   * Size refers to the amount of trading targets (the asset name written in front) for the trading
   * pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement
   * represents the precision for the trading pair. The size of an order must be a positive-integer
   * multiple of baseIncrement and must be between baseMinSize and baseMaxSize. When **type** is
   * market, select one out of two: size or funds
   */
  @JsonProperty("size")
  private String size;

  /**
   * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four
   * strategies: CN, CO, CB , and DC
   */
  @JsonProperty("stp")
  private StpEnum stp;

  /**
   * Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled
   * automatically, the default value is -1
   */
  @JsonProperty("cancelAfter")
  @Builder.Default
  private Long cancelAfter = -1l;

  /** passive order labels, this is disabled when the order timing strategy is IOC or FOK */
  @JsonProperty("postOnly")
  @Builder.Default
  private Boolean postOnly = false;

  /** [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book) */
  @JsonProperty("hidden")
  @Builder.Default
  private Boolean hidden = false;

  /**
   * Whether or not only visible portions of orders are shown in [Iceberg
   * orders](https://www.kucoin.com/docs-new/doc-338146)
   */
  @JsonProperty("iceberg")
  @Builder.Default
  private Boolean iceberg = false;

  /** Maximum visible quantity in iceberg orders */
  @JsonProperty("visibleSize")
  private String visibleSize;

  /** Order tag, length cannot exceed 20 characters (ASCII) */
  @JsonProperty("tags")
  private String tags;

  /** Order placement remarks, length cannot exceed 20 characters (ASCII) */
  @JsonProperty("remark")
  private String remark;

  /** When **type** is market, select one out of two: size or funds */
  @JsonProperty("funds")
  private String funds;

  /**
   * Order failed after timeout of specified milliseconds, If clientTimestamp + allowMaxTimeWindow <
   * Gateway received the message time, this order will fail.
   */
  @JsonProperty("allowMaxTimeWindow")
  private Long allowMaxTimeWindow;

  /** Equal to KC-API-TIMESTAMP. Needs to be defined if allowMaxTimeWindow is specified. */
  @JsonProperty("clientTimestamp")
  private Long clientTimestamp;

  public enum TypeEnum {
    /** */
    LIMIT("limit");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TimeInForceEnum {
    /** */
    GTC("GTC"),
    /** */
    GTT("GTT"),
    /** */
    IOC("IOC"),
    /** */
    FOK("FOK");

    private final String value;

    TimeInForceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TimeInForceEnum fromValue(String value) {
      for (TimeInForceEnum b : TimeInForceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SideEnum {
    /** */
    BUY("buy"),
    /** */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StpEnum {
    /** */
    DC("DC"),
    /** */
    CO("CO"),
    /** */
    CN("CN"),
    /** */
    CB("CB");

    private final String value;

    StpEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StpEnum fromValue(String value) {
      for (StpEnum b : StpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
