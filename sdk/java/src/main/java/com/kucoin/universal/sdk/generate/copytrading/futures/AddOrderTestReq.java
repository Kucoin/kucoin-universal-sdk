// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.copytrading.futures;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class AddOrderTestReq implements Request {
  /**
   * Unique order ID created by users to identify their orders. The maximum length cannot exceed 40,
   * e.g. UUID only allows numbers, characters, underline(_), and separator (-).
   */
  @JsonProperty("clientOid")
  private String clientOid;

  /** Specify if the order is to 'buy' or 'sell'. */
  @JsonProperty("side")
  private SideEnum side;

  /**
   * Symbol of the contract. Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-3470220)
   */
  @JsonProperty("symbol")
  private String symbol;

  /**
   * Used to calculate the margin to be frozen for the order. If you are to close the position, this
   * parameter is not required.
   */
  @JsonProperty("leverage")
  private Integer leverage;

  /** Specify if the order is a 'limit' order or 'market' order */
  @JsonProperty("type")
  @Builder.Default
  private TypeEnum type = TypeEnum.LIMIT;

  /**
   * Either 'down' or 'up'. If stop is used, parameter stopPrice and stopPriceType also need to be
   * provided.
   */
  @JsonProperty("stop")
  private StopEnum stop;

  /** Either 'TP' or 'MP' need to be defined if stop is specified. */
  @JsonProperty("stopPriceType")
  private StopPriceTypeEnum stopPriceType;

  /** Needs to be defined if stop is specified. */
  @JsonProperty("stopPrice")
  private String stopPrice;

  /**
   * A mark to reduce the position size only. Set to false by default. Need to set the position size
   * when reduceOnly is true. If set to true, only the orders reducing the position size will be
   * executed. If the reduce-only order size exceeds the position size, the extra size will be
   * canceled.
   */
  @JsonProperty("reduceOnly")
  @Builder.Default
  private Boolean reduceOnly = false;

  /**
   * A mark to close the position. Set to false by default. If closeOrder is set to true, the system
   * will close the position and the position size will become 0. Side, Size and Leverage fields can
   * be left empty and the system will determine the side and size automatically.
   */
  @JsonProperty("closeOrder")
  @Builder.Default
  private Boolean closeOrder = false;

  /** Margin mode: ISOLATED, default: ISOLATED */
  @JsonProperty("marginMode")
  @Builder.Default
  private MarginModeEnum marginMode = MarginModeEnum.ISOLATED;

  /** Required for type is 'limit' order, indicating the operating price */
  @JsonProperty("price")
  private String price;

  /**
   * Order size (lot), must be a positive integer. The quantity unit of coin-swap contracts is size
   * (lot), and other units are not supported.
   */
  @JsonProperty("size")
  private Integer size;

  /**
   * Optional for type is 'limit' order, [Time in force](https://www.kucoin.com/docs-new/doc-338146)
   * is a special strategy used during trading, default is GTC
   */
  @JsonProperty("timeInForce")
  @Builder.Default
  private TimeInForceEnum timeInForce = TimeInForceEnum.GOODTILLCANCELED;

  /**
   * Optional for type is 'limit' order, post only flag, invalid when timeInForce is IOC. When
   * postOnly is true, not allowed to choose hidden or iceberg. The post-only flag ensures that the
   * trader always pays the maker fee and provides liquidity to the order book. If any part of the
   * order is going to pay taker fees, the order will be fully rejected.
   */
  @JsonProperty("postOnly")
  @Builder.Default
  private Boolean postOnly = false;

  /**
   * Optional for type is 'limit' order, orders not displaying in order book. When hidden is chosen,
   * choosing postOnly is not allowed.
   */
  @JsonProperty("hidden")
  @Builder.Default
  private Boolean hidden = false;

  /**
   * Optional for type is 'limit' order, Only visible portion of the order is displayed in the order
   * book. When iceberg is chose, choosing postOnly is not allowed.
   */
  @JsonProperty("iceberg")
  @Builder.Default
  private Boolean iceberg = false;

  /**
   * Optional for type is 'limit' order, the maximum visible size of an iceberg order. Please place
   * order in size (lots). The units of qty (base currency) and valueQty (value) are not supported.
   * Need to be defined if iceberg is specified.
   */
  @JsonProperty("visibleSize")
  private String visibleSize;

  public enum SideEnum {
    /** */
    BUY("buy"),
    /** */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** */
    LIMIT("limit"),
    /** */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopEnum {
    /** Triggers when the price reaches or goes below the stopPrice. */
    DOWN("down"),
    /** Triggers when the price reaches or goes above the stopPrice. */
    UP("up");

    private final String value;

    StopEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopEnum fromValue(String value) {
      for (StopEnum b : StopEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopPriceTypeEnum {
    /**
     * TP for trade price, The last trade price is the last price at which an order was filled. This
     * price can be found in the latest match message.
     */
    TRADEPRICE("TP"),
    /**
     * MP for mark price. The mark price can be obtained through relevant OPEN API for index
     * services.
     */
    MARKPRICE("MP");

    private final String value;

    StopPriceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopPriceTypeEnum fromValue(String value) {
      for (StopPriceTypeEnum b : StopPriceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum MarginModeEnum {
    /** Isolated Margin */
    ISOLATED("ISOLATED");

    private final String value;

    MarginModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MarginModeEnum fromValue(String value) {
      for (MarginModeEnum b : MarginModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TimeInForceEnum {
    /**
     * order remains open on the order book until canceled. This is the default type if the field is
     * left empty.
     */
    GOODTILLCANCELED("GTC"),
    /**
     * being matched or not, the remaining size of the order will be instantly canceled instead of
     * entering the order book.
     */
    IMMEDIATEORCANCEL("IOC");

    private final String value;

    TimeInForceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TimeInForceEnum fromValue(String value) {
      for (TimeInForceEnum b : TimeInForceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
