// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.broker.ndbroker;

import com.kucoin.universal.sdk.internal.interfaces.Transport;

public class NdBrokerApiImpl implements NdBrokerApi {
  private final Transport transport;

  public NdBrokerApiImpl(Transport transport) {
    this.transport = transport;
  }

  public SubmitKYCResp submitKYC(SubmitKYCReq req) {
    return this.transport.call(
        "broker",
        true,
        "POST",
        "/api/kyc/ndBroker/proxyClient/submit",
        req,
        SubmitKYCResp.class,
        false);
  }

  public GetKYCStatusResp getKYCStatus(GetKYCStatusReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/kyc/ndBroker/proxyClient/status/list",
        req,
        GetKYCStatusResp.class,
        false);
  }

  public GetKYCStatusListResp getKYCStatusList(GetKYCStatusListReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/kyc/ndBroker/proxyClient/status/page",
        req,
        GetKYCStatusListResp.class,
        false);
  }

  public GetBrokerInfoResp getBrokerInfo(GetBrokerInfoReq req) {
    return this.transport.call(
        "broker", true, "GET", "/api/v1/broker/nd/info", req, GetBrokerInfoResp.class, false);
  }

  public AddSubAccountResp addSubAccount(AddSubAccountReq req) {
    return this.transport.call(
        "broker", true, "POST", "/api/v1/broker/nd/account", req, AddSubAccountResp.class, false);
  }

  public GetSubAccountResp getSubAccount(GetSubAccountReq req) {
    return this.transport.call(
        "broker", true, "GET", "/api/v1/broker/nd/account", req, GetSubAccountResp.class, false);
  }

  public AddSubAccountApiResp addSubAccountApi(AddSubAccountApiReq req) {
    return this.transport.call(
        "broker",
        true,
        "POST",
        "/api/v1/broker/nd/account/apikey",
        req,
        AddSubAccountApiResp.class,
        false);
  }

  public GetSubAccountAPIResp getSubAccountAPI(GetSubAccountAPIReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/v1/broker/nd/account/apikey",
        req,
        GetSubAccountAPIResp.class,
        false);
  }

  public ModifySubAccountApiResp modifySubAccountApi(ModifySubAccountApiReq req) {
    return this.transport.call(
        "broker",
        true,
        "POST",
        "/api/v1/broker/nd/account/update-apikey",
        req,
        ModifySubAccountApiResp.class,
        false);
  }

  public DeleteSubAccountAPIResp deleteSubAccountAPI(DeleteSubAccountAPIReq req) {
    return this.transport.call(
        "broker",
        true,
        "DELETE",
        "/api/v1/broker/nd/account/apikey",
        req,
        DeleteSubAccountAPIResp.class,
        false);
  }

  public TransferResp transfer(TransferReq req) {
    return this.transport.call(
        "broker", true, "POST", "/api/v1/broker/nd/transfer", req, TransferResp.class, false);
  }

  public GetTransferHistoryResp getTransferHistory(GetTransferHistoryReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/v3/broker/nd/transfer/detail",
        req,
        GetTransferHistoryResp.class,
        false);
  }

  public GetDepositListResp getDepositList(GetDepositListReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/v1/asset/ndbroker/deposit/list",
        req,
        GetDepositListResp.class,
        false);
  }

  public GetDepositDetailResp getDepositDetail(GetDepositDetailReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/v3/broker/nd/deposit/detail",
        req,
        GetDepositDetailResp.class,
        false);
  }

  public GetWithdrawDetailResp getWithdrawDetail(GetWithdrawDetailReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/v3/broker/nd/withdraw/detail",
        req,
        GetWithdrawDetailResp.class,
        false);
  }

  public GetRebaseResp getRebase(GetRebaseReq req) {
    return this.transport.call(
        "broker",
        true,
        "GET",
        "/api/v1/broker/nd/rebase/download",
        req,
        GetRebaseResp.class,
        false);
  }
}
