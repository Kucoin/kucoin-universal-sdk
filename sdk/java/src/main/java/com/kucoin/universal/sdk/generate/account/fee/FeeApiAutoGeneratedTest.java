package com.kucoin.universal.sdk.generate.account.fee;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class FeeApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /** getBasicFee Request Get Basic Fee - Spot/Margin /api/v1/base-fee */
  public static void testGetBasicFeeRequest() throws Exception {
    String data = "{\"currencyType\": 1}";
    GetBasicFeeReq obj = mapper.readValue(data, GetBasicFeeReq.class);
  }

  /** getBasicFee Response Get Basic Fee - Spot/Margin /api/v1/base-fee */
  public static void testGetBasicFeeResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"takerFeeRate\": \"0.001\",\n"
            + "        \"makerFeeRate\": \"0.001\"\n"
            + "    }\n"
            + "}";
    RestResponse<GetBasicFeeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetBasicFeeResp>>() {});
  }

  /** getSpotActualFee Request Get Actual Fee - Spot/Margin /api/v1/trade-fees */
  public static void testGetSpotActualFeeRequest() throws Exception {
    String data = "{\"symbols\": \"BTC-USDT,ETH-USDT\"}";
    GetSpotActualFeeReq obj = mapper.readValue(data, GetSpotActualFeeReq.class);
  }

  /** getSpotActualFee Response Get Actual Fee - Spot/Margin /api/v1/trade-fees */
  public static void testGetSpotActualFeeResponse() throws Exception {
    String data =
        "{\"code\":\"200000\",\"data\":[{\"symbol\":\"BTC-USDT\",\"takerFeeRate\":\"0.001\",\"makerFeeRate\":\"0.001\"},{\"symbol\":\"ETH-USDT\",\"takerFeeRate\":\"0.001\",\"makerFeeRate\":\"0.001\"}]}";
    RestResponse<GetSpotActualFeeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSpotActualFeeResp>>() {});
  }

  /** getFuturesActualFee Request Get Actual Fee - Futures /api/v1/trade-fees */
  public static void testGetFuturesActualFeeRequest() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    GetFuturesActualFeeReq obj = mapper.readValue(data, GetFuturesActualFeeReq.class);
  }

  /** getFuturesActualFee Response Get Actual Fee - Futures /api/v1/trade-fees */
  public static void testGetFuturesActualFeeResponse() throws Exception {
    String data =
        "{\"code\":\"200000\",\"data\":{\"symbol\":\"XBTUSDTM\",\"takerFeeRate\":\"0.0006\",\"makerFeeRate\":\"0.0002\"}}";
    RestResponse<GetFuturesActualFeeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetFuturesActualFeeResp>>() {});
  }

  public static void runAllTests() {
    run(FeeApiAutoGeneratedTest::testGetBasicFeeRequest, "testGetBasicFeeRequest");
    run(FeeApiAutoGeneratedTest::testGetBasicFeeResponse, "testGetBasicFeeResponse");
    run(FeeApiAutoGeneratedTest::testGetSpotActualFeeRequest, "testGetSpotActualFeeRequest");
    run(FeeApiAutoGeneratedTest::testGetSpotActualFeeResponse, "testGetSpotActualFeeResponse");
    run(FeeApiAutoGeneratedTest::testGetFuturesActualFeeRequest, "testGetFuturesActualFeeRequest");
    run(
        FeeApiAutoGeneratedTest::testGetFuturesActualFeeResponse,
        "testGetFuturesActualFeeResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
