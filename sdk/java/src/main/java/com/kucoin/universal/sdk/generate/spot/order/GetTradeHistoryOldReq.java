// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetTradeHistoryOldReq implements Request {
  /** symbol */
  @JsonProperty("symbol")
  private String symbol;

  /**
   * The unique order ID generated by the trading system. (If orderId is specified, please ignore
   * the other query parameters.)
   */
  @JsonProperty("orderId")
  private String orderId;

  /** Specify if the order is to 'buy' or 'sell'. */
  @JsonProperty("side")
  private SideEnum side;

  /** limit, market, limit_stop or market_stop */
  @JsonProperty("type")
  private TypeEnum type;

  /**
   * The type of trading: TRADE - Spot Trading (TRADE as default), MARGIN_TRADE - Cross Margin
   * Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
   */
  @JsonProperty("tradeType")
  @Builder.Default
  private TradeTypeEnum tradeType = TradeTypeEnum.TRADE;

  /** Start time (milliseconds) */
  @JsonProperty("startAt")
  private Long startAt;

  /** End time (milliseconds) */
  @JsonProperty("endAt")
  private Long endAt;

  /** Current request page. */
  @JsonProperty("currentPage")
  @Builder.Default
  private Integer currentPage = 1;

  /** Number of results per request. Minimum is 10, maximum is 500. */
  @JsonProperty("pageSize")
  private Integer pageSize;

  public enum SideEnum {
    /** buy */
    BUY("buy"),
    /** sell */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** limit */
    LIMIT("limit"),
    /** market */
    MARKET("market"),
    /** limit_stop */
    LIMITSTOP("limit_stop"),
    /** market_stop */
    MARKETSTOP("market_stop");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TradeTypeEnum {
    /** Spot Trading */
    TRADE("TRADE"),
    /** Cross Margin Trading */
    MARGIN_TRADE("MARGIN_TRADE"),
    /** Isolated Margin Trading */
    MARGIN_ISOLATED_TRADE("MARGIN_ISOLATED_TRADE");

    private final String value;

    TradeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TradeTypeEnum fromValue(String value) {
      for (TradeTypeEnum b : TradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
