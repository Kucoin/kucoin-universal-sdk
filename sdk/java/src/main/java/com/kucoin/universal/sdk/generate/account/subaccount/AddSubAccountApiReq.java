// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.subaccount;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class AddSubAccountApiReq implements Request {
  /** Password (Must contain 7–32 characters. Cannot contain any spaces.) */
  @JsonProperty("passphrase")
  private String passphrase;

  /** Remarks (1–24 characters) */
  @JsonProperty("remark")
  private String remark;

  /**
   * [Permissions](https://www.kucoin.com/docs-new/doc-338144)(Only General, Spot, Futures, Margin,
   * InnerTransfer (Flex Transfer) permissions can be set, such as \"General, Trade\". The default
   * is \"General\")
   */
  @JsonProperty("permission")
  @Builder.Default
  private String permission = "General";

  /** IP whitelist (You may add up to 20 IPs. Use a halfwidth comma to each IP) */
  @JsonProperty("ipWhitelist")
  private String ipWhitelist;

  /** API expiration time: Never expire(default)-1, 30Day30, 90Day90, 180Day180, 360Day360 */
  @JsonProperty("expire")
  @Builder.Default
  private ExpireEnum expire = ExpireEnum._1;

  /** Sub-account name, create sub account name of API Key. */
  @JsonProperty("subName")
  private String subName;

  public enum ExpireEnum {
    /** */
    _1("-1"),
    /** */
    _30("30"),
    /** */
    _90("90"),
    /** */
    _180("180"),
    /** */
    _360("360");

    private final String value;

    ExpireEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExpireEnum fromValue(String value) {
      for (ExpireEnum b : ExpireEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
