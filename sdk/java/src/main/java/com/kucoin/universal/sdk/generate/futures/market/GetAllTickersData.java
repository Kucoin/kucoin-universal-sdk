// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.market;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetAllTickersData {
  /** Sequence number, used to judge whether the messages pushed by Websocket are continuous. */
  @JsonProperty("sequence")
  private Long sequence;

  /** Symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** Trade direction */
  @JsonProperty("side")
  private SideEnum side;

  /**
   * Filled side; the trade side indicates the taker order side. A taker order is the order that was
   * matched with orders opened on the order book.
   */
  @JsonProperty("size")
  private Integer size;

  /** Transaction ID */
  @JsonProperty("tradeId")
  private String tradeId;

  /** Filled price */
  @JsonProperty("price")
  private String price;

  /** Best bid price */
  @JsonProperty("bestBidPrice")
  private String bestBidPrice;

  /** Best bid size */
  @JsonProperty("bestBidSize")
  private Integer bestBidSize;

  /** Best ask price */
  @JsonProperty("bestAskPrice")
  private String bestAskPrice;

  /** Best ask size */
  @JsonProperty("bestAskSize")
  private Integer bestAskSize;

  /** Filled time (nanoseconds) */
  @JsonProperty("ts")
  private Long ts;

  public enum SideEnum {
    /** */
    BUY("buy"),
    /** */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
