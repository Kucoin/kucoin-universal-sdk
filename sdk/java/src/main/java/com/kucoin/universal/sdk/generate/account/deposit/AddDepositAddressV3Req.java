// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.deposit;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class AddDepositAddressV3Req implements Request {
  /** currency */
  @JsonProperty("currency")
  private String currency;

  /**
   * The currency chainId, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is
   * ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc,
   * trx; default is Native.
   */
  @JsonProperty("chain")
  @Builder.Default
  private String chain = "eth";

  /**
   * Deposit account type: MAIN (funding account), TRADE (spot trading account); the default is MAIN
   */
  @JsonProperty("to")
  @Builder.Default
  private ToEnum to = ToEnum.MAIN;

  /**
   * Deposit amount. This parameter is only used when applying for invoices on the Lightning
   * Network. This parameter is invalid if it is not passed through the Lightning Network.
   */
  @JsonProperty("amount")
  private String amount;

  public enum ToEnum {
    /** Funding account */
    MAIN("main"),
    /** Spot account */
    TRADE("trade");

    private final String value;

    ToEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ToEnum fromValue(String value) {
      for (ToEnum b : ToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
