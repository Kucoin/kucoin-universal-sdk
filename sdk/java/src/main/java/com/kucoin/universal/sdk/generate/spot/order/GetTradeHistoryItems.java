// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetTradeHistoryItems {
  /** Id of transaction detail */
  @JsonProperty("id")
  private Long id;

  /** symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** Trade Id, symbol latitude increment */
  @JsonProperty("tradeId")
  private Long tradeId;

  /** The unique order id generated by the trading system */
  @JsonProperty("orderId")
  private String orderId;

  /** Counterparty order Id */
  @JsonProperty("counterOrderId")
  private String counterOrderId;

  /** Buy or sell */
  @JsonProperty("side")
  private SideEnum side;

  /** Liquidity type: taker or maker */
  @JsonProperty("liquidity")
  private LiquidityEnum liquidity;

  /** */
  @JsonProperty("forceTaker")
  private Boolean forceTaker;

  /** Order price */
  @JsonProperty("price")
  private String price;

  /** Order size */
  @JsonProperty("size")
  private String size;

  /** Order Funds */
  @JsonProperty("funds")
  private String funds;

  /** [Handling fees](https://www.kucoin.com/docs-new/api-5327739) */
  @JsonProperty("fee")
  private String fee;

  /** Fee rate */
  @JsonProperty("feeRate")
  private String feeRate;

  /** currency used to calculate trading fee */
  @JsonProperty("feeCurrency")
  private String feeCurrency;

  /**
   * Take Profit and Stop Loss type, currently HFT does not support the Take Profit and Stop Loss
   * type, so it is empty
   */
  @JsonProperty("stop")
  private String stop;

  /** Trade type, redundancy param */
  @JsonProperty("tradeType")
  private String tradeType;

  /** Tax Rate, Users in some regions need query this field */
  @JsonProperty("taxRate")
  private String taxRate;

  /** Users in some regions need query this field */
  @JsonProperty("tax")
  private String tax;

  /** Specify if the order is an 'limit' order or 'market' order. */
  @JsonProperty("type")
  private TypeEnum type;

  /** */
  @JsonProperty("createdAt")
  private Long createdAt;

  public enum SideEnum {
    /** */
    BUY("buy"),
    /** */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum LiquidityEnum {
    /** */
    TAKER("taker"),
    /** */
    MAKER("maker");

    private final String value;

    LiquidityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LiquidityEnum fromValue(String value) {
      for (LiquidityEnum b : LiquidityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** */
    LIMIT("limit"),
    /** */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
