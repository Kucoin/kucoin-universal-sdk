
    /**
    * getTransferQuotas
    * Get Transfer Quotas
    * /api/v1/accounts/transferable
    */
    @Test
    public void testGetTransferQuotas() throws Exception {
        GetTransferQuotasReq.GetTransferQuotasReqBuilder builder = GetTransferQuotasReq.builder();
        builder.currency(?).type(?).tag(?);
        GetTransferQuotasReq req = builder.build();
        GetTransferQuotasResp resp = api.getTransferQuotas(req);
        Assertions.assertNotNull(resp.getCurrency());
        Assertions.assertNotNull(resp.getBalance());
        Assertions.assertNotNull(resp.getAvailable());
        Assertions.assertNotNull(resp.getHolds());
        Assertions.assertNotNull(resp.getTransferable());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * flexTransfer
    * Flex Transfer
    * /api/v3/accounts/universal-transfer
    */
    @Test
    public void testFlexTransfer() throws Exception {
        FlexTransferReq.FlexTransferReqBuilder builder = FlexTransferReq.builder();
        builder.clientOid(?).currency(?).amount(?).fromUserId(?).fromAccountType(?).fromAccountTag(?).type(?).toUserId(?).toAccountType(?).toAccountTag(?);
        FlexTransferReq req = builder.build();
        FlexTransferResp resp = api.flexTransfer(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * subAccountTransfer
    * Sub-account Transfer
    * /api/v2/accounts/sub-transfer
    */
    @Test
    public void testSubAccountTransfer() throws Exception {
        SubAccountTransferReq.SubAccountTransferReqBuilder builder = SubAccountTransferReq.builder();
        builder.clientOid(?).currency(?).amount(?).direction(?).accountType(?).subAccountType(?).subUserId(?).tag(?).subTag(?);
        SubAccountTransferReq req = builder.build();
        SubAccountTransferResp resp = api.subAccountTransfer(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * innerTransfer
    * Internal Transfer
    * /api/v2/accounts/inner-transfer
    */
    @Test
    public void testInnerTransfer() throws Exception {
        InnerTransferReq.InnerTransferReqBuilder builder = InnerTransferReq.builder();
        builder.clientOid(?).currency(?).amount(?).to(?).fromTag(?).toTag(?).from(?);
        InnerTransferReq req = builder.build();
        InnerTransferResp resp = api.innerTransfer(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getFuturesAccountTransferOutLedger
    * Get Futures Account Transfer Out Ledger
    * /api/v1/transfer-list
    */
    @Test
    public void testGetFuturesAccountTransferOutLedger() throws Exception {
        GetFuturesAccountTransferOutLedgerReq.GetFuturesAccountTransferOutLedgerReqBuilder builder = GetFuturesAccountTransferOutLedgerReq.builder();
        builder.currency(?).type(?).tag(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetFuturesAccountTransferOutLedgerReq req = builder.build();
        GetFuturesAccountTransferOutLedgerResp resp = api.getFuturesAccountTransferOutLedger(req);
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getApplyId());
            Assertions.assertNotNull(item.getCurrency());
            Assertions.assertNotNull(item.getRecRemark());
            Assertions.assertNotNull(item.getRecSystem());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getAmount());
            Assertions.assertNotNull(item.getReason());
            Assertions.assertNotNull(item.getOffset());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getRemark());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * futuresAccountTransferOut
    * Futures Account Transfer Out
    * /api/v3/transfer-out
    */
    @Test
    public void testFuturesAccountTransferOut() throws Exception {
        FuturesAccountTransferOutReq.FuturesAccountTransferOutReqBuilder builder = FuturesAccountTransferOutReq.builder();
        builder.currency(?).amount(?).recAccountType(?);
        FuturesAccountTransferOutReq req = builder.build();
        FuturesAccountTransferOutResp resp = api.futuresAccountTransferOut(req);
        Assertions.assertNotNull(resp.getApplyId());
        Assertions.assertNotNull(resp.getBizNo());
        Assertions.assertNotNull(resp.getPayAccountType());
        Assertions.assertNotNull(resp.getPayTag());
        Assertions.assertNotNull(resp.getRemark());
        Assertions.assertNotNull(resp.getRecAccountType());
        Assertions.assertNotNull(resp.getRecTag());
        Assertions.assertNotNull(resp.getRecRemark());
        Assertions.assertNotNull(resp.getRecSystem());
        Assertions.assertNotNull(resp.getStatus());
        Assertions.assertNotNull(resp.getCurrency());
        Assertions.assertNotNull(resp.getAmount());
        Assertions.assertNotNull(resp.getFee());
        Assertions.assertNotNull(resp.getSn());
        Assertions.assertNotNull(resp.getReason());
        Assertions.assertNotNull(resp.getCreatedAt());
        Assertions.assertNotNull(resp.getUpdatedAt());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * futuresAccountTransferIn
    * Futures Account Transfer In
    * /api/v1/transfer-in
    */
    @Test
    public void testFuturesAccountTransferIn() throws Exception {
        FuturesAccountTransferInReq.FuturesAccountTransferInReqBuilder builder = FuturesAccountTransferInReq.builder();
        builder.currency(?).amount(?).payAccountType(?);
        FuturesAccountTransferInReq req = builder.build();
        FuturesAccountTransferInResp resp = api.futuresAccountTransferIn(req);
        Assertions.assertNotNull(resp.getData());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

