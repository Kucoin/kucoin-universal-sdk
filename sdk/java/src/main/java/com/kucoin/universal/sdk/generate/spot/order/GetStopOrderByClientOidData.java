// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetStopOrderByClientOidData {
  /** Order ID, the ID of an order. */
  @JsonProperty("id")
  private String id;

  /** Symbol name */
  @JsonProperty("symbol")
  private String symbol;

  /** User ID */
  @JsonProperty("userId")
  private String userId;

  /** Order status, include NEW, TRIGGERED */
  @JsonProperty("status")
  private String status;

  /** Order type */
  @JsonProperty("type")
  private TypeEnum type;

  /** transaction direction,include buy and sell */
  @JsonProperty("side")
  private String side;

  /** order price */
  @JsonProperty("price")
  private String price;

  /** order quantity */
  @JsonProperty("size")
  private String size;

  /** order funds */
  @JsonProperty("funds")
  private String funds;

  /** */
  @JsonProperty("stp")
  private String stp;

  /** time InForce,include GTC,GTT,IOC,FOK */
  @JsonProperty("timeInForce")
  private String timeInForce;

  /** cancel orders after n seconds，requires timeInForce to be GTT */
  @JsonProperty("cancelAfter")
  private Long cancelAfter;

  /** postOnly */
  @JsonProperty("postOnly")
  private Boolean postOnly;

  /** hidden order */
  @JsonProperty("hidden")
  private Boolean hidden;

  /** Iceberg order */
  @JsonProperty("iceberg")
  private Boolean iceberg;

  /** displayed quantity for iceberg order */
  @JsonProperty("visibleSize")
  private String visibleSize;

  /** order source */
  @JsonProperty("channel")
  private String channel;

  /** user-entered order unique mark */
  @JsonProperty("clientOid")
  private String clientOid;

  /** Remarks at stop order creation */
  @JsonProperty("remark")
  private String remark;

  /** tag order source */
  @JsonProperty("tags")
  private String tags;

  /** domainId, e.g: kucoin */
  @JsonProperty("domainId")
  private String domainId;

  /** trade source: USER（Order by user）, MARGIN_SYSTEM（Order by margin system） */
  @JsonProperty("tradeSource")
  private String tradeSource;

  /**
   * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated
   * Margin).
   */
  @JsonProperty("tradeType")
  private String tradeType;

  /** The currency of the fee */
  @JsonProperty("feeCurrency")
  private String feeCurrency;

  /** Fee Rate of taker */
  @JsonProperty("takerFeeRate")
  private String takerFeeRate;

  /** Fee Rate of maker */
  @JsonProperty("makerFeeRate")
  private String makerFeeRate;

  /** order creation time */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** Stop order type, include loss and entry */
  @JsonProperty("stop")
  private String stop;

  /** The trigger time of the stop order */
  @JsonProperty("stopTriggerTime")
  private Long stopTriggerTime;

  /** stop price */
  @JsonProperty("stopPrice")
  private String stopPrice;

  /** Time of place a stop order, accurate to nanoseconds */
  @JsonProperty("orderTime")
  private Long orderTime;

  public enum TypeEnum {
    /** Limit order */
    LIMIT("limit"),
    /** Market order */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
