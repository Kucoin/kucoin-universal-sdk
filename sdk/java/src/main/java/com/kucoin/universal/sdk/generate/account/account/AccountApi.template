
    /**
    * getAccountInfo
    * Get Account Summary Info
    * /api/v2/user-info
    */
    public void testGetAccountInfo() {
        GetAccountInfoResp resp = this.api.getAccountInfo();
        self::assertNotNull($resp->level);
        self::assertNotNull($resp->subQuantity);
        self::assertNotNull($resp->spotSubQuantity);
        self::assertNotNull($resp->marginSubQuantity);
        self::assertNotNull($resp->futuresSubQuantity);
        self::assertNotNull($resp->optionSubQuantity);
        self::assertNotNull($resp->maxSubQuantity);
        self::assertNotNull($resp->maxDefaultSubQuantity);
        self::assertNotNull($resp->maxSpotSubQuantity);
        self::assertNotNull($resp->maxMarginSubQuantity);
        self::assertNotNull($resp->maxFuturesSubQuantity);
        self::assertNotNull($resp->maxOptionSubQuantity);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getApikeyInfo
    * Get Apikey Info
    * /api/v1/user/api-key
    */
    public void testGetApikeyInfo() {
        GetApikeyInfoResp resp = this.api.getApikeyInfo();
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->apiKey);
        self::assertNotNull($resp->apiVersion);
        self::assertNotNull($resp->permission);
        self::assertNotNull($resp->ipWhitelist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->uid);
        self::assertNotNull($resp->isMaster);
        self::assertNotNull($resp->subName);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotAccountType
    * Get Account Type - Spot 
    * /api/v1/hf/accounts/opened
    */
    public void testGetSpotAccountType() {
        GetSpotAccountTypeResp resp = this.api.getSpotAccountType();
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotAccountList
    * Get Account List - Spot
    * /api/v1/accounts
    */
    public void testGetSpotAccountList() {
        GetSpotAccountListReq.GetSpotAccountListReqBuilder builder = GetSpotAccountListReq.builder();
        builder.currency(?).type(?);
        GetSpotAccountListReq req = builder.build();
        GetSpotAccountListResp resp = this.api.getSpotAccountList(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->type);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->available);
            self::assertNotNull($item->holds);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotAccountDetail
    * Get Account Detail - Spot
    * /api/v1/accounts/{accountId}
    */
    public void testGetSpotAccountDetail() {
        GetSpotAccountDetailReq.GetSpotAccountDetailReqBuilder builder = GetSpotAccountDetailReq.builder();
        builder.accountId(?);
        GetSpotAccountDetailReq req = builder.build();
        GetSpotAccountDetailResp resp = this.api.getSpotAccountDetail(req);
        self::assertNotNull($resp->currency);
        self::assertNotNull($resp->balance);
        self::assertNotNull($resp->available);
        self::assertNotNull($resp->holds);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getCrossMarginAccount
    * Get Account - Cross Margin
    * /api/v3/margin/accounts
    */
    public void testGetCrossMarginAccount() {
        GetCrossMarginAccountReq.GetCrossMarginAccountReqBuilder builder = GetCrossMarginAccountReq.builder();
        builder.quoteCurrency(?).queryType(?);
        GetCrossMarginAccountReq req = builder.build();
        GetCrossMarginAccountResp resp = this.api.getCrossMarginAccount(req);
        self::assertNotNull($resp->totalAssetOfQuoteCurrency);
        self::assertNotNull($resp->totalLiabilityOfQuoteCurrency);
        self::assertNotNull($resp->debtRatio);
        self::assertNotNull($resp->status);
        foreach($resp->accounts as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->total);
            self::assertNotNull($item->available);
            self::assertNotNull($item->hold);
            self::assertNotNull($item->liability);
            self::assertNotNull($item->maxBorrowSize);
            self::assertNotNull($item->borrowEnabled);
            self::assertNotNull($item->transferInEnabled);
            self::assertNotNull($item->liabilityPrincipal);
            self::assertNotNull($item->liabilityInterest);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getIsolatedMarginAccount
    * Get Account - Isolated Margin
    * /api/v3/isolated/accounts
    */
    public void testGetIsolatedMarginAccount() {
        GetIsolatedMarginAccountReq.GetIsolatedMarginAccountReqBuilder builder = GetIsolatedMarginAccountReq.builder();
        builder.symbol(?).quoteCurrency(?).queryType(?);
        GetIsolatedMarginAccountReq req = builder.build();
        GetIsolatedMarginAccountResp resp = this.api.getIsolatedMarginAccount(req);
        self::assertNotNull($resp->totalAssetOfQuoteCurrency);
        self::assertNotNull($resp->totalLiabilityOfQuoteCurrency);
        self::assertNotNull($resp->timestamp);
        foreach($resp->assets as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->status);
            self::assertNotNull($item->debtRatio);
            self::assertNotNull($item->baseAsset);
            self::assertNotNull($item->quoteAsset);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getFuturesAccount
    * Get Account - Futures
    * /api/v1/account-overview
    */
    public void testGetFuturesAccount() {
        GetFuturesAccountReq.GetFuturesAccountReqBuilder builder = GetFuturesAccountReq.builder();
        builder.currency(?);
        GetFuturesAccountReq req = builder.build();
        GetFuturesAccountResp resp = this.api.getFuturesAccount(req);
        self::assertNotNull($resp->accountEquity);
        self::assertNotNull($resp->unrealisedPNL);
        self::assertNotNull($resp->marginBalance);
        self::assertNotNull($resp->positionMargin);
        self::assertNotNull($resp->orderMargin);
        self::assertNotNull($resp->frozenFunds);
        self::assertNotNull($resp->availableBalance);
        self::assertNotNull($resp->currency);
        self::assertNotNull($resp->riskRatio);
        self::assertNotNull($resp->maxWithdrawAmount);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotLedger
    * Get Account Ledgers - Spot/Margin
    * /api/v1/accounts/ledgers
    */
    public void testGetSpotLedger() {
        GetSpotLedgerReq.GetSpotLedgerReqBuilder builder = GetSpotLedgerReq.builder();
        builder.currency(?).direction(?).bizType(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetSpotLedgerReq req = builder.build();
        GetSpotLedgerResp resp = this.api.getSpotLedger(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->amount);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->accountType);
            self::assertNotNull($item->bizType);
            self::assertNotNull($item->direction);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->context);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotHFLedger
    * Get Account Ledgers - Trade_hf
    * /api/v1/hf/accounts/ledgers
    */
    public void testGetSpotHFLedger() {
        GetSpotHFLedgerReq.GetSpotHFLedgerReqBuilder builder = GetSpotHFLedgerReq.builder();
        builder.currency(?).direction(?).bizType(?).lastId(?).limit(?).startAt(?).endAt(?);
        GetSpotHFLedgerReq req = builder.build();
        GetSpotHFLedgerResp resp = this.api.getSpotHFLedger(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->amount);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->accountType);
            self::assertNotNull($item->bizType);
            self::assertNotNull($item->direction);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->context);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getMarginHFLedger
    * Get Account Ledgers - Margin_hf
    * /api/v3/hf/margin/account/ledgers
    */
    public void testGetMarginHFLedger() {
        GetMarginHFLedgerReq.GetMarginHFLedgerReqBuilder builder = GetMarginHFLedgerReq.builder();
        builder.currency(?).direction(?).bizType(?).lastId(?).limit(?).startAt(?).endAt(?);
        GetMarginHFLedgerReq req = builder.build();
        GetMarginHFLedgerResp resp = this.api.getMarginHFLedger(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->amount);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->accountType);
            self::assertNotNull($item->bizType);
            self::assertNotNull($item->direction);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->context);
            self::assertNotNull($item->tax);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getFuturesLedger
    * Get Account Ledgers - Futures
    * /api/v1/transaction-history
    */
    public void testGetFuturesLedger() {
        GetFuturesLedgerReq.GetFuturesLedgerReqBuilder builder = GetFuturesLedgerReq.builder();
        builder.currency(?).type(?).offset(?).forward(?).maxCount(?).startAt(?).endAt(?);
        GetFuturesLedgerReq req = builder.build();
        GetFuturesLedgerResp resp = this.api.getFuturesLedger(req);
        foreach($resp->dataList as $item) {
            self::assertNotNull($item->time);
            self::assertNotNull($item->type);
            self::assertNotNull($item->amount);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->accountEquity);
            self::assertNotNull($item->status);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->offset);
            self::assertNotNull($item->currency);
        }

        self::assertNotNull($resp->hasMore);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getMarginAccountDetail
    * Get Account Detail - Margin
    * /api/v1/margin/account
    */
    public void testGetMarginAccountDetail() {
        GetMarginAccountDetailResp resp = this.api.getMarginAccountDetail();
        self::assertNotNull($resp->debtRatio);
        foreach($resp->accounts as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->totalBalance);
            self::assertNotNull($item->availableBalance);
            self::assertNotNull($item->holdBalance);
            self::assertNotNull($item->liability);
            self::assertNotNull($item->maxBorrowSize);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getIsolatedMarginAccountListV1
    * Get Account List - Isolated Margin - V1
    * /api/v1/isolated/accounts
    */
    public void testGetIsolatedMarginAccountListV1() {
        GetIsolatedMarginAccountListV1Req.GetIsolatedMarginAccountListV1ReqBuilder builder = GetIsolatedMarginAccountListV1Req.builder();
        builder.balanceCurrency(?);
        GetIsolatedMarginAccountListV1Req req = builder.build();
        GetIsolatedMarginAccountListV1Resp resp = this.api.getIsolatedMarginAccountListV1(req);
        self::assertNotNull($resp->totalConversionBalance);
        self::assertNotNull($resp->liabilityConversionBalance);
        foreach($resp->assets as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->status);
            self::assertNotNull($item->debtRatio);
            self::assertNotNull($item->baseAsset);
            self::assertNotNull($item->quoteAsset);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getIsolatedMarginAccountDetailV1
    * Get Account Detail - Isolated Margin - V1
    * /api/v1/isolated/account/{symbol}
    */
    public void testGetIsolatedMarginAccountDetailV1() {
        GetIsolatedMarginAccountDetailV1Req.GetIsolatedMarginAccountDetailV1ReqBuilder builder = GetIsolatedMarginAccountDetailV1Req.builder();
        builder.symbol(?);
        GetIsolatedMarginAccountDetailV1Req req = builder.build();
        GetIsolatedMarginAccountDetailV1Resp resp = this.api.getIsolatedMarginAccountDetailV1(req);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->debtRatio);
        self::assertNotNull($resp->baseAsset);
        self::assertNotNull($resp->quoteAsset);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

