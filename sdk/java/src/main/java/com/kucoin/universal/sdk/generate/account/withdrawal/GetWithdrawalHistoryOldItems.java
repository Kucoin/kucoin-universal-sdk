// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.withdrawal;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetWithdrawalHistoryOldItems {
  /** Currency */
  @JsonProperty("currency")
  private String currency;

  /** Database record creation time */
  @JsonProperty("createAt")
  private Integer createAt;

  /** Withdrawal amount */
  @JsonProperty("amount")
  private String amount;

  /** Withdrawal address */
  @JsonProperty("address")
  private String address;

  /** Wallet Txid */
  @JsonProperty("walletTxId")
  private String walletTxId;

  /** Internal deposit or not */
  @JsonProperty("isInner")
  private Boolean isInner;

  /** Status */
  @JsonProperty("status")
  private StatusEnum status;

  public enum StatusEnum {
    /** */
    PROCESSING("PROCESSING"),
    /** */
    SUCCESS("SUCCESS"),
    /** */
    FAILURE("FAILURE");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
