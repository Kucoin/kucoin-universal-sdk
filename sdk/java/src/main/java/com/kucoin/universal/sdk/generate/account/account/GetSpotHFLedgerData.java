// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.account;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetSpotHFLedgerData {
  /** Unique ID */
  @JsonProperty("id")
  private String id;

  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** Change in funds balance */
  @JsonProperty("amount")
  private String amount;

  /** Transaction, Deposit or withdrawal fee */
  @JsonProperty("fee")
  private String fee;

  /** */
  @JsonProperty("tax")
  private String tax;

  /** Total balance of funds after change */
  @JsonProperty("balance")
  private String balance;

  /** Master account type TRADE_HF */
  @JsonProperty("accountType")
  private String accountType;

  /** Trnasaction type, such as TRANSFER, TRADE_EXCHANGE, etc. */
  @JsonProperty("bizType")
  private String bizType;

  /** Direction of transfer (out or in) */
  @JsonProperty("direction")
  private DirectionEnum direction;

  /** Created time */
  @JsonProperty("createdAt")
  private String createdAt;

  /** Core transaction parameter */
  @JsonProperty("context")
  private String context;

  public enum DirectionEnum {
    /** */
    IN("in"),
    /** */
    OUT("out");

    private final String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
