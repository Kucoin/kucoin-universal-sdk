// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.margin.marginprivate;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class IsolatedMarginPositionEvent
    implements Response<IsolatedMarginPositionEvent, WsMessage> {
  /** Isolated margin symbol */
  @JsonProperty("tag")
  private String tag;

  /** Position status */
  @JsonProperty("status")
  private StatusEnum status;

  /** Status type */
  @JsonProperty("statusBizType")
  private StatusBizTypeEnum statusBizType;

  /** Accumulated principal */
  @JsonProperty("accumulatedPrincipal")
  private String accumulatedPrincipal;

  /** */
  @JsonProperty("changeAssets")
  private Map<String, IsolatedMarginPositionChangeAssetsValue> changeAssets = new HashMap<>();

  /** */
  @JsonProperty("timestamp")
  private Long timestamp;

  /** common response */
  @JsonIgnore private WsMessage commonResponse;

  @Override
  public void setCommonResponse(WsMessage response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, IsolatedMarginPositionEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback of(Callback callback) {
      return (msg, objectMapper) ->
          callback.onEvent(
              msg.getTopic(),
              msg.getSubject(),
              objectMapper.convertValue(msg.getData(), IsolatedMarginPositionEvent.class));
    }
  }

  public enum StatusEnum {
    /** Debt */
    DEBT("DEBT"),
    /** debt-free */
    CLEAR("CLEAR"),
    /** Borrowing */
    IN_BORROW("IN_BORROW"),
    /** Repayment in progress */
    IN_REPAY("IN_REPAY"),
    /** Position closing */
    IN_LIQUIDATION("IN_LIQUIDATION"),
    /** Automatically renewing */
    IN_AUTO_RENEW("IN_AUTO_RENEW");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StatusBizTypeEnum {
    /** Liquidation */
    FORCE_LIQUIDATION("FORCE_LIQUIDATION"),
    /** User borrow */
    USER_BORROW("USER_BORROW"),
    /** Trade auto borrow */
    TRADE_AUTO_BORROW("TRADE_AUTO_BORROW"),
    /** User reply */
    USER_REPAY("USER_REPAY"),
    /** Auto reply */
    AUTO_REPAY("AUTO_REPAY"),
    /** In debt */
    DEFAULT_DEBT("DEFAULT_DEBT"),
    /** No debt */
    DEFAULT_CLEAR("DEFAULT_CLEAR"),
    /** One click liquidation */
    ONE_CLICK_LIQUIDATION("ONE_CLICK_LIQUIDATION"),
    /** B2C interest settle liquidation */
    B2C_INTEREST_SETTLE_LIQUIDATION("B2C_INTEREST_SETTLE_LIQUIDATION"),
    /** Air drop liquidation */
    AIR_DROP_LIQUIDATION("AIR_DROP_LIQUIDATION");

    private final String value;

    StatusBizTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusBizTypeEnum fromValue(String value) {
      for (StatusBizTypeEnum b : StatusBizTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
