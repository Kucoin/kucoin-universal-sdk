// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetStopOrderListReq implements Request {
  /**
   * Symbol of the contract, Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-3470220)
   */
  @JsonProperty("symbol")
  private String symbol;

  /** buy or sell */
  @JsonProperty("side")
  private SideEnum side;

  /** limit, market */
  @JsonProperty("type")
  private TypeEnum type;

  /** Start time (milisecond) */
  @JsonProperty("startAt")
  private Long startAt;

  /** End time (milisecond) */
  @JsonProperty("endAt")
  private Long endAt;

  /** Current request page, The default currentPage is 1 */
  @JsonProperty("currentPage")
  private Integer currentPage;

  /** pageSize, The default pageSize is 50, The maximum cannot exceed 1000 */
  @JsonProperty("pageSize")
  @Builder.Default
  private Integer pageSize = 50;

  public enum SideEnum {
    /** */
    BUY("buy"),
    /** */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** */
    LIMIT("limit"),
    /** */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
