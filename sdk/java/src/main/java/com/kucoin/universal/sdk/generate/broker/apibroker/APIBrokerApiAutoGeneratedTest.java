package com.kucoin.universal.sdk.generate.broker.apibroker;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class APIBrokerApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** getRebase Request Get Broker Rebate /api/v1/broker/api/rebase/download */
  public static void testGetRebaseRequest() throws Exception {
    String data =
        "{\\\"begin\\\": \\\"20240610\\\", \\\"end\\\": \\\"20241010\\\", \\\"tradeType\\\":"
            + " \\\"1\\\"}";
    GetRebaseReq obj = mapper.readValue(data, GetRebaseReq.class);
  }

  /** getRebase Response Get Broker Rebate /api/v1/broker/api/rebase/download */
  public static void testGetRebaseResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"url\\\":"
            + " \\\"https://kc-v2-promotion.s3.ap-northeast-1.amazonaws.com/broker/671aec522593f600019766d0_file.csv?X-Amz-Security-Token=IQo*********2cd90f14efb\\\"\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetRebaseResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetRebaseResp>>() {});
  }

  public static void runAllTests() {
    run(APIBrokerApiAutoGeneratedTest::testGetRebaseRequest, "testGetRebaseRequest");
    run(APIBrokerApiAutoGeneratedTest::testGetRebaseResponse, "testGetRebaseResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
