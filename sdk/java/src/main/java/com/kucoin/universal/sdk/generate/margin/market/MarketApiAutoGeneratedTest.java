package com.kucoin.universal.sdk.generate.margin.market;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class MarketApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** getCrossMarginSymbols Request Get Symbols - Cross Margin /api/v3/margin/symbols */
  public static void testGetCrossMarginSymbolsRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"BTC-USDT\\\"}";
    GetCrossMarginSymbolsReq obj = mapper.readValue(data, GetCrossMarginSymbolsReq.class);
  }

  /** getCrossMarginSymbols Response Get Symbols - Cross Margin /api/v3/margin/symbols */
  public static void testGetCrossMarginSymbolsResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"timestamp\\\": 1729665839353,\\n"
            + "        \\\"items\\\": [\\n"
            + "            {\\n"
            + "                \\\"symbol\\\": \\\"BTC-USDT\\\",\\n"
            + "                \\\"name\\\": \\\"BTC-USDT\\\",\\n"
            + "                \\\"enableTrading\\\": true,\\n"
            + "                \\\"market\\\": \\\"USDS\\\",\\n"
            + "                \\\"baseCurrency\\\": \\\"BTC\\\",\\n"
            + "                \\\"quoteCurrency\\\": \\\"USDT\\\",\\n"
            + "                \\\"baseIncrement\\\": \\\"0.00000001\\\",\\n"
            + "                \\\"baseMinSize\\\": \\\"0.00001\\\",\\n"
            + "                \\\"baseMaxSize\\\": \\\"10000000000\\\",\\n"
            + "                \\\"quoteIncrement\\\": \\\"0.000001\\\",\\n"
            + "                \\\"quoteMinSize\\\": \\\"0.1\\\",\\n"
            + "                \\\"quoteMaxSize\\\": \\\"99999999\\\",\\n"
            + "                \\\"priceIncrement\\\": \\\"0.1\\\",\\n"
            + "                \\\"feeCurrency\\\": \\\"USDT\\\",\\n"
            + "                \\\"priceLimitRate\\\": \\\"0.1\\\",\\n"
            + "                \\\"minFunds\\\": \\\"0.1\\\"\\n"
            + "            }\\n"
            + "        ]\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetCrossMarginSymbolsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetCrossMarginSymbolsResp>>() {});
  }

  /** getETFInfo Request Get ETF Info /api/v3/etf/info */
  public static void testGetETFInfoRequest() throws Exception {
    String data = "{\\\"currency\\\": \\\"BTCUP\\\"}";
    GetETFInfoReq obj = mapper.readValue(data, GetETFInfoReq.class);
  }

  /** getETFInfo Response Get ETF Info /api/v3/etf/info */
  public static void testGetETFInfoResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": [\\n"
            + "        {\\n"
            + "            \\\"currency\\\": \\\"BTCUP\\\",\\n"
            + "            \\\"netAsset\\\": \\\"33.846\\\",\\n"
            + "            \\\"targetLeverage\\\": \\\"2-4\\\",\\n"
            + "            \\\"actualLeverage\\\": \\\"2.1648\\\",\\n"
            + "            \\\"issuedSize\\\": \\\"107134.87655291\\\",\\n"
            + "            \\\"basket\\\": \\\"118.324559 XBTUSDTM\\\"\\n"
            + "        }\\n"
            + "    ]\\n"
            + "}";
    RestResponse<GetETFInfoResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetETFInfoResp>>() {});
  }

  /** getMarkPriceDetail Request Get Mark Price Detail /api/v1/mark-price/{symbol}/current */
  public static void testGetMarkPriceDetailRequest() throws Exception {
    String data = "{\\\"symbol\\\": \\\"USDT-BTC\\\"}";
    GetMarkPriceDetailReq obj = mapper.readValue(data, GetMarkPriceDetailReq.class);
  }

  /** getMarkPriceDetail Response Get Mark Price Detail /api/v1/mark-price/{symbol}/current */
  public static void testGetMarkPriceDetailResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"symbol\\\": \\\"USDT-BTC\\\",\\n"
            + "        \\\"timePoint\\\": 1729676888000,\\n"
            + "        \\\"value\\\": 1.5045E-5\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetMarkPriceDetailResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarkPriceDetailResp>>() {});
  }

  /** getMarginConfig Request Get Margin Config /api/v1/margin/config */
  public static void testGetMarginConfigRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getMarginConfig Response Get Margin Config /api/v1/margin/config */
  public static void testGetMarginConfigResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": {\\n"
            + "        \\\"maxLeverage\\\": 5,\\n"
            + "        \\\"warningDebtRatio\\\": \\\"0.95\\\",\\n"
            + "        \\\"liqDebtRatio\\\": \\\"0.97\\\",\\n"
            + "        \\\"currencyList\\\": [\\n"
            + "            \\\"VRA\\\",\\n"
            + "            \\\"APT\\\",\\n"
            + "            \\\"IOTX\\\",\\n"
            + "            \\\"SHIB\\\",\\n"
            + "            \\\"KDA\\\",\\n"
            + "            \\\"BCHSV\\\",\\n"
            + "            \\\"NEAR\\\",\\n"
            + "            \\\"CLV\\\",\\n"
            + "            \\\"AUDIO\\\",\\n"
            + "            \\\"AIOZ\\\",\\n"
            + "            \\\"FLOW\\\",\\n"
            + "            \\\"WLD\\\",\\n"
            + "            \\\"COMP\\\",\\n"
            + "            \\\"MEME\\\",\\n"
            + "            \\\"SLP\\\",\\n"
            + "            \\\"STX\\\",\\n"
            + "            \\\"ZRO\\\",\\n"
            + "            \\\"QI\\\",\\n"
            + "            \\\"PYTH\\\",\\n"
            + "            \\\"RUNE\\\",\\n"
            + "            \\\"DGB\\\",\\n"
            + "            \\\"IOST\\\",\\n"
            + "            \\\"SUI\\\",\\n"
            + "            \\\"BCH\\\",\\n"
            + "            \\\"CAKE\\\",\\n"
            + "            \\\"DOT\\\",\\n"
            + "            \\\"OMG\\\",\\n"
            + "            \\\"POL\\\",\\n"
            + "            \\\"GMT\\\",\\n"
            + "            \\\"1INCH\\\",\\n"
            + "            \\\"RSR\\\",\\n"
            + "            \\\"NKN\\\",\\n"
            + "            \\\"BTC\\\",\\n"
            + "            \\\"AR\\\",\\n"
            + "            \\\"ARB\\\",\\n"
            + "            \\\"TON\\\",\\n"
            + "            \\\"LISTA\\\",\\n"
            + "            \\\"AVAX\\\",\\n"
            + "            \\\"SEI\\\",\\n"
            + "            \\\"FTM\\\",\\n"
            + "            \\\"ERN\\\",\\n"
            + "            \\\"BB\\\",\\n"
            + "            \\\"BTT\\\",\\n"
            + "            \\\"JTO\\\",\\n"
            + "            \\\"ONE\\\",\\n"
            + "            \\\"RLC\\\",\\n"
            + "            \\\"ANKR\\\",\\n"
            + "            \\\"SUSHI\\\",\\n"
            + "            \\\"CATI\\\",\\n"
            + "            \\\"ALGO\\\",\\n"
            + "            \\\"PEPE2\\\",\\n"
            + "            \\\"ATOM\\\",\\n"
            + "            \\\"LPT\\\",\\n"
            + "            \\\"BIGTIME\\\",\\n"
            + "            \\\"CFX\\\",\\n"
            + "            \\\"DYM\\\",\\n"
            + "            \\\"VELO\\\",\\n"
            + "            \\\"XPR\\\",\\n"
            + "            \\\"SNX\\\",\\n"
            + "            \\\"JUP\\\",\\n"
            + "            \\\"MANA\\\",\\n"
            + "            \\\"API3\\\",\\n"
            + "            \\\"PYR\\\",\\n"
            + "            \\\"ROSE\\\",\\n"
            + "            \\\"GLMR\\\",\\n"
            + "            \\\"SATS\\\",\\n"
            + "            \\\"TIA\\\",\\n"
            + "            \\\"GALAX\\\",\\n"
            + "            \\\"SOL\\\",\\n"
            + "            \\\"DAO\\\",\\n"
            + "            \\\"FET\\\",\\n"
            + "            \\\"ETC\\\",\\n"
            + "            \\\"MKR\\\",\\n"
            + "            \\\"WOO\\\",\\n"
            + "            \\\"DODO\\\",\\n"
            + "            \\\"OGN\\\",\\n"
            + "            \\\"BNB\\\",\\n"
            + "            \\\"ICP\\\",\\n"
            + "            \\\"BLUR\\\",\\n"
            + "            \\\"ETH\\\",\\n"
            + "            \\\"ZEC\\\",\\n"
            + "            \\\"NEO\\\",\\n"
            + "            \\\"CELO\\\",\\n"
            + "            \\\"REN\\\",\\n"
            + "            \\\"MANTA\\\",\\n"
            + "            \\\"LRC\\\",\\n"
            + "            \\\"STRK\\\",\\n"
            + "            \\\"ADA\\\",\\n"
            + "            \\\"STORJ\\\",\\n"
            + "            \\\"REQ\\\",\\n"
            + "            \\\"TAO\\\",\\n"
            + "            \\\"VET\\\",\\n"
            + "            \\\"FITFI\\\",\\n"
            + "            \\\"USDT\\\",\\n"
            + "            \\\"DOGE\\\",\\n"
            + "            \\\"HBAR\\\",\\n"
            + "            \\\"SXP\\\",\\n"
            + "            \\\"NEIROCTO\\\",\\n"
            + "            \\\"CHR\\\",\\n"
            + "            \\\"ORDI\\\",\\n"
            + "            \\\"DASH\\\",\\n"
            + "            \\\"PEPE\\\",\\n"
            + "            \\\"ONDO\\\",\\n"
            + "            \\\"ILV\\\",\\n"
            + "            \\\"WAVES\\\",\\n"
            + "            \\\"CHZ\\\",\\n"
            + "            \\\"DOGS\\\",\\n"
            + "            \\\"XRP\\\",\\n"
            + "            \\\"CTSI\\\",\\n"
            + "            \\\"JASMY\\\",\\n"
            + "            \\\"FLOKI\\\",\\n"
            + "            \\\"TRX\\\",\\n"
            + "            \\\"KAVA\\\",\\n"
            + "            \\\"SAND\\\",\\n"
            + "            \\\"C98\\\",\\n"
            + "            \\\"UMA\\\",\\n"
            + "            \\\"NOT\\\",\\n"
            + "            \\\"IMX\\\",\\n"
            + "            \\\"WIF\\\",\\n"
            + "            \\\"ENA\\\",\\n"
            + "            \\\"EGLD\\\",\\n"
            + "            \\\"BOME\\\",\\n"
            + "            \\\"LTC\\\",\\n"
            + "            \\\"USDC\\\",\\n"
            + "            \\\"METIS\\\",\\n"
            + "            \\\"WIN\\\",\\n"
            + "            \\\"THETA\\\",\\n"
            + "            \\\"FXS\\\",\\n"
            + "            \\\"ENJ\\\",\\n"
            + "            \\\"CRO\\\",\\n"
            + "            \\\"AEVO\\\",\\n"
            + "            \\\"INJ\\\",\\n"
            + "            \\\"LTO\\\",\\n"
            + "            \\\"CRV\\\",\\n"
            + "            \\\"GRT\\\",\\n"
            + "            \\\"DYDX\\\",\\n"
            + "            \\\"FLUX\\\",\\n"
            + "            \\\"ENS\\\",\\n"
            + "            \\\"WAX\\\",\\n"
            + "            \\\"MASK\\\",\\n"
            + "            \\\"POND\\\",\\n"
            + "            \\\"UNI\\\",\\n"
            + "            \\\"AAVE\\\",\\n"
            + "            \\\"LINA\\\",\\n"
            + "            \\\"TLM\\\",\\n"
            + "            \\\"BONK\\\",\\n"
            + "            \\\"QNT\\\",\\n"
            + "            \\\"LDO\\\",\\n"
            + "            \\\"ALICE\\\",\\n"
            + "            \\\"XLM\\\",\\n"
            + "            \\\"LINK\\\",\\n"
            + "            \\\"CKB\\\",\\n"
            + "            \\\"LUNC\\\",\\n"
            + "            \\\"YFI\\\",\\n"
            + "            \\\"ETHW\\\",\\n"
            + "            \\\"XTZ\\\",\\n"
            + "            \\\"LUNA\\\",\\n"
            + "            \\\"OP\\\",\\n"
            + "            \\\"SUPER\\\",\\n"
            + "            \\\"EIGEN\\\",\\n"
            + "            \\\"KSM\\\",\\n"
            + "            \\\"ELON\\\",\\n"
            + "            \\\"EOS\\\",\\n"
            + "            \\\"FIL\\\",\\n"
            + "            \\\"ZETA\\\",\\n"
            + "            \\\"SKL\\\",\\n"
            + "            \\\"BAT\\\",\\n"
            + "            \\\"APE\\\",\\n"
            + "            \\\"HMSTR\\\",\\n"
            + "            \\\"YGG\\\",\\n"
            + "            \\\"MOVR\\\",\\n"
            + "            \\\"PEOPLE\\\",\\n"
            + "            \\\"KCS\\\",\\n"
            + "            \\\"AXS\\\",\\n"
            + "            \\\"ARPA\\\",\\n"
            + "            \\\"ZIL\\\"\\n"
            + "        ]\\n"
            + "    }\\n"
            + "}";
    RestResponse<GetMarginConfigResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarginConfigResp>>() {});
  }

  /** getMarkPriceList Request Get Mark Price List /api/v3/mark-price/all-symbols */
  public static void testGetMarkPriceListRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getMarkPriceList Response Get Mark Price List /api/v3/mark-price/all-symbols */
  public static void testGetMarkPriceListResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": [\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"USDT-BTC\\\",\\n"
            + "            \\\"timePoint\\\": 1729676522000,\\n"
            + "            \\\"value\\\": 1.504E-5\\n"
            + "        },\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"USDC-BTC\\\",\\n"
            + "            \\\"timePoint\\\": 1729676522000,\\n"
            + "            \\\"value\\\": 1.5049024E-5\\n"
            + "        }\\n"
            + "    ]\\n"
            + "}";
    RestResponse<GetMarkPriceListResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarkPriceListResp>>() {});
  }

  /** getIsolatedMarginSymbols Request Get Symbols - Isolated Margin /api/v1/isolated/symbols */
  public static void testGetIsolatedMarginSymbolsRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getIsolatedMarginSymbols Response Get Symbols - Isolated Margin /api/v1/isolated/symbols */
  public static void testGetIsolatedMarginSymbolsResponse() throws Exception {
    String data =
        "{\\n"
            + "    \\\"code\\\": \\\"200000\\\",\\n"
            + "    \\\"data\\\": [\\n"
            + "        {\\n"
            + "            \\\"symbol\\\": \\\"BTC-USDT\\\",\\n"
            + "            \\\"symbolName\\\": \\\"BTC-USDT\\\",\\n"
            + "            \\\"baseCurrency\\\": \\\"BTC\\\",\\n"
            + "            \\\"quoteCurrency\\\": \\\"USDT\\\",\\n"
            + "            \\\"maxLeverage\\\": 10,\\n"
            + "            \\\"flDebtRatio\\\": \\\"0.97\\\",\\n"
            + "            \\\"tradeEnable\\\": true,\\n"
            + "            \\\"autoRenewMaxDebtRatio\\\": \\\"0.96\\\",\\n"
            + "            \\\"baseBorrowEnable\\\": true,\\n"
            + "            \\\"quoteBorrowEnable\\\": true,\\n"
            + "            \\\"baseTransferInEnable\\\": true,\\n"
            + "            \\\"quoteTransferInEnable\\\": true,\\n"
            + "            \\\"baseBorrowCoefficient\\\": \\\"1\\\",\\n"
            + "            \\\"quoteBorrowCoefficient\\\": \\\"1\\\"\\n"
            + "        }\\n"
            + "    ]\\n"
            + "}";
    RestResponse<GetIsolatedMarginSymbolsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetIsolatedMarginSymbolsResp>>() {});
  }

  public static void runAllTests() {
    run(
        MarketApiAutoGeneratedTest::testGetCrossMarginSymbolsRequest,
        "testGetCrossMarginSymbolsRequest");
    run(
        MarketApiAutoGeneratedTest::testGetCrossMarginSymbolsResponse,
        "testGetCrossMarginSymbolsResponse");
    run(MarketApiAutoGeneratedTest::testGetETFInfoRequest, "testGetETFInfoRequest");
    run(MarketApiAutoGeneratedTest::testGetETFInfoResponse, "testGetETFInfoResponse");
    run(MarketApiAutoGeneratedTest::testGetMarkPriceDetailRequest, "testGetMarkPriceDetailRequest");
    run(
        MarketApiAutoGeneratedTest::testGetMarkPriceDetailResponse,
        "testGetMarkPriceDetailResponse");
    run(MarketApiAutoGeneratedTest::testGetMarginConfigRequest, "testGetMarginConfigRequest");
    run(MarketApiAutoGeneratedTest::testGetMarginConfigResponse, "testGetMarginConfigResponse");
    run(MarketApiAutoGeneratedTest::testGetMarkPriceListRequest, "testGetMarkPriceListRequest");
    run(MarketApiAutoGeneratedTest::testGetMarkPriceListResponse, "testGetMarkPriceListResponse");
    run(
        MarketApiAutoGeneratedTest::testGetIsolatedMarginSymbolsRequest,
        "testGetIsolatedMarginSymbolsRequest");
    run(
        MarketApiAutoGeneratedTest::testGetIsolatedMarginSymbolsResponse,
        "testGetIsolatedMarginSymbolsResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
