// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.account;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetFuturesAccountResp
    implements Response<GetFuturesAccountResp, RestResponse<GetFuturesAccountResp>> {
  /** Account equity = marginBalance + unrealizedPNL */
  @JsonProperty("accountEquity")
  private Double accountEquity;

  /** Unrealized profit and loss */
  @JsonProperty("unrealisedPNL")
  private Double unrealisedPNL;

  /**
   * Margin balance = positionMargin + orderMargin + frozenFunds + availableBalance - unrealizedPNL
   */
  @JsonProperty("marginBalance")
  private Double marginBalance;

  /** Position margin */
  @JsonProperty("positionMargin")
  private Double positionMargin;

  /** Order margin */
  @JsonProperty("orderMargin")
  private Double orderMargin;

  /** Frozen funds for out-transfer */
  @JsonProperty("frozenFunds")
  private Double frozenFunds;

  /** Available balance */
  @JsonProperty("availableBalance")
  private Double availableBalance;

  /** Currency */
  @JsonProperty("currency")
  private String currency;

  /** Cross margin risk rate */
  @JsonProperty("riskRatio")
  private Double riskRatio;

  /** Maximum amount that can be withdrawn/transferred. */
  @JsonProperty("maxWithdrawAmount")
  private Double maxWithdrawAmount;

  /** common response */
  @JsonIgnore private RestResponse<GetFuturesAccountResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<GetFuturesAccountResp> response) {
    this.commonResponse = response;
  }
}
