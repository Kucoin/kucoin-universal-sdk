// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.margin.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetClosedOrdersItems {
  /** The unique order id generated by the trading system */
  @JsonProperty("id")
  private String id;

  /** symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** */
  @JsonProperty("opType")
  private String opType;

  /** Specify if the order is a 'limit' order or 'market' order. */
  @JsonProperty("type")
  private TypeEnum type;

  /** Buy or sell */
  @JsonProperty("side")
  private String side;

  /** Order Price */
  @JsonProperty("price")
  private String price;

  /** Order Size */
  @JsonProperty("size")
  private String size;

  /** Order Funds */
  @JsonProperty("funds")
  private String funds;

  /** Number of filled transactions */
  @JsonProperty("dealSize")
  private String dealSize;

  /** Funds of filled transactions */
  @JsonProperty("dealFunds")
  private String dealFunds;

  /** [Handling fees](https://www.kucoin.com/docs-new/api-5327739) */
  @JsonProperty("fee")
  private String fee;

  /** Currency used to calculate trading fee */
  @JsonProperty("feeCurrency")
  private String feeCurrency;

  /**
   * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into these
   * strategies: CN, CO, CB , and DC
   */
  @JsonProperty("stp")
  private StpEnum stp;

  /** */
  @JsonProperty("stop")
  private String stop;

  /** */
  @JsonProperty("stopTriggered")
  private Boolean stopTriggered;

  /** */
  @JsonProperty("stopPrice")
  private String stopPrice;

  /** Time in force */
  @JsonProperty("timeInForce")
  private TimeInForceEnum timeInForce;

  /** Whether it’s a postOnly order. */
  @JsonProperty("postOnly")
  private Boolean postOnly;

  /** Whether it’s a hidden order. */
  @JsonProperty("hidden")
  private Boolean hidden;

  /** Whether it’s a iceberg order. */
  @JsonProperty("iceberg")
  private Boolean iceberg;

  /** Visible size of iceberg order in order book. */
  @JsonProperty("visibleSize")
  private String visibleSize;

  /** A GTT timeInForce that expires in n seconds */
  @JsonProperty("cancelAfter")
  private Integer cancelAfter;

  /** */
  @JsonProperty("channel")
  private String channel;

  /** Client Order Id, unique identifier created by the user */
  @JsonProperty("clientOid")
  private String clientOid;

  /** Order placement remarks */
  @JsonProperty("remark")
  private String remark;

  /** Order tag */
  @JsonProperty("tags")
  private String tags;

  /** Whether there is a cancellation record for the order. */
  @JsonProperty("cancelExist")
  private Boolean cancelExist;

  /** */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** */
  @JsonProperty("lastUpdatedAt")
  private Long lastUpdatedAt;

  /** Trade type, redundancy param */
  @JsonProperty("tradeType")
  private String tradeType;

  /**
   * Whether to enter the orderbook: True: enter the orderbook; False: do not enter the orderbook
   */
  @JsonProperty("inOrderBook")
  private Boolean inOrderBook;

  /** Number of canceled transactions */
  @JsonProperty("cancelledSize")
  private String cancelledSize;

  /** Funds of canceled transactions */
  @JsonProperty("cancelledFunds")
  private String cancelledFunds;

  /** Number of remain transactions */
  @JsonProperty("remainSize")
  private String remainSize;

  /** Funds of remain transactions */
  @JsonProperty("remainFunds")
  private String remainFunds;

  /** Users in some regions have this field */
  @JsonProperty("tax")
  private String tax;

  /** Order status: true-The status of the order is active; false-The status of the order is done */
  @JsonProperty("active")
  private Boolean active;

  public enum TypeEnum {
    /** */
    LIMIT("limit"),
    /** */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StpEnum {
    /** */
    DC("DC"),
    /** */
    CO("CO"),
    /** */
    CN("CN"),
    /** */
    CB("CB");

    private final String value;

    StpEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StpEnum fromValue(String value) {
      for (StpEnum b : StpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TimeInForceEnum {
    /** */
    GTC("GTC"),
    /** */
    GTT("GTT"),
    /** */
    IOC("IOC"),
    /** */
    FOK("FOK");

    private final String value;

    TimeInForceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TimeInForceEnum fromValue(String value) {
      for (TimeInForceEnum b : TimeInForceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
