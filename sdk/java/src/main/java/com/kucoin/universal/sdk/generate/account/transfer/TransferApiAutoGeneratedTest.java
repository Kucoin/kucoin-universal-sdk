package com.kucoin.universal.sdk.generate.account.transfer;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class TransferApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** getTransferQuotas Request Get Transfer Quotas /api/v1/accounts/transferable */
  public static void testGetTransferQuotasRequest() throws Exception {
    String data = "{\"currency\": \"BTC\", \"type\": \"MAIN\", \"tag\": \"ETH-USDT\"}";
    GetTransferQuotasReq obj = mapper.readValue(data, GetTransferQuotasReq.class);
  }

  /** getTransferQuotas Response Get Transfer Quotas /api/v1/accounts/transferable */
  public static void testGetTransferQuotasResponse() throws Exception {
    String data =
        "{\"code\":\"200000\",\"data\":{\"currency\":\"USDT\",\"balance\":\"10.5\",\"available\":\"10.5\",\"holds\":\"0\",\"transferable\":\"10.5\"}}";
    RestResponse<GetTransferQuotasResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetTransferQuotasResp>>() {});
  }

  /** flexTransfer Request Flex Transfer /api/v3/accounts/universal-transfer */
  public static void testFlexTransferRequest() throws Exception {
    String data =
        "{\"clientOid\": \"64ccc0f164781800010d8c09\", \"type\": \"PARENT_TO_SUB\", \"currency\":"
            + " \"USDT\", \"amount\": \"0.01\", \"fromAccountType\": \"TRADE\", \"toUserId\":"
            + " \"63743f07e0c5230001761d08\", \"toAccountType\": \"TRADE\"}";
    FlexTransferReq obj = mapper.readValue(data, FlexTransferReq.class);
  }

  /** flexTransfer Response Flex Transfer /api/v3/accounts/universal-transfer */
  public static void testFlexTransferResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderId\": \"6705f7248c6954000733ecac\"\n"
            + "    }\n"
            + "}";
    RestResponse<FlexTransferResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<FlexTransferResp>>() {});
  }

  /** subAccountTransfer Request Sub-account Transfer /api/v2/accounts/sub-transfer */
  public static void testSubAccountTransferRequest() throws Exception {
    String data =
        "{\"clientOid\": \"64ccc0f164781800010d8c09\", \"currency\": \"USDT\", \"amount\":"
            + " \"0.01\", \"direction\": \"OUT\", \"accountType\": \"MAIN\", \"subAccountType\":"
            + " \"MAIN\", \"subUserId\": \"63743f07e0c5230001761d08\"}";
    SubAccountTransferReq obj = mapper.readValue(data, SubAccountTransferReq.class);
  }

  /** subAccountTransfer Response Sub-account Transfer /api/v2/accounts/sub-transfer */
  public static void testSubAccountTransferResponse() throws Exception {
    String data = "{\"code\":\"200000\",\"data\":{\"orderId\":\"670be6b0b1b9080007040a9b\"}}";
    RestResponse<SubAccountTransferResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<SubAccountTransferResp>>() {});
  }

  /** innerTransfer Request Internal Transfer /api/v2/accounts/inner-transfer */
  public static void testInnerTransferRequest() throws Exception {
    String data =
        "{\"clientOid\": \"64ccc0f164781800010d8c09\", \"currency\": \"USDT\", \"amount\":"
            + " \"0.01\", \"from\": \"main\", \"to\": \"trade\"}";
    InnerTransferReq obj = mapper.readValue(data, InnerTransferReq.class);
  }

  /** innerTransfer Response Internal Transfer /api/v2/accounts/inner-transfer */
  public static void testInnerTransferResponse() throws Exception {
    String data = "{\"code\":\"200000\",\"data\":{\"orderId\":\"670beb3482a1bb0007dec644\"}}";
    RestResponse<InnerTransferResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<InnerTransferResp>>() {});
  }

  /**
   * getFuturesAccountTransferOutLedger Request Get Futures Account Transfer Out Ledger
   * /api/v1/transfer-list
   */
  public static void testGetFuturesAccountTransferOutLedgerRequest() throws Exception {
    String data =
        "{\"currency\": \"XBT\", \"type\": \"MAIN\", \"tag\": [\"mock_a\", \"mock_b\"],"
            + " \"startAt\": 1728663338000, \"endAt\": 1728692138000, \"currentPage\": 1,"
            + " \"pageSize\": 50}";
    GetFuturesAccountTransferOutLedgerReq obj =
        mapper.readValue(data, GetFuturesAccountTransferOutLedgerReq.class);
  }

  /**
   * getFuturesAccountTransferOutLedger Response Get Futures Account Transfer Out Ledger
   * /api/v1/transfer-list
   */
  public static void testGetFuturesAccountTransferOutLedgerResponse() throws Exception {
    String data =
        "{\"code\":\"200000\",\"data\":{\"currentPage\":1,\"pageSize\":50,\"totalNum\":1,\"totalPage\":1,\"items\":[{\"applyId\":\"670bf84c577f6c00017a1c48\",\"currency\":\"USDT\",\"recRemark\":\"\",\"recSystem\":\"KUCOIN\",\"status\":\"SUCCESS\",\"amount\":\"0.01\",\"reason\":\"\",\"offset\":1519769124134806,\"createdAt\":1728837708000,\"remark\":\"\"}]}}";
    RestResponse<GetFuturesAccountTransferOutLedgerResp> resp =
        mapper.readValue(
            data, new TypeReference<RestResponse<GetFuturesAccountTransferOutLedgerResp>>() {});
  }

  /** futuresAccountTransferOut Request Futures Account Transfer Out /api/v3/transfer-out */
  public static void testFuturesAccountTransferOutRequest() throws Exception {
    String data = "{\"currency\": \"USDT\", \"amount\": 0.01, \"recAccountType\": \"MAIN\"}";
    FuturesAccountTransferOutReq obj = mapper.readValue(data, FuturesAccountTransferOutReq.class);
  }

  /** futuresAccountTransferOut Response Futures Account Transfer Out /api/v3/transfer-out */
  public static void testFuturesAccountTransferOutResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"applyId\": \"670bf84c577f6c00017a1c48\",\n"
            + "        \"bizNo\": \"670bf84c577f6c00017a1c47\",\n"
            + "        \"payAccountType\": \"CONTRACT\",\n"
            + "        \"payTag\": \"DEFAULT\",\n"
            + "        \"remark\": \"\",\n"
            + "        \"recAccountType\": \"MAIN\",\n"
            + "        \"recTag\": \"DEFAULT\",\n"
            + "        \"recRemark\": \"\",\n"
            + "        \"recSystem\": \"KUCOIN\",\n"
            + "        \"status\": \"PROCESSING\",\n"
            + "        \"currency\": \"USDT\",\n"
            + "        \"amount\": \"0.01\",\n"
            + "        \"fee\": \"0\",\n"
            + "        \"sn\": 1519769124134806,\n"
            + "        \"reason\": \"\",\n"
            + "        \"createdAt\": 1728837708000,\n"
            + "        \"updatedAt\": 1728837708000\n"
            + "    }\n"
            + "}";
    RestResponse<FuturesAccountTransferOutResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<FuturesAccountTransferOutResp>>() {});
  }

  /** futuresAccountTransferIn Request Futures Account Transfer In /api/v1/transfer-in */
  public static void testFuturesAccountTransferInRequest() throws Exception {
    String data = "{\"currency\": \"USDT\", \"amount\": 0.01, \"payAccountType\": \"MAIN\"}";
    FuturesAccountTransferInReq obj = mapper.readValue(data, FuturesAccountTransferInReq.class);
  }

  /** futuresAccountTransferIn Response Futures Account Transfer In /api/v1/transfer-in */
  public static void testFuturesAccountTransferInResponse() throws Exception {
    String data = "{\"code\":\"200000\",\"data\":null}";
    RestResponse<FuturesAccountTransferInResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<FuturesAccountTransferInResp>>() {});
  }

  public static void runAllTests() {
    run(TransferApiAutoGeneratedTest::testGetTransferQuotasRequest, "testGetTransferQuotasRequest");
    run(
        TransferApiAutoGeneratedTest::testGetTransferQuotasResponse,
        "testGetTransferQuotasResponse");
    run(TransferApiAutoGeneratedTest::testFlexTransferRequest, "testFlexTransferRequest");
    run(TransferApiAutoGeneratedTest::testFlexTransferResponse, "testFlexTransferResponse");
    run(
        TransferApiAutoGeneratedTest::testSubAccountTransferRequest,
        "testSubAccountTransferRequest");
    run(
        TransferApiAutoGeneratedTest::testSubAccountTransferResponse,
        "testSubAccountTransferResponse");
    run(TransferApiAutoGeneratedTest::testInnerTransferRequest, "testInnerTransferRequest");
    run(TransferApiAutoGeneratedTest::testInnerTransferResponse, "testInnerTransferResponse");
    run(
        TransferApiAutoGeneratedTest::testGetFuturesAccountTransferOutLedgerRequest,
        "testGetFuturesAccountTransferOutLedgerRequest");
    run(
        TransferApiAutoGeneratedTest::testGetFuturesAccountTransferOutLedgerResponse,
        "testGetFuturesAccountTransferOutLedgerResponse");
    run(
        TransferApiAutoGeneratedTest::testFuturesAccountTransferOutRequest,
        "testFuturesAccountTransferOutRequest");
    run(
        TransferApiAutoGeneratedTest::testFuturesAccountTransferOutResponse,
        "testFuturesAccountTransferOutResponse");
    run(
        TransferApiAutoGeneratedTest::testFuturesAccountTransferInRequest,
        "testFuturesAccountTransferInRequest");
    run(
        TransferApiAutoGeneratedTest::testFuturesAccountTransferInResponse,
        "testFuturesAccountTransferInResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
