// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetClosedOrdersReq implements Request {
  /** symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** specify if the order is to 'buy' or 'sell' */
  @JsonProperty("side")
  private SideEnum side;

  /** specify if the order is an 'limit' order or 'market' order. */
  @JsonProperty("type")
  private TypeEnum type;

  /**
   * The id of the last set of data from the previous batch of data. By default, the latest
   * information is given. lastId is used to filter data and paginate. If lastId is not entered, the
   * default is a maximum of 100 returned data items. The return results include lastId，which can be
   * used as a query parameter to look up new data from the next page.
   */
  @JsonProperty("lastId")
  private Long lastId;

  /** Default20，Max100 */
  @JsonProperty("limit")
  @Builder.Default
  private Integer limit = 20;

  /** Start time (milisecond) */
  @JsonProperty("startAt")
  private Long startAt;

  /** End time (milisecond) */
  @JsonProperty("endAt")
  private Long endAt;

  public enum SideEnum {
    /** */
    BUY("buy"),
    /** */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** */
    LIMIT("limit"),
    /** */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
