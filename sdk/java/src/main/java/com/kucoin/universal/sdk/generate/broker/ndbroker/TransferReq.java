// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.broker.ndbroker;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class TransferReq implements Request {
  /** Currency */
  @JsonProperty("currency")
  private String currency;

  /** Transfer Amount (must be a positive integer in the currency's precision) */
  @JsonProperty("amount")
  private String amount;

  /**
   * Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker
   * sub-account is transferred to Broker account)
   */
  @JsonProperty("direction")
  private DirectionEnum direction;

  /** Broker account types: MAIN (Funding account), TRADE (Spot trading account) */
  @JsonProperty("accountType")
  private AccountTypeEnum accountType;

  /** Broker sub-account UID, must be the Broker sub-account created by the current Broker user. */
  @JsonProperty("specialUid")
  private String specialUid;

  /** Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account) */
  @JsonProperty("specialAccountType")
  private SpecialAccountTypeEnum specialAccountType;

  /**
   * Client Order ID, the unique identifier created by the client. It is recommended to use UUID.
   * The maximum length is 128 bits.
   */
  @JsonProperty("clientOid")
  private String clientOid;

  public enum DirectionEnum {
    /** */
    OUT("OUT"),
    /** */
    IN("IN");

    private final String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum AccountTypeEnum {
    /** */
    MAIN("MAIN"),
    /** */
    TRADE("TRADE");

    private final String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SpecialAccountTypeEnum {
    /** */
    MAIN("MAIN"),
    /** */
    TRADE("TRADE");

    private final String value;

    SpecialAccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SpecialAccountTypeEnum fromValue(String value) {
      for (SpecialAccountTypeEnum b : SpecialAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
