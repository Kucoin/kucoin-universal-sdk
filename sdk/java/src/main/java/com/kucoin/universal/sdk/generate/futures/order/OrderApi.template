
    /**
    * addOrder
    * Add Order
    * /api/v1/orders
    */
    public void testAddOrder() {
        AddOrderReq.AddOrderReqBuilder builder = AddOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).leverage(?).type(?).remark(?).stop(?).stopPriceType(?).stopPrice(?).reduceOnly(?).closeOrder(?).forceHold(?).stp(?).marginMode(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).qty(?).valueQty(?);
        AddOrderReq req = builder.build();
        AddOrderResp resp = this.api.addOrder(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addOrderTest
    * Add Order Test
    * /api/v1/orders/test
    */
    public void testAddOrderTest() {
        AddOrderTestReq.AddOrderTestReqBuilder builder = AddOrderTestReq.builder();
        builder.clientOid(?).side(?).symbol(?).leverage(?).type(?).remark(?).stop(?).stopPriceType(?).stopPrice(?).reduceOnly(?).closeOrder(?).forceHold(?).stp(?).marginMode(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).qty(?).valueQty(?);
        AddOrderTestReq req = builder.build();
        AddOrderTestResp resp = this.api.addOrderTest(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchAddOrders
    * Batch Add Orders
    * /api/v1/orders/multi
    */
    public void testBatchAddOrders() {
        BatchAddOrdersReq.BatchAddOrdersReqBuilder builder = BatchAddOrdersReq.builder();
        builder.items(?);
        BatchAddOrdersReq req = builder.build();
        BatchAddOrdersResp resp = this.api.batchAddOrders(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->code);
            self::assertNotNull($item->msg);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addTPSLOrder
    * Add Take Profit And Stop Loss Order
    * /api/v1/st-orders
    */
    public void testAddTPSLOrder() {
        AddTPSLOrderReq.AddTPSLOrderReqBuilder builder = AddTPSLOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).leverage(?).type(?).remark(?).stopPriceType(?).reduceOnly(?).closeOrder(?).forceHold(?).stp(?).marginMode(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).triggerStopUpPrice(?).triggerStopDownPrice(?).qty(?).valueQty(?);
        AddTPSLOrderReq req = builder.build();
        AddTPSLOrderResp resp = this.api.addTPSLOrder(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderById
    * Cancel Order By OrderId
    * /api/v1/orders/{orderId}
    */
    public void testCancelOrderById() {
        CancelOrderByIdReq.CancelOrderByIdReqBuilder builder = CancelOrderByIdReq.builder();
        builder.orderId(?);
        CancelOrderByIdReq req = builder.build();
        CancelOrderByIdResp resp = this.api.cancelOrderById(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByClientOid
    * Cancel Order By ClientOid
    * /api/v1/orders/client-order/{clientOid}
    */
    public void testCancelOrderByClientOid() {
        CancelOrderByClientOidReq.CancelOrderByClientOidReqBuilder builder = CancelOrderByClientOidReq.builder();
        builder.symbol(?).clientOid(?);
        CancelOrderByClientOidReq req = builder.build();
        CancelOrderByClientOidResp resp = this.api.cancelOrderByClientOid(req);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchCancelOrders
    * Batch Cancel Orders
    * /api/v1/orders/multi-cancel
    */
    public void testBatchCancelOrders() {
        BatchCancelOrdersReq.BatchCancelOrdersReqBuilder builder = BatchCancelOrdersReq.builder();
        builder.orderIdsList(?).clientOidsList(?);
        BatchCancelOrdersReq req = builder.build();
        BatchCancelOrdersResp resp = this.api.batchCancelOrders(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->code);
            self::assertNotNull($item->msg);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelAllOrdersV3
    * Cancel All Orders
    * /api/v3/orders
    */
    public void testCancelAllOrdersV3() {
        CancelAllOrdersV3Req.CancelAllOrdersV3ReqBuilder builder = CancelAllOrdersV3Req.builder();
        builder.symbol(?);
        CancelAllOrdersV3Req req = builder.build();
        CancelAllOrdersV3Resp resp = this.api.cancelAllOrdersV3(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelAllStopOrders
    * Cancel All Stop orders
    * /api/v1/stopOrders
    */
    public void testCancelAllStopOrders() {
        CancelAllStopOrdersReq.CancelAllStopOrdersReqBuilder builder = CancelAllStopOrdersReq.builder();
        builder.symbol(?);
        CancelAllStopOrdersReq req = builder.build();
        CancelAllStopOrdersResp resp = this.api.cancelAllStopOrders(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderByOrderId
    * Get Order By OrderId
    * /api/v1/orders/{order-id}
    */
    public void testGetOrderByOrderId() {
        GetOrderByOrderIdReq.GetOrderByOrderIdReqBuilder builder = GetOrderByOrderIdReq.builder();
        builder.orderId(?);
        GetOrderByOrderIdReq req = builder.build();
        GetOrderByOrderIdResp resp = this.api.getOrderByOrderId(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->value);
        self::assertNotNull($resp->dealValue);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->stop);
        self::assertNotNull($resp->stopPriceType);
        self::assertNotNull($resp->stopTriggered);
        self::assertNotNull($resp->stopPrice);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->leverage);
        self::assertNotNull($resp->forceHold);
        self::assertNotNull($resp->closeOrder);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->isActive);
        self::assertNotNull($resp->cancelExist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->updatedAt);
        self::assertNotNull($resp->endAt);
        self::assertNotNull($resp->orderTime);
        self::assertNotNull($resp->settleCurrency);
        self::assertNotNull($resp->marginMode);
        self::assertNotNull($resp->avgDealPrice);
        self::assertNotNull($resp->filledSize);
        self::assertNotNull($resp->filledValue);
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->reduceOnly);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderByClientOid
    * Get Order By ClientOid
    * /api/v1/orders/byClientOid
    */
    public void testGetOrderByClientOid() {
        GetOrderByClientOidReq.GetOrderByClientOidReqBuilder builder = GetOrderByClientOidReq.builder();
        builder.clientOid(?);
        GetOrderByClientOidReq req = builder.build();
        GetOrderByClientOidResp resp = this.api.getOrderByClientOid(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->value);
        self::assertNotNull($resp->dealValue);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->stop);
        self::assertNotNull($resp->stopPriceType);
        self::assertNotNull($resp->stopTriggered);
        self::assertNotNull($resp->stopPrice);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->leverage);
        self::assertNotNull($resp->forceHold);
        self::assertNotNull($resp->closeOrder);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->isActive);
        self::assertNotNull($resp->cancelExist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->updatedAt);
        self::assertNotNull($resp->endAt);
        self::assertNotNull($resp->orderTime);
        self::assertNotNull($resp->settleCurrency);
        self::assertNotNull($resp->marginMode);
        self::assertNotNull($resp->avgDealPrice);
        self::assertNotNull($resp->filledSize);
        self::assertNotNull($resp->filledValue);
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->reduceOnly);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderList
    * Get Order List
    * /api/v1/orders
    */
    public void testGetOrderList() {
        GetOrderListReq.GetOrderListReqBuilder builder = GetOrderListReq.builder();
        builder.status(?).symbol(?).side(?).type(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetOrderListReq req = builder.build();
        GetOrderListResp resp = this.api.getOrderList(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->value);
            self::assertNotNull($item->dealValue);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopPriceType);
            self::assertNotNull($item->stopTriggered);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->leverage);
            self::assertNotNull($item->forceHold);
            self::assertNotNull($item->closeOrder);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->isActive);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->updatedAt);
            self::assertNotNull($item->endAt);
            self::assertNotNull($item->orderTime);
            self::assertNotNull($item->settleCurrency);
            self::assertNotNull($item->marginMode);
            self::assertNotNull($item->avgDealPrice);
            self::assertNotNull($item->status);
            self::assertNotNull($item->filledSize);
            self::assertNotNull($item->filledValue);
            self::assertNotNull($item->reduceOnly);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getRecentClosedOrders
    * Get Recent Closed Orders
    * /api/v1/recentDoneOrders
    */
    public void testGetRecentClosedOrders() {
        GetRecentClosedOrdersReq.GetRecentClosedOrdersReqBuilder builder = GetRecentClosedOrdersReq.builder();
        builder.symbol(?);
        GetRecentClosedOrdersReq req = builder.build();
        GetRecentClosedOrdersResp resp = this.api.getRecentClosedOrders(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->value);
            self::assertNotNull($item->dealValue);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopPriceType);
            self::assertNotNull($item->stopTriggered);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->leverage);
            self::assertNotNull($item->forceHold);
            self::assertNotNull($item->closeOrder);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->isActive);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->updatedAt);
            self::assertNotNull($item->endAt);
            self::assertNotNull($item->orderTime);
            self::assertNotNull($item->settleCurrency);
            self::assertNotNull($item->marginMode);
            self::assertNotNull($item->avgDealPrice);
            self::assertNotNull($item->filledSize);
            self::assertNotNull($item->filledValue);
            self::assertNotNull($item->status);
            self::assertNotNull($item->reduceOnly);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getStopOrderList
    * Get Stop Order List
    * /api/v1/stopOrders
    */
    public void testGetStopOrderList() {
        GetStopOrderListReq.GetStopOrderListReqBuilder builder = GetStopOrderListReq.builder();
        builder.symbol(?).side(?).type(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetStopOrderListReq req = builder.build();
        GetStopOrderListResp resp = this.api.getStopOrderList(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->value);
            self::assertNotNull($item->dealValue);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopPriceType);
            self::assertNotNull($item->stopTriggered);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->leverage);
            self::assertNotNull($item->forceHold);
            self::assertNotNull($item->closeOrder);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->isActive);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->updatedAt);
            self::assertNotNull($item->endAt);
            self::assertNotNull($item->orderTime);
            self::assertNotNull($item->settleCurrency);
            self::assertNotNull($item->marginMode);
            self::assertNotNull($item->avgDealPrice);
            self::assertNotNull($item->filledSize);
            self::assertNotNull($item->filledValue);
            self::assertNotNull($item->status);
            self::assertNotNull($item->reduceOnly);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOpenOrderValue
    * Get Open Order Value
    * /api/v1/openOrderStatistics
    */
    public void testGetOpenOrderValue() {
        GetOpenOrderValueReq.GetOpenOrderValueReqBuilder builder = GetOpenOrderValueReq.builder();
        builder.symbol(?);
        GetOpenOrderValueReq req = builder.build();
        GetOpenOrderValueResp resp = this.api.getOpenOrderValue(req);
        self::assertNotNull($resp->openOrderBuySize);
        self::assertNotNull($resp->openOrderSellSize);
        self::assertNotNull($resp->openOrderBuyCost);
        self::assertNotNull($resp->openOrderSellCost);
        self::assertNotNull($resp->settleCurrency);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getRecentTradeHistory
    * Get Recent Trade History
    * /api/v1/recentFills
    */
    public void testGetRecentTradeHistory() {
        GetRecentTradeHistoryReq.GetRecentTradeHistoryReqBuilder builder = GetRecentTradeHistoryReq.builder();
        builder.symbol(?);
        GetRecentTradeHistoryReq req = builder.build();
        GetRecentTradeHistoryResp resp = this.api.getRecentTradeHistory(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->tradeId);
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->side);
            self::assertNotNull($item->liquidity);
            self::assertNotNull($item->forceTaker);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->value);
            self::assertNotNull($item->openFeePay);
            self::assertNotNull($item->closeFeePay);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->feeRate);
            self::assertNotNull($item->fixFee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->tradeTime);
            self::assertNotNull($item->subTradeType);
            self::assertNotNull($item->marginMode);
            self::assertNotNull($item->displayType);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->settleCurrency);
            self::assertNotNull($item->orderType);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->createdAt);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getTradeHistory
    * Get Trade History
    * /api/v1/fills
    */
    public void testGetTradeHistory() {
        GetTradeHistoryReq.GetTradeHistoryReqBuilder builder = GetTradeHistoryReq.builder();
        builder.orderId(?).symbol(?).side(?).type(?).tradeTypes(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetTradeHistoryReq req = builder.build();
        GetTradeHistoryResp resp = this.api.getTradeHistory(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->tradeId);
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->side);
            self::assertNotNull($item->liquidity);
            self::assertNotNull($item->forceTaker);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->value);
            self::assertNotNull($item->openFeePay);
            self::assertNotNull($item->closeFeePay);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->feeRate);
            self::assertNotNull($item->fixFee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->tradeTime);
            self::assertNotNull($item->subTradeType);
            self::assertNotNull($item->marginMode);
            self::assertNotNull($item->settleCurrency);
            self::assertNotNull($item->displayType);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->orderType);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->openFeeTaxPay);
            self::assertNotNull($item->closeFeeTaxPay);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelAllOrdersV1
    * Cancel All Orders - V1
    * /api/v1/orders
    */
    public void testCancelAllOrdersV1() {
        CancelAllOrdersV1Req.CancelAllOrdersV1ReqBuilder builder = CancelAllOrdersV1Req.builder();
        builder.symbol(?);
        CancelAllOrdersV1Req req = builder.build();
        CancelAllOrdersV1Resp resp = this.api.cancelAllOrdersV1(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

