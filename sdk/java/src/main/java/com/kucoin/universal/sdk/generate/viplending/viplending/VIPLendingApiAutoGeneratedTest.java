package com.kucoin.universal.sdk.generate.viplending.viplending;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class VIPLendingApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /**
   * getDiscountRateConfigs Request Get Discount Rate Configs /api/v1/otc-loan/discount-rate-configs
   */
  public static void testGetDiscountRateConfigsRequest() throws Exception {
    // pass
  }

  /**
   * getDiscountRateConfigs Response Get Discount Rate Configs
   * /api/v1/otc-loan/discount-rate-configs
   */
  public static void testGetDiscountRateConfigsResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"currency\": \"BTC\",\n"
            + "            \"usdtLevels\": [\n"
            + "                {\n"
            + "                    \"left\": 0,\n"
            + "                    \"right\": 20000000,\n"
            + "                    \"discountRate\": \"1.00000000\"\n"
            + "                },\n"
            + "                {\n"
            + "                    \"left\": 20000000,\n"
            + "                    \"right\": 50000000,\n"
            + "                    \"discountRate\": \"0.95000000\"\n"
            + "                },\n"
            + "                {\n"
            + "                    \"left\": 50000000,\n"
            + "                    \"right\": 100000000,\n"
            + "                    \"discountRate\": \"0.90000000\"\n"
            + "                },\n"
            + "                {\n"
            + "                    \"left\": 100000000,\n"
            + "                    \"right\": 300000000,\n"
            + "                    \"discountRate\": \"0.50000000\"\n"
            + "                },\n"
            + "                {\n"
            + "                    \"left\": 300000000,\n"
            + "                    \"right\": 99999999999,\n"
            + "                    \"discountRate\": \"0.00000000\"\n"
            + "                }\n"
            + "            ]\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetDiscountRateConfigsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetDiscountRateConfigsResp>>() {});
  }

  /** getLoanInfo Request Get Loan Info /api/v1/otc-loan/loan */
  public static void testGetLoanInfoRequest() throws Exception {
    // pass
  }

  /** getLoanInfo Response Get Loan Info /api/v1/otc-loan/loan */
  public static void testGetLoanInfoResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"parentUid\": \"1260004199\",\n"
            + "        \"orders\": [{\n"
            + "            \"orderId\": \"671a2be815f4140007a588e1\",\n"
            + "            \"principal\": \"100\",\n"
            + "            \"interest\": \"0\",\n"
            + "            \"currency\": \"USDT\"\n"
            + "        }],\n"
            + "        \"ltv\": {\n"
            + "            \"transferLtv\": \"0.6000\",\n"
            + "            \"onlyClosePosLtv\": \"0.7500\",\n"
            + "            \"delayedLiquidationLtv\": \"0.7500\",\n"
            + "            \"instantLiquidationLtv\": \"0.8000\",\n"
            + "            \"currentLtv\": \"0.1111\"\n"
            + "        },\n"
            + "        \"totalMarginAmount\": \"900.00000000\",\n"
            + "        \"transferMarginAmount\": \"166.66666666\",\n"
            + "        \"margins\": [{\n"
            + "            \"marginCcy\": \"USDT\",\n"
            + "            \"marginQty\": \"1000.00000000\",\n"
            + "            \"marginFactor\": \"0.9000000000\"\n"
            + "        }]\n"
            + "    }\n"
            + "}";
    RestResponse<GetLoanInfoResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetLoanInfoResp>>() {});
  }

  /** getAccounts Request Get Accounts /api/v1/otc-loan/accounts */
  public static void testGetAccountsRequest() throws Exception {
    // pass
  }

  /** getAccounts Response Get Accounts /api/v1/otc-loan/accounts */
  public static void testGetAccountsResponse() throws Exception {
    String data =
        "\n"
            + "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [{\n"
            + "        \"uid\": \"1260004199\",\n"
            + "        \"marginCcy\": \"USDT\",\n"
            + "        \"marginQty\": \"900\",\n"
            + "        \"marginFactor\": \"0.9000000000\",\n"
            + "        \"accountType\": \"TRADE\",\n"
            + "        \"isParent\": true\n"
            + "    }]\n"
            + "}";
    RestResponse<GetAccountsResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetAccountsResp>>() {});
  }

  public static void runAllTests() {
    run(
        VIPLendingApiAutoGeneratedTest::testGetDiscountRateConfigsRequest,
        "testGetDiscountRateConfigsRequest");
    run(
        VIPLendingApiAutoGeneratedTest::testGetDiscountRateConfigsResponse,
        "testGetDiscountRateConfigsResponse");
    run(VIPLendingApiAutoGeneratedTest::testGetLoanInfoRequest, "testGetLoanInfoRequest");
    run(VIPLendingApiAutoGeneratedTest::testGetLoanInfoResponse, "testGetLoanInfoResponse");
    run(VIPLendingApiAutoGeneratedTest::testGetAccountsRequest, "testGetAccountsRequest");
    run(VIPLendingApiAutoGeneratedTest::testGetAccountsResponse, "testGetAccountsResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
