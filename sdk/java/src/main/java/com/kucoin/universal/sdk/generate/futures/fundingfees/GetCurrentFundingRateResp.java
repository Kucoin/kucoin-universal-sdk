// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.fundingfees;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetCurrentFundingRateResp
    implements Response<GetCurrentFundingRateResp, RestResponse<GetCurrentFundingRateResp>> {
  /** Funding Rate Symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** Granularity (milliseconds) */
  @JsonProperty("granularity")
  private Integer granularity;

  /**
   * The funding rate settlement time point of the previous cycle (milliseconds) Before going live,
   * the system will pre-generate the first funding rate record to ensure the billing cycle can
   * start immediately after the contract is launched. The timePoint field represents the time the
   * funding rate data was generated, not the actual time it takes effect or is settled. The first
   * actual settlement will occur at the designated settlement time (00:00 / 08:00 / 14:00) after
   * the contract goes live.
   */
  @JsonProperty("timePoint")
  private Long timePoint;

  /** Current cycle funding rate */
  @JsonProperty("value")
  private Double value;

  /** Predicted funding rate */
  @JsonProperty("predictedValue")
  private Double predictedValue;

  /** Maximum Funding Rate */
  @JsonProperty("fundingRateCap")
  private Double fundingRateCap;

  /** Minimum Funding Rate */
  @JsonProperty("fundingRateFloor")
  private Double fundingRateFloor;

  /** Indicates whether the current funding fee is charged within this cycle */
  @JsonProperty("period")
  private PeriodEnum period;

  /**
   * Indicates the next funding fee settlement time point, which can be used to synchronize periodic
   * settlement timing.
   */
  @JsonProperty("fundingTime")
  private Long fundingTime;

  /** common response */
  @JsonIgnore private RestResponse<GetCurrentFundingRateResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<GetCurrentFundingRateResp> response) {
    this.commonResponse = response;
  }

  public enum PeriodEnum {
    /** Indicates that funding will be charged in the current cycle */
    _1(1),
    /** Indicates a cross-cycle expense record that is not charged in the current cycle. */
    _0(0);

    private final Integer value;

    PeriodEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PeriodEnum fromValue(Integer value) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
