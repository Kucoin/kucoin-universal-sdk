// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.futuresprivate;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class CrossLeverageEvent
    implements Response<CrossLeverageEvent, WsMessage<CrossLeverageEvent>> {
  /** */
  @JsonProperty("data")
  private Map<String, CrossLeverageDataValue> data = new HashMap<>();

  /** common response */
  @JsonIgnore private WsMessage<CrossLeverageEvent> commonResponse;

  @Override
  public void setCommonResponse(WsMessage<CrossLeverageEvent> response) {
    this.commonResponse = response;
  }

  @JsonCreator
  public static CrossLeverageEvent fromJson(Map<String, CrossLeverageDataValue> data) {
    // original response
    CrossLeverageEvent obj = new CrossLeverageEvent();
    obj.data = data;
    return obj;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, CrossLeverageEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback<CrossLeverageEvent> of(Callback callback) {
      return msg -> callback.onEvent(msg.getTopic(), msg.getSubject(), msg.getData());
    }
  }
}
