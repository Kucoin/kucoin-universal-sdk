// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.account;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetIsolatedMarginAccountReq implements Request {
  /** For isolated trading pairs, query all without passing */
  @JsonProperty("symbol")
  private String symbol;

  /** quote currency, currently only supports USDT, KCS, BTC, USDT as default */
  @JsonProperty("quoteCurrency")
  @Builder.Default
  private QuoteCurrencyEnum quoteCurrency = QuoteCurrencyEnum.USDT;

  /**
   * Query account type (default ISOLATED), ISOLATED- - only query low frequency isolated margin
   * account, ISOLATED_V2-only query high frequency isolated margin account, ALL - consistent
   * aggregate query with the web side
   */
  @JsonProperty("queryType")
  @Builder.Default
  private QueryTypeEnum queryType = QueryTypeEnum.ISOLATED;

  public enum QuoteCurrencyEnum {
    /** */
    USDT("USDT"),
    /** */
    KCS("KCS"),
    /** */
    BTC("BTC");

    private final String value;

    QuoteCurrencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuoteCurrencyEnum fromValue(String value) {
      for (QuoteCurrencyEnum b : QuoteCurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum QueryTypeEnum {
    /** */
    ISOLATED("ISOLATED"),
    /** */
    ISOLATED_V2("ISOLATED_V2"),
    /** */
    ALL("ALL");

    private final String value;

    QueryTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QueryTypeEnum fromValue(String value) {
      for (QueryTypeEnum b : QueryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
