// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetStopOrdersListReq implements Request {
  /** Only list orders for a specific symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** buy or sell */
  @JsonProperty("side")
  private String side;

  /** limit, market */
  @JsonProperty("type")
  private TypeEnum type;

  /**
   * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated
   * Margin). Default is TRADE
   */
  @JsonProperty("tradeType")
  private String tradeType;

  /** Start time (milisecond) */
  @JsonProperty("startAt")
  private Long startAt;

  /** End time (milisecond) */
  @JsonProperty("endAt")
  private Long endAt;

  /** Current page */
  @JsonProperty("currentPage")
  @Builder.Default
  private Integer currentPage = 1;

  /** Comma seperated order ID list */
  @JsonProperty("orderIds")
  private String orderIds;

  /** Page size */
  @JsonProperty("pageSize")
  @Builder.Default
  private Integer pageSize = 50;

  /** Order type: stop: stop loss order, oco: oco order */
  @JsonProperty("stop")
  private String stop;

  public enum TypeEnum {
    /** limit order */
    LIMIT("limit"),
    /** market order */
    MARKET("market");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
