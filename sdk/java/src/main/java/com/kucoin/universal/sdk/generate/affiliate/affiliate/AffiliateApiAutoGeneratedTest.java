package com.kucoin.universal.sdk.generate.affiliate.affiliate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class AffiliateApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /** getAccount Request Get Account /api/v2/affiliate/inviter/statistics */
  public static void testGetAccountRequest() throws Exception {
    // pass
  }

  /** getAccount Response Get Account /api/v2/affiliate/inviter/statistics */
  public static void testGetAccountResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"parentUid\": \"1000000\",\n"
            + "        \"orders\": [\n"
            + "            {\n"
            + "                \"orderId\": \"1668458892612980737\",\n"
            + "                \"currency\": \"USDT\",\n"
            + "                \"principal\": \"100\",\n"
            + "                \"interest\": \"0\"\n"
            + "            }\n"
            + "        ],\n"
            + "        \"ltv\": {\n"
            + "            \"transferLtv\": \"0.6000\",\n"
            + "            \"onlyClosePosLtv\": \"0.7500\",\n"
            + "            \"delayedLiquidationLtv\": \"0.9000\",\n"
            + "            \"instantLiquidationLtv\": \"0.9500\",\n"
            + "            \"currentLtv\": \"0.0854\"\n"
            + "        },\n"
            + "        \"totalMarginAmount\": \"1170.36181573\",\n"
            + "        \"transferMarginAmount\": \"166.66666666\",\n"
            + "        \"margins\": [\n"
            + "            {\n"
            + "                \"marginCcy\": \"USDT\",\n"
            + "                \"marginQty\": \"1170.36181573\",\n"
            + "                \"marginFactor\": \"1.000000000000000000\"\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetAccountResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetAccountResp>>() {});
  }

  public static void runAllTests() {
    run(AffiliateApiAutoGeneratedTest::testGetAccountRequest, "testGetAccountRequest");
    run(AffiliateApiAutoGeneratedTest::testGetAccountResponse, "testGetAccountResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
