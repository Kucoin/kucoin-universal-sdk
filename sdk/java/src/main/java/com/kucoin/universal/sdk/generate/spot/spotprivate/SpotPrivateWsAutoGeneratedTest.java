package com.kucoin.universal.sdk.generate.spot.spotprivate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.WsMessage;
import java.util.ArrayList;
import java.util.List;

class SpotPrivateWsAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** account Get Account Balance /account/account/balance */
  public static void testAccountResponse() throws Exception {
    String data =
        "{\"topic\":\"/account/balance\",\"type\":\"message\",\"subject\":\"account.balance\",\"id\":\"354689988084000\",\"userId\":\"633559791e1cbc0001f319bc\",\"channelType\":\"private\",\"data\":{\"accountId\":\"548674591753\",\"currency\":\"USDT\",\"total\":\"21.133773386762\",\"available\":\"20.132773386762\",\"hold\":\"1.001\",\"availableChange\":\"-0.5005\",\"holdChange\":\"0.5005\",\"relationContext\":{\"symbol\":\"BTC-USDT\",\"orderId\":\"6721d0632db25b0007071fdc\"},\"relationEvent\":\"trade.hold\",\"relationEventId\":\"354689988084000\",\"time\":\"1730269283892\"}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    AccountEvent event = mapper.convertValue(resp.getData(), AccountEvent.class);
  }

  /** orderV1 Get Order(V1) /orderV1/spotMarket/tradeOrders */
  public static void testOrderV1Response() throws Exception {
    String data =
        "{\"topic\":\"/spotMarket/tradeOrdersV2\",\"type\":\"message\",\"subject\":\"orderChange\",\"userId\":\"633559791e1cbc0001f319bc\",\"channelType\":\"private\",\"data\":{\"canceledSize\":\"0\",\"clientOid\":\"5c52e11203aa677f33e493fb\",\"filledSize\":\"0\",\"orderId\":\"6720ecd9ec71f4000747731a\",\"orderTime\":1730211033305,\"orderType\":\"limit\",\"originSize\":\"0.00001\",\"price\":\"50000\",\"remainSize\":\"0.00001\",\"side\":\"buy\",\"size\":\"0.00001\",\"status\":\"open\",\"symbol\":\"BTC-USDT\",\"ts\":1730211033335000000,\"type\":\"open\"}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    OrderV1Event event = mapper.convertValue(resp.getData(), OrderV1Event.class);
  }

  /** orderV2 Get Order(V2) /orderV2/spotMarket/tradeOrdersV2 */
  public static void testOrderV2Response() throws Exception {
    String data =
        "{\"topic\":\"/spotMarket/tradeOrdersV2\",\"type\":\"message\",\"subject\":\"orderChange\",\"userId\":\"633559791e1cbc0001f319bc\",\"channelType\":\"private\",\"data\":{\"clientOid\":\"5c52e11203aa677f33e493fc\",\"orderId\":\"6720da3fa30a360007f5f832\",\"orderTime\":1730206271588,\"orderType\":\"market\",\"originSize\":\"0.00001\",\"side\":\"buy\",\"status\":\"new\",\"symbol\":\"BTC-USDT\",\"ts\":1730206271616000000,\"type\":\"received\"}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    OrderV2Event event = mapper.convertValue(resp.getData(), OrderV2Event.class);
  }

  /** stopOrder Get Stop Order /stopOrder/spotMarket/advancedOrders */
  public static void testStopOrderResponse() throws Exception {
    String data =
        "{\"topic\":\"/spotMarket/advancedOrders\",\"type\":\"message\",\"subject\":\"stopOrder\",\"userId\":\"633559791e1cbc0001f319bc\",\"channelType\":\"private\",\"data\":{\"orderId\":\"vs93gpupfa48anof003u85mb\",\"orderPrice\":\"70000\",\"orderType\":\"stop\",\"side\":\"buy\",\"size\":\"0.00007142\",\"stop\":\"loss\",\"stopPrice\":\"71000\",\"symbol\":\"BTC-USDT\",\"tradeType\":\"TRADE\",\"type\":\"open\",\"createdAt\":1742305928064,\"ts\":1742305928091268493}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    StopOrderEvent event = mapper.convertValue(resp.getData(), StopOrderEvent.class);
  }

  public static void runAllTests() {
    run(SpotPrivateWsAutoGeneratedTest::testAccountResponse, "testAccountResponse");
    run(SpotPrivateWsAutoGeneratedTest::testOrderV1Response, "testOrderV1Response");
    run(SpotPrivateWsAutoGeneratedTest::testOrderV2Response, "testOrderV2Response");
    run(SpotPrivateWsAutoGeneratedTest::testStopOrderResponse, "testStopOrderResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
