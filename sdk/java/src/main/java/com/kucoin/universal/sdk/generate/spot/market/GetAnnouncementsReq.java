// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.market;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetAnnouncementsReq implements Request {
  /**
   * page number
   */
  @JsonProperty("currentPage") private Long currentPage;

  /**
   * page Size
   */
  @JsonProperty("pageSize") private Long pageSize;

  /**
   * Announcement types: latest-announcements , activities (latest activities),
   * new-listings (new currency online), product-updates (product updates), vip
   * (institutions and VIPs), maintenance-updates (system maintenance), product
   * -updates (product news), delistings (currency offline), others,
   * api-campaigns (API user activities), default : latest-announcements
   */
  @JsonProperty("annType")
  @Builder.Default
  private AnnTypeEnum annType = AnnTypeEnum.LATEST_ANNOUNCEMENTS;

  /**
   * Language type, the default is en_US, the specific value parameters are as
   * follows
   */
  @JsonProperty("lang") @Builder.Default private LangEnum lang = LangEnum.EN_US;

  /**
   * Announcement online start time (milliseconds)
   */
  @JsonProperty("startTime") private Long startTime;

  /**
   * Announcement online end time (milliseconds)
   */
  @JsonProperty("endTime") private Long endTime;

  public enum AnnTypeEnum {
    /**
     * latest-announcements
     */
    LATEST_ANNOUNCEMENTS("latest-announcements"),
    /**
     * latest activities
     */
    ACTIVITIES("activities"),
    /**
     * product updates
     */
    PRODUCT_UPDATES("product-updates"),
    /**
     * institutions and VIPs
     */
    VIPS("vip"),
    /**
     * system maintenance
     */
    MAINTENANCE_UPDATE("maintenance-updates"),
    /**
     * currency offline
     */
    DELISTINGS("delistings"),
    /**
     * others
     */
    OTHERS("others"),
    /**
     * API user activities
     */
    API_CAMPAIGNS("api-campaigns"),
    /**
     * new currency online
     */
    NEW_LISTINGS("new-listings");

    private final String value;

    AnnTypeEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AnnTypeEnum fromValue(String value) {
      for (AnnTypeEnum b : AnnTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public enum LangEnum {
    /**
     * Chinese (Hong Kong)
     */
    ZH_HK("zh_HK"),
    /**
     * Japanese (Japan)
     */
    JA_JP("ja_JP"),
    /**
     * Korean (Korea)
     */
    KO_KR("ko_KR"),
    /**
     * English
     */
    EN_US("en_US"),
    /**
     * Polish (Poland)
     */
    PL_PL("pl_PL"),
    /**
     * Spanish (Spain)
     */
    ES_ES("es_ES"),
    /**
     * French (France)
     */
    FR_FR("fr_FR"),
    /**
     * Arabic (Egypt)
     */
    AR_AE("ar_AE"),
    /**
     * Italian (Italy)
     */
    IT_IT("it_IT"),
    /**
     * Indonesian (Indonesia)
     */
    ID_ID("id_ID"),
    /**
     * Dutch (Netherlands)
     */
    NL_NL("nl_NL"),
    /**
     * Portuguese (Brazil)
     */
    PT_PT("pt_PT"),
    /**
     * Vietnamese (Vietnam)
     */
    VI_VN("vi_VN"),
    /**
     * German (Germany)
     */
    DE_DE("de_DE"),
    /**
     * Turkish (Turkey)
     */
    TR_TR("tr_TR"),
    /**
     * Malay (Malaysia)
     */
    MS_MY("ms_MY"),
    /**
     * Russian (Russia)
     */
    RU_RU("ru_RU"),
    /**
     * Thai (Thailand)
     */
    TH_TH("th_TH"),
    /**
     * Hindi (India)
     */
    HI_IN("hi_IN"),
    /**
     * Bengali (Bangladesh)
     */
    BN_BD("bn_BD"),
    /**
     * Filipino (Philippines)
     */
    FIL_PH("fil_PH"),
    /**
     * Urdu (Pakistan)
     */
    UR_PK("ur_PK");

    private final String value;

    LangEnum(String value) { this.value = value; }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LangEnum fromValue(String value) {
      for (LangEnum b : LangEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
