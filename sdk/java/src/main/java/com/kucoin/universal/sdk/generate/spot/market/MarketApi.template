
    /**
    * getAnnouncements
    * Get Announcements
    * /api/v3/announcements
    */
    public void testGetAnnouncements() {
        GetAnnouncementsReq.GetAnnouncementsReqBuilder builder = GetAnnouncementsReq.builder();
        builder.currentPage(?).pageSize(?).annType(?).lang(?).startTime(?).endTime(?);
        GetAnnouncementsReq req = builder.build();
        GetAnnouncementsResp resp = this.api.getAnnouncements(req);
        self::assertNotNull($resp->totalNum);
        foreach($resp->items as $item) {
            self::assertNotNull($item->annId);
            self::assertNotNull($item->annTitle);
            self::assertNotNull($item->annType);
            self::assertNotNull($item->annDesc);
            self::assertNotNull($item->cTime);
            self::assertNotNull($item->language);
            self::assertNotNull($item->annUrl);
        }

        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalPage);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getCurrency
    * Get Currency
    * /api/v3/currencies/{currency}
    */
    public void testGetCurrency() {
        GetCurrencyReq.GetCurrencyReqBuilder builder = GetCurrencyReq.builder();
        builder.chain(?).currency(?);
        GetCurrencyReq req = builder.build();
        GetCurrencyResp resp = this.api.getCurrency(req);
        self::assertNotNull($resp->currency);
        self::assertNotNull($resp->name);
        self::assertNotNull($resp->fullName);
        self::assertNotNull($resp->precision);
        self::assertNotNull($resp->confirms);
        self::assertNotNull($resp->contractAddress);
        self::assertNotNull($resp->isMarginEnabled);
        self::assertNotNull($resp->isDebitEnabled);
        foreach($resp->chains as $item) {
            self::assertNotNull($item->chainName);
            self::assertNotNull($item->withdrawalMinSize);
            self::assertNotNull($item->depositMinSize);
            self::assertNotNull($item->withdrawFeeRate);
            self::assertNotNull($item->withdrawalMinFee);
            self::assertNotNull($item->isWithdrawEnabled);
            self::assertNotNull($item->isDepositEnabled);
            self::assertNotNull($item->confirms);
            self::assertNotNull($item->preConfirms);
            self::assertNotNull($item->contractAddress);
            self::assertNotNull($item->withdrawPrecision);
            self::assertNotNull($item->maxWithdraw);
            self::assertNotNull($item->maxDeposit);
            self::assertNotNull($item->needTag);
            self::assertNotNull($item->chainId);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getAllCurrencies
    * Get All Currencies
    * /api/v3/currencies
    */
    public void testGetAllCurrencies() {
        GetAllCurrenciesResp resp = this.api.getAllCurrencies();
        foreach($resp->data as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->name);
            self::assertNotNull($item->fullName);
            self::assertNotNull($item->precision);
            self::assertNotNull($item->confirms);
            self::assertNotNull($item->contractAddress);
            self::assertNotNull($item->isMarginEnabled);
            self::assertNotNull($item->isDebitEnabled);
            self::assertNotNull($item->chains);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSymbol
    * Get Symbol 
    * /api/v2/symbols/{symbol}
    */
    public void testGetSymbol() {
        GetSymbolReq.GetSymbolReqBuilder builder = GetSymbolReq.builder();
        builder.symbol(?);
        GetSymbolReq req = builder.build();
        GetSymbolResp resp = this.api.getSymbol(req);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->name);
        self::assertNotNull($resp->baseCurrency);
        self::assertNotNull($resp->quoteCurrency);
        self::assertNotNull($resp->feeCurrency);
        self::assertNotNull($resp->market);
        self::assertNotNull($resp->baseMinSize);
        self::assertNotNull($resp->quoteMinSize);
        self::assertNotNull($resp->baseMaxSize);
        self::assertNotNull($resp->quoteMaxSize);
        self::assertNotNull($resp->baseIncrement);
        self::assertNotNull($resp->quoteIncrement);
        self::assertNotNull($resp->priceIncrement);
        self::assertNotNull($resp->priceLimitRate);
        self::assertNotNull($resp->minFunds);
        self::assertNotNull($resp->isMarginEnabled);
        self::assertNotNull($resp->enableTrading);
        self::assertNotNull($resp->feeCategory);
        self::assertNotNull($resp->makerFeeCoefficient);
        self::assertNotNull($resp->takerFeeCoefficient);
        self::assertNotNull($resp->st);
        self::assertNotNull($resp->callauctionIsEnabled);
        self::assertNotNull($resp->callauctionPriceFloor);
        self::assertNotNull($resp->callauctionPriceCeiling);
        self::assertNotNull($resp->callauctionFirstStageStartTime);
        self::assertNotNull($resp->callauctionSecondStageStartTime);
        self::assertNotNull($resp->callauctionThirdStageStartTime);
        self::assertNotNull($resp->tradingStartTime);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getAllSymbols
    * Get All Symbols
    * /api/v2/symbols
    */
    public void testGetAllSymbols() {
        GetAllSymbolsReq.GetAllSymbolsReqBuilder builder = GetAllSymbolsReq.builder();
        builder.market(?);
        GetAllSymbolsReq req = builder.build();
        GetAllSymbolsResp resp = this.api.getAllSymbols(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->name);
            self::assertNotNull($item->baseCurrency);
            self::assertNotNull($item->quoteCurrency);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->market);
            self::assertNotNull($item->baseMinSize);
            self::assertNotNull($item->quoteMinSize);
            self::assertNotNull($item->baseMaxSize);
            self::assertNotNull($item->quoteMaxSize);
            self::assertNotNull($item->baseIncrement);
            self::assertNotNull($item->quoteIncrement);
            self::assertNotNull($item->priceIncrement);
            self::assertNotNull($item->priceLimitRate);
            self::assertNotNull($item->minFunds);
            self::assertNotNull($item->isMarginEnabled);
            self::assertNotNull($item->enableTrading);
            self::assertNotNull($item->feeCategory);
            self::assertNotNull($item->makerFeeCoefficient);
            self::assertNotNull($item->takerFeeCoefficient);
            self::assertNotNull($item->st);
            self::assertNotNull($item->callauctionIsEnabled);
            self::assertNotNull($item->callauctionPriceFloor);
            self::assertNotNull($item->callauctionPriceCeiling);
            self::assertNotNull($item->callauctionFirstStageStartTime);
            self::assertNotNull($item->callauctionSecondStageStartTime);
            self::assertNotNull($item->callauctionThirdStageStartTime);
            self::assertNotNull($item->tradingStartTime);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getTicker
    * Get Ticker
    * /api/v1/market/orderbook/level1
    */
    public void testGetTicker() {
        GetTickerReq.GetTickerReqBuilder builder = GetTickerReq.builder();
        builder.symbol(?);
        GetTickerReq req = builder.build();
        GetTickerResp resp = this.api.getTicker(req);
        self::assertNotNull($resp->time);
        self::assertNotNull($resp->sequence);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->bestBid);
        self::assertNotNull($resp->bestBidSize);
        self::assertNotNull($resp->bestAsk);
        self::assertNotNull($resp->bestAskSize);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getAllTickers
    * Get All Tickers
    * /api/v1/market/allTickers
    */
    public void testGetAllTickers() {
        GetAllTickersResp resp = this.api.getAllTickers();
        self::assertNotNull($resp->time);
        foreach($resp->ticker as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->symbolName);
            self::assertNotNull($item->buy);
            self::assertNotNull($item->bestBidSize);
            self::assertNotNull($item->sell);
            self::assertNotNull($item->bestAskSize);
            self::assertNotNull($item->changeRate);
            self::assertNotNull($item->changePrice);
            self::assertNotNull($item->high);
            self::assertNotNull($item->low);
            self::assertNotNull($item->vol);
            self::assertNotNull($item->volValue);
            self::assertNotNull($item->last);
            self::assertNotNull($item->averagePrice);
            self::assertNotNull($item->takerFeeRate);
            self::assertNotNull($item->makerFeeRate);
            self::assertNotNull($item->takerCoefficient);
            self::assertNotNull($item->makerCoefficient);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getTradeHistory
    * Get Trade History
    * /api/v1/market/histories
    */
    public void testGetTradeHistory() {
        GetTradeHistoryReq.GetTradeHistoryReqBuilder builder = GetTradeHistoryReq.builder();
        builder.symbol(?);
        GetTradeHistoryReq req = builder.build();
        GetTradeHistoryResp resp = this.api.getTradeHistory(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->sequence);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->side);
            self::assertNotNull($item->time);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getKlines
    * Get Klines
    * /api/v1/market/candles
    */
    public void testGetKlines() {
        GetKlinesReq.GetKlinesReqBuilder builder = GetKlinesReq.builder();
        builder.symbol(?).type(?).startAt(?).endAt(?);
        GetKlinesReq req = builder.build();
        GetKlinesResp resp = this.api.getKlines(req);
        foreach($resp->data as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getPartOrderBook
    * Get Part OrderBook
    * /api/v1/market/orderbook/level2_{size}
    */
    public void testGetPartOrderBook() {
        GetPartOrderBookReq.GetPartOrderBookReqBuilder builder = GetPartOrderBookReq.builder();
        builder.symbol(?).size(?);
        GetPartOrderBookReq req = builder.build();
        GetPartOrderBookResp resp = this.api.getPartOrderBook(req);
        self::assertNotNull($resp->time);
        self::assertNotNull($resp->sequence);
        foreach($resp->bids as $item) {
        }

        foreach($resp->asks as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getFullOrderBook
    * Get Full OrderBook
    * /api/v3/market/orderbook/level2
    */
    public void testGetFullOrderBook() {
        GetFullOrderBookReq.GetFullOrderBookReqBuilder builder = GetFullOrderBookReq.builder();
        builder.symbol(?);
        GetFullOrderBookReq req = builder.build();
        GetFullOrderBookResp resp = this.api.getFullOrderBook(req);
        self::assertNotNull($resp->time);
        self::assertNotNull($resp->sequence);
        foreach($resp->bids as $item) {
        }

        foreach($resp->asks as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getCallAuctionPartOrderBook
    * Get Call Auction Part OrderBook
    * /api/v1/market/orderbook/callauction/level2_{size}
    */
    public void testGetCallAuctionPartOrderBook() {
        GetCallAuctionPartOrderBookReq.GetCallAuctionPartOrderBookReqBuilder builder = GetCallAuctionPartOrderBookReq.builder();
        builder.symbol(?).size(?);
        GetCallAuctionPartOrderBookReq req = builder.build();
        GetCallAuctionPartOrderBookResp resp = this.api.getCallAuctionPartOrderBook(req);
        self::assertNotNull($resp->time);
        self::assertNotNull($resp->sequence);
        foreach($resp->bids as $item) {
        }

        foreach($resp->asks as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getCallAuctionInfo
    * Get Call Auction Info
    * /api/v1/market/callauctionData
    */
    public void testGetCallAuctionInfo() {
        GetCallAuctionInfoReq.GetCallAuctionInfoReqBuilder builder = GetCallAuctionInfoReq.builder();
        builder.symbol(?);
        GetCallAuctionInfoReq req = builder.build();
        GetCallAuctionInfoResp resp = this.api.getCallAuctionInfo(req);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->estimatedPrice);
        self::assertNotNull($resp->estimatedSize);
        self::assertNotNull($resp->sellOrderRangeLowPrice);
        self::assertNotNull($resp->sellOrderRangeHighPrice);
        self::assertNotNull($resp->buyOrderRangeLowPrice);
        self::assertNotNull($resp->buyOrderRangeHighPrice);
        self::assertNotNull($resp->time);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getFiatPrice
    * Get Fiat Price
    * /api/v1/prices
    */
    public void testGetFiatPrice() {
        GetFiatPriceReq.GetFiatPriceReqBuilder builder = GetFiatPriceReq.builder();
        builder.base(?).currencies(?);
        GetFiatPriceReq req = builder.build();
        GetFiatPriceResp resp = this.api.getFiatPrice(req);
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * get24hrStats
    * Get 24hr Stats
    * /api/v1/market/stats
    */
    public void testGet24hrStats() {
        Get24hrStatsReq.Get24hrStatsReqBuilder builder = Get24hrStatsReq.builder();
        builder.symbol(?);
        Get24hrStatsReq req = builder.build();
        Get24hrStatsResp resp = this.api.get24hrStats(req);
        self::assertNotNull($resp->time);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->buy);
        self::assertNotNull($resp->sell);
        self::assertNotNull($resp->changeRate);
        self::assertNotNull($resp->changePrice);
        self::assertNotNull($resp->high);
        self::assertNotNull($resp->low);
        self::assertNotNull($resp->vol);
        self::assertNotNull($resp->volValue);
        self::assertNotNull($resp->last);
        self::assertNotNull($resp->averagePrice);
        self::assertNotNull($resp->takerFeeRate);
        self::assertNotNull($resp->makerFeeRate);
        self::assertNotNull($resp->takerCoefficient);
        self::assertNotNull($resp->makerCoefficient);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getMarketList
    * Get Market List
    * /api/v1/markets
    */
    public void testGetMarketList() {
        GetMarketListResp resp = this.api.getMarketList();
        foreach($resp->data as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getClientIPAddress
    * Get Client IP Address
    * /api/v1/my-ip
    */
    public void testGetClientIPAddress() {
        GetClientIPAddressResp resp = this.api.getClientIPAddress();
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getServerTime
    * Get Server Time
    * /api/v1/timestamp
    */
    public void testGetServerTime() {
        GetServerTimeResp resp = this.api.getServerTime();
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getServiceStatus
    * Get Service Status
    * /api/v1/status
    */
    public void testGetServiceStatus() {
        GetServiceStatusResp resp = this.api.getServiceStatus();
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->msg);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getPublicToken
    * Get Public Token - Spot/Margin
    * /api/v1/bullet-public
    */
    public void testGetPublicToken() {
        GetPublicTokenResp resp = this.api.getPublicToken();
        self::assertNotNull($resp->token);
        foreach($resp->instanceServers as $item) {
            self::assertNotNull($item->endpoint);
            self::assertNotNull($item->encrypt);
            self::assertNotNull($item->protocol);
            self::assertNotNull($item->pingInterval);
            self::assertNotNull($item->pingTimeout);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getPrivateToken
    * Get Private Token - Spot/Margin
    * /api/v1/bullet-private
    */
    public void testGetPrivateToken() {
        GetPrivateTokenResp resp = this.api.getPrivateToken();
        self::assertNotNull($resp->token);
        foreach($resp->instanceServers as $item) {
            self::assertNotNull($item->endpoint);
            self::assertNotNull($item->encrypt);
            self::assertNotNull($item->protocol);
            self::assertNotNull($item->pingInterval);
            self::assertNotNull($item->pingTimeout);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

