// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.copytrading.futures;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class AddIsolatedMarginResp
    implements Response<AddIsolatedMarginResp, RestResponse<AddIsolatedMarginResp>> {
  /** Position ID */
  @JsonProperty("id")
  private String id;

  /**
   * Symbol of the contract, Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-3470220)
   */
  @JsonProperty("symbol")
  private String symbol;

  /** Auto deposit margin or not */
  @JsonProperty("autoDeposit")
  private Boolean autoDeposit;

  /** Maintenance margin requirement */
  @JsonProperty("maintMarginReq")
  private String maintMarginReq;

  /** Risk limit */
  @JsonProperty("riskLimit")
  private Integer riskLimit;

  /** Leverage o the order */
  @JsonProperty("realLeverage")
  private String realLeverage;

  /** Cross mode or not */
  @JsonProperty("crossMode")
  private Boolean crossMode;

  /** ADL ranking percentile */
  @JsonProperty("delevPercentage")
  private Double delevPercentage;

  /** Open time */
  @JsonProperty("openingTimestamp")
  private Long openingTimestamp;

  /** Current timestamp */
  @JsonProperty("currentTimestamp")
  private Long currentTimestamp;

  /** Current postion quantity */
  @JsonProperty("currentQty")
  private Integer currentQty;

  /** Current postion value */
  @JsonProperty("currentCost")
  private String currentCost;

  /** Current commission */
  @JsonProperty("currentComm")
  private String currentComm;

  /** Unrealised value */
  @JsonProperty("unrealisedCost")
  private String unrealisedCost;

  /** Accumulated realised gross profit value */
  @JsonProperty("realisedGrossCost")
  private String realisedGrossCost;

  /** Current realised position value */
  @JsonProperty("realisedCost")
  private String realisedCost;

  /** Opened position or not */
  @JsonProperty("isOpen")
  private Boolean isOpen;

  /** Mark price */
  @JsonProperty("markPrice")
  private String markPrice;

  /** Mark value */
  @JsonProperty("markValue")
  private String markValue;

  /** Position value */
  @JsonProperty("posCost")
  private String posCost;

  /** added margin */
  @JsonProperty("posCross")
  private String posCross;

  /** Leverage margin */
  @JsonProperty("posInit")
  private String posInit;

  /** Bankruptcy cost */
  @JsonProperty("posComm")
  private String posComm;

  /** Funding fees paid out */
  @JsonProperty("posLoss")
  private String posLoss;

  /** Position margin */
  @JsonProperty("posMargin")
  private String posMargin;

  /** Maintenance margin */
  @JsonProperty("posMaint")
  private String posMaint;

  /** Position margin */
  @JsonProperty("maintMargin")
  private String maintMargin;

  /** Accumulated realised gross profit value */
  @JsonProperty("realisedGrossPnl")
  private String realisedGrossPnl;

  /** Realised profit and loss */
  @JsonProperty("realisedPnl")
  private String realisedPnl;

  /** Unrealised profit and loss */
  @JsonProperty("unrealisedPnl")
  private String unrealisedPnl;

  /** Profit-loss ratio of the position */
  @JsonProperty("unrealisedPnlPcnt")
  private String unrealisedPnlPcnt;

  /** Rate of return on investment */
  @JsonProperty("unrealisedRoePcnt")
  private String unrealisedRoePcnt;

  /** Average entry price */
  @JsonProperty("avgEntryPrice")
  private String avgEntryPrice;

  /** Liquidation price */
  @JsonProperty("liquidationPrice")
  private String liquidationPrice;

  /** Bankruptcy price */
  @JsonProperty("bankruptPrice")
  private String bankruptPrice;

  /** Currency used to clear and settle the trades */
  @JsonProperty("settleCurrency")
  private String settleCurrency;

  /** common response */
  @JsonIgnore private RestResponse<AddIsolatedMarginResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<AddIsolatedMarginResp> response) {
    this.commonResponse = response;
  }
}
