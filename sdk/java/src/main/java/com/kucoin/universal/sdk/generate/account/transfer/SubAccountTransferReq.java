// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.transfer;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class SubAccountTransferReq implements Request {
  /**
   * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of
   * 128 bits
   */
  @JsonProperty("clientOid")
  private String clientOid;

  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** Transfer amount: The amount is a positive integer multiple of the currency precision. */
  @JsonProperty("amount")
  private String amount;

  /** OUT — the master user to sub user IN — the sub user to the master user */
  @JsonProperty("direction")
  private DirectionEnum direction;

  /** Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED */
  @JsonProperty("accountType")
  @Builder.Default
  private AccountTypeEnum accountType = AccountTypeEnum.MAIN;

  /** Sub-account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED */
  @JsonProperty("subAccountType")
  @Builder.Default
  private SubAccountTypeEnum subAccountType = SubAccountTypeEnum.MAIN;

  /** the user ID of a sub-account. */
  @JsonProperty("subUserId")
  private String subUserId;

  /** Need to be defined if accountType=ISOLATED. */
  @JsonProperty("tag")
  private String tag;

  /** Need to be defined if subAccountType=ISOLATED. */
  @JsonProperty("subTag")
  private String subTag;

  public enum DirectionEnum {
    /** */
    IN("IN"),
    /** */
    OUT("OUT");

    private final String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum AccountTypeEnum {
    /** Funding account */
    MAIN("MAIN"),
    /** Spot account */
    TRADE("TRADE"),
    /** Margin account */
    MARGIN("MARGIN"),
    /** Futures account */
    CONTRACT("CONTRACT"),
    /** Option account */
    OPTION("OPTION");

    private final String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SubAccountTypeEnum {
    /** */
    MAIN("MAIN"),
    /** */
    TRADE("TRADE"),
    /** */
    MARGIN("MARGIN"),
    /** */
    CONTRACT("CONTRACT");

    private final String value;

    SubAccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubAccountTypeEnum fromValue(String value) {
      for (SubAccountTypeEnum b : SubAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
