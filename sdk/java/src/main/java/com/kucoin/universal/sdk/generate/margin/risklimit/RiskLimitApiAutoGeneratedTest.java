package com.kucoin.universal.sdk.generate.margin.risklimit;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class RiskLimitApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** getMarginRiskLimit Request Get Margin Risk Limit /api/v3/margin/currencies */
  public static void testGetMarginRiskLimitRequest() throws Exception {
    String data = "{\"isIsolated\": true, \"currency\": \"BTC\", \"symbol\": \"BTC-USDT\"}";
    GetMarginRiskLimitReq obj = mapper.readValue(data, GetMarginRiskLimitReq.class);
  }

  /** getMarginRiskLimit Response Get Margin Risk Limit /api/v3/margin/currencies */
  public static void testGetMarginRiskLimitResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"timestamp\": 1729678659275,\n"
            + "            \"currency\": \"BTC\",\n"
            + "            \"borrowMaxAmount\": \"75.15\",\n"
            + "            \"buyMaxAmount\": \"217.12\",\n"
            + "            \"holdMaxAmount\": \"217.12\",\n"
            + "            \"borrowCoefficient\": \"1\",\n"
            + "            \"marginCoefficient\": \"1\",\n"
            + "            \"precision\": 8,\n"
            + "            \"borrowMinAmount\": \"0.001\",\n"
            + "            \"borrowMinUnit\": \"0.0001\",\n"
            + "            \"borrowEnabled\": true\n"
            + "        }\n"
            + "    ]\n"
            + "}\n";
    RestResponse<GetMarginRiskLimitResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarginRiskLimitResp>>() {});
  }

  public static void runAllTests() {
    run(
        RiskLimitApiAutoGeneratedTest::testGetMarginRiskLimitRequest,
        "testGetMarginRiskLimitRequest");
    run(
        RiskLimitApiAutoGeneratedTest::testGetMarginRiskLimitResponse,
        "testGetMarginRiskLimitResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
