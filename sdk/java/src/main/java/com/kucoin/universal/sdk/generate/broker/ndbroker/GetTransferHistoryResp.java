// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.broker.ndbroker;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetTransferHistoryResp
    implements Response<GetTransferHistoryResp, RestResponse<GetTransferHistoryResp>> {
  /** Transfer Order ID */
  @JsonProperty("orderId")
  private String orderId;

  /** Currency */
  @JsonProperty("currency")
  private String currency;

  /** Transfer Amount */
  @JsonProperty("amount")
  private String amount;

  /** UID of the user transferring out */
  @JsonProperty("fromUid")
  private Integer fromUid;

  /** From Account Type: Account Type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED */
  @JsonProperty("fromAccountType")
  private FromAccountTypeEnum fromAccountType;

  /** Trading pair (required if the account type is ISOLATED), e.g., BTC-USDT */
  @JsonProperty("fromAccountTag")
  private String fromAccountTag;

  /** UID of the user transferring in */
  @JsonProperty("toUid")
  private Integer toUid;

  /** Account Type: Account Type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED */
  @JsonProperty("toAccountType")
  private ToAccountTypeEnum toAccountType;

  /** To Trading pair (required if the account type is ISOLATED), e.g., BTC-USDT */
  @JsonProperty("toAccountTag")
  private String toAccountTag;

  /** Status: PROCESSING (processing), SUCCESS (successful), FAILURE (failed) */
  @JsonProperty("status")
  private StatusEnum status;

  /** Failure Reason */
  @JsonProperty("reason")
  private String reason;

  /** Creation Time (Unix timestamp in milliseconds) */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** common response */
  @JsonIgnore private RestResponse<GetTransferHistoryResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<GetTransferHistoryResp> response) {
    this.commonResponse = response;
  }

  public enum FromAccountTypeEnum {
    /** */
    MAIN("MAIN"),
    /** */
    TRADE("TRADE"),
    /** */
    CONTRACT("CONTRACT"),
    /** */
    MARGIN("MARGIN"),
    /** */
    ISOLATED("ISOLATED");

    private final String value;

    FromAccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FromAccountTypeEnum fromValue(String value) {
      for (FromAccountTypeEnum b : FromAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum ToAccountTypeEnum {
    /** */
    MAIN("MAIN"),
    /** */
    TRADE("TRADE"),
    /** */
    CONTRACT("CONTRACT"),
    /** */
    MARGIN("MARGIN"),
    /** */
    ISOLATED("ISOLATED");

    private final String value;

    ToAccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ToAccountTypeEnum fromValue(String value) {
      for (ToAccountTypeEnum b : ToAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StatusEnum {
    /** */
    PROCESSING("PROCESSING"),
    /** */
    SUCCESS("SUCCESS"),
    /** */
    FAILURE("FAILURE");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
