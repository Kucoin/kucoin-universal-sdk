// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.margin.marginprivate;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class CrossMarginPositionEvent implements Response<CrossMarginPositionEvent, WsMessage> {
  /** Debt ratio */
  @JsonProperty("debtRatio")
  private Double debtRatio;

  /** Total assets in BTC (interest included) */
  @JsonProperty("totalAsset")
  private Double totalAsset;

  /** */
  @JsonProperty("marginCoefficientTotalAsset")
  private String marginCoefficientTotalAsset;

  /** Total debt in BTC (interest included) */
  @JsonProperty("totalDebt")
  private String totalDebt;

  /** Asset list (interest included) */
  @JsonProperty("assetList")
  private Map<String, CrossMarginPositionAssetListValue> assetList = new HashMap<>();

  /** Debt list (interest included) */
  @JsonProperty("debtList")
  private Map<String, String> debtList = new HashMap<>();

  /** */
  @JsonProperty("timestamp")
  private Long timestamp;

  /** Event type, **Only applicable to \"debt.ratio\" subject** */
  @JsonProperty("type")
  private TypeEnum type;

  /** common response */
  @JsonIgnore private WsMessage commonResponse;

  @Override
  public void setCommonResponse(WsMessage response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, CrossMarginPositionEvent data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback of(Callback callback) {
      return (msg, objectMapper) ->
          callback.onEvent(
              msg.getTopic(),
              msg.getSubject(),
              objectMapper.convertValue(msg.getData(), CrossMarginPositionEvent.class));
    }
  }

  public enum TypeEnum {
    /**
     * When the debt ratio exceeds the liquidation threshold and the position is frozen, the system
     * will push this event.
     */
    FROZEN_FL("FROZEN_FL"),
    /**
     * When the liquidation is finished and the position returns to “EFFECTIVE” status, the system
     * will push this event.
     */
    UNFROZEN_FL("UNFROZEN_FL"),
    /**
     * When the auto-borrow renewing is complete and the position returns to “EFFECTIVE” status, the
     * system will push this event.
     */
    FROZEN_RENEW("FROZEN_RENEW"),
    /** When the account reaches a negative balance, the system will push this event. */
    UNFROZEN_RENEW("UNFROZEN_RENEW"),
    /** When the account reaches a negative balance, the system will push this event. */
    LIABILITY("LIABILITY"),
    /**
     * When all the liabilities are repaid and the position returns to “EFFECTIVE” status, the
     * system will push this event.
     */
    UNLIABILITY("UNLIABILITY");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
