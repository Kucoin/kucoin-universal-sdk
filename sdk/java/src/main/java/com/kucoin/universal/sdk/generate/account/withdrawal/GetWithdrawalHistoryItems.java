// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.withdrawal;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetWithdrawalHistoryItems {
  /** Unique ID */
  @JsonProperty("id")
  private String id;

  /** Currency */
  @JsonProperty("currency")
  private String currency;

  /** The chain id of currency */
  @JsonProperty("chain")
  private String chain;

  /** Status. Available value: REVIEW, PROCESSING, WALLET_PROCESSING, SUCCESS and FAILURE */
  @JsonProperty("status")
  private StatusEnum status;

  /** Withwrawal address */
  @JsonProperty("address")
  private String address;

  /** Address remark. If thereâ€™s no remark, it is empty. */
  @JsonProperty("memo")
  private String memo;

  /** Internal deposit or not */
  @JsonProperty("isInner")
  private Boolean isInner;

  /** Withwrawal amount */
  @JsonProperty("amount")
  private String amount;

  /** Fees charged for withwrawal */
  @JsonProperty("fee")
  private String fee;

  /** Wallet Txid, If this is an internal withdrawal, it is empty. */
  @JsonProperty("walletTxId")
  private String walletTxId;

  /** Database record creation time */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** Update time of the database record */
  @JsonProperty("updatedAt")
  private Long updatedAt;

  /** Remark */
  @JsonProperty("remark")
  private String remark;

  public enum StatusEnum {
    /** REVIEW */
    REVIEW("REVIEW"),
    /** PROCESSING */
    PROCESSING("PROCESSING"),
    /** WALLET_PROCESSING */
    WALLET_PROCESSING("WALLET_PROCESSING"),
    /** FAILURE */
    FAILURE("FAILURE"),
    /** SUCCESS */
    SUCCESS("SUCCESS");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
