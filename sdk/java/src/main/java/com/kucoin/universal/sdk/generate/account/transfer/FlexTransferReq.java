// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.transfer;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class FlexTransferReq implements Request {
  /**
   * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of
   * 128 bits
   */
  @JsonProperty("clientOid")
  private String clientOid;

  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** Transfer amount: The amount is a positive integer multiple of the currency precision. */
  @JsonProperty("amount")
  private String amount;

  /**
   * Transfer out UserId: This is required when transferring from sub-account to master-account. It
   * is optional for internal transfers.
   */
  @JsonProperty("fromUserId")
  private String fromUserId;

  /** Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2 */
  @JsonProperty("fromAccountType")
  private FromAccountTypeEnum fromAccountType;

  /** Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT */
  @JsonProperty("fromAccountTag")
  private String fromAccountTag;

  /**
   * Transfer type: INTERNAL (Transfer within account), PARENT_TO_SUB (Transfer from master-account
   * to sub-account), SUB_TO_PARENT (Transfer from sub-account to master-account)
   */
  @JsonProperty("type")
  private TypeEnum type;

  /**
   * Transfer in UserId: This is required when transferring master-account to sub-account. It is
   * optional for internal transfers.
   */
  @JsonProperty("toUserId")
  private String toUserId;

  /** Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2 */
  @JsonProperty("toAccountType")
  private ToAccountTypeEnum toAccountType;

  /** Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT */
  @JsonProperty("toAccountTag")
  private String toAccountTag;

  public enum FromAccountTypeEnum {
    /** Funding account */
    MAIN("MAIN"),
    /** Spot account */
    TRADE("TRADE"),
    /** Futures account */
    CONTRACT("CONTRACT"),
    /** Cross margin account */
    MARGIN("MARGIN"),
    /** Isolated margin account */
    ISOLATED("ISOLATED"),
    /** Cross margin account */
    MARGIN_V2("MARGIN_V2"),
    /** Isolated margin account */
    ISOLATED_V2("ISOLATED_V2"),
    /** Option account */
    OPTION("OPTION");

    private final String value;

    FromAccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FromAccountTypeEnum fromValue(String value) {
      for (FromAccountTypeEnum b : FromAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** */
    INTERNAL("INTERNAL"),
    /** */
    PARENT_TO_SUB("PARENT_TO_SUB"),
    /** */
    SUB_TO_PARENT("SUB_TO_PARENT");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum ToAccountTypeEnum {
    /** Funding account */
    MAIN("MAIN"),
    /** Spot account */
    TRADE("TRADE"),
    /** Futures account */
    CONTRACT("CONTRACT"),
    /** Cross margin account */
    MARGIN("MARGIN"),
    /** Isolated margin account */
    ISOLATED("ISOLATED"),
    /** Cross margin account */
    MARGIN_V2("MARGIN_V2"),
    /** Isolated margin account */
    ISOLATED_V2("ISOLATED_V2"),
    /** Option account */
    OPTION("OPTION");

    private final String value;

    ToAccountTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ToAccountTypeEnum fromValue(String value) {
      for (ToAccountTypeEnum b : ToAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
