package com.kucoin.universal.sdk.generate.account.account;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class AccountApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /** getAccountInfo Request Get Account Summary Info /api/v2/user-info */
  public static void testGetAccountInfoRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getAccountInfo Response Get Account Summary Info /api/v2/user-info */
  public static void testGetAccountInfoResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"level\": 0,\n"
            + "        \"subQuantity\": 3,\n"
            + "        \"spotSubQuantity\": 3,\n"
            + "        \"marginSubQuantity\": 2,\n"
            + "        \"futuresSubQuantity\": 2,\n"
            + "        \"optionSubQuantity\": 0,\n"
            + "        \"maxSubQuantity\": 5,\n"
            + "        \"maxDefaultSubQuantity\": 5,\n"
            + "        \"maxSpotSubQuantity\": 0,\n"
            + "        \"maxMarginSubQuantity\": 0,\n"
            + "        \"maxFuturesSubQuantity\": 0,\n"
            + "        \"maxOptionSubQuantity\": 0\n"
            + "    }\n"
            + "}";
    RestResponse<GetAccountInfoResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetAccountInfoResp>>() {});
  }

  /** getApikeyInfo Request Get Apikey Info /api/v1/user/api-key */
  public static void testGetApikeyInfoRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getApikeyInfo Response Get Apikey Info /api/v1/user/api-key */
  public static void testGetApikeyInfoResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"remark\": \"account1\",\n"
            + "        \"apiKey\": \"6705f5c311545b000157d3eb\",\n"
            + "        \"apiVersion\": 3,\n"
            + "        \"permission\":"
            + " \"General,Futures,Spot,Earn,InnerTransfer,Transfer,Margin\",\n"
            + "        \"ipWhitelist\": \"203.**.154,103.**.34\",\n"
            + "        \"createdAt\": 1728443843000,\n"
            + "        \"uid\": 165111215,\n"
            + "        \"isMaster\": true\n"
            + "    }\n"
            + "}";
    RestResponse<GetApikeyInfoResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetApikeyInfoResp>>() {});
  }

  /** getSpotAccountType Request Get Account Type - Spot /api/v1/hf/accounts/opened */
  public static void testGetSpotAccountTypeRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getSpotAccountType Response Get Account Type - Spot /api/v1/hf/accounts/opened */
  public static void testGetSpotAccountTypeResponse() throws Exception {
    String data = "{\"code\":\"200000\",\"data\":false}";
    RestResponse<GetSpotAccountTypeResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSpotAccountTypeResp>>() {});
  }

  /** getSpotAccountList Request Get Account List - Spot /api/v1/accounts */
  public static void testGetSpotAccountListRequest() throws Exception {
    String data = "{\"currency\": \"USDT\", \"type\": \"main\"}";
    GetSpotAccountListReq obj = mapper.readValue(data, GetSpotAccountListReq.class);
  }

  /** getSpotAccountList Response Get Account List - Spot /api/v1/accounts */
  public static void testGetSpotAccountListResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"548674591753\",\n"
            + "            \"currency\": \"USDT\",\n"
            + "            \"type\": \"trade\",\n"
            + "            \"balance\": \"26.66759503\",\n"
            + "            \"available\": \"26.66759503\",\n"
            + "            \"holds\": \"0\"\n"
            + "        },\n"
            + "        {\n"
            + "            \"id\": \"63355cd156298d0001b66e61\",\n"
            + "            \"currency\": \"USDT\",\n"
            + "            \"type\": \"main\",\n"
            + "            \"balance\": \"0.01\",\n"
            + "            \"available\": \"0.01\",\n"
            + "            \"holds\": \"0\"\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetSpotAccountListResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSpotAccountListResp>>() {});
  }

  /** getSpotAccountDetail Request Get Account Detail - Spot /api/v1/accounts/{accountId} */
  public static void testGetSpotAccountDetailRequest() throws Exception {
    String data = "{\"accountId\": \"548674591753\"}";
    GetSpotAccountDetailReq obj = mapper.readValue(data, GetSpotAccountDetailReq.class);
  }

  /** getSpotAccountDetail Response Get Account Detail - Spot /api/v1/accounts/{accountId} */
  public static void testGetSpotAccountDetailResponse() throws Exception {
    String data =
        "{\"code\":\"200000\",\"data\":{\"currency\":\"USDT\",\"balance\":\"26.66759503\",\"available\":\"26.66759503\",\"holds\":\"0\"}}";
    RestResponse<GetSpotAccountDetailResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSpotAccountDetailResp>>() {});
  }

  /** getCrossMarginAccount Request Get Account - Cross Margin /api/v3/margin/accounts */
  public static void testGetCrossMarginAccountRequest() throws Exception {
    String data = "{\"quoteCurrency\": \"USDT\", \"queryType\": \"MARGIN\"}";
    GetCrossMarginAccountReq obj = mapper.readValue(data, GetCrossMarginAccountReq.class);
  }

  /** getCrossMarginAccount Response Get Account - Cross Margin /api/v3/margin/accounts */
  public static void testGetCrossMarginAccountResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"totalAssetOfQuoteCurrency\": \"40.8648372\",\n"
            + "        \"totalLiabilityOfQuoteCurrency\": \"0\",\n"
            + "        \"debtRatio\": \"0\",\n"
            + "        \"status\": \"EFFECTIVE\",\n"
            + "        \"accounts\": [\n"
            + "            {\n"
            + "                \"currency\": \"USDT\",\n"
            + "                \"total\": \"38.68855864\",\n"
            + "                \"available\": \"20.01916691\",\n"
            + "                \"hold\": \"18.66939173\",\n"
            + "                \"liability\": \"0\",\n"
            + "                \"liabilityPrincipal\": \"0\",\n"
            + "                \"liabilityInterest\": \"0\",\n"
            + "                \"maxBorrowSize\": \"163\",\n"
            + "                \"borrowEnabled\": true,\n"
            + "                \"transferInEnabled\": true\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetCrossMarginAccountResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetCrossMarginAccountResp>>() {});
  }

  /** getIsolatedMarginAccount Request Get Account - Isolated Margin /api/v3/isolated/accounts */
  public static void testGetIsolatedMarginAccountRequest() throws Exception {
    String data =
        "{\"symbol\": \"BTC-USDT\", \"quoteCurrency\": \"USDT\", \"queryType\": \"ISOLATED\"}";
    GetIsolatedMarginAccountReq obj = mapper.readValue(data, GetIsolatedMarginAccountReq.class);
  }

  /** getIsolatedMarginAccount Response Get Account - Isolated Margin /api/v3/isolated/accounts */
  public static void testGetIsolatedMarginAccountResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"totalAssetOfQuoteCurrency\": \"4.97047372\",\n"
            + "        \"totalLiabilityOfQuoteCurrency\": \"0.00038891\",\n"
            + "        \"timestamp\": 1747303659773,\n"
            + "        \"assets\": [\n"
            + "            {\n"
            + "                \"symbol\": \"BTC-USDT\",\n"
            + "                \"status\": \"EFFECTIVE\",\n"
            + "                \"debtRatio\": \"0\",\n"
            + "                \"baseAsset\": {\n"
            + "                    \"currency\": \"BTC\",\n"
            + "                    \"borrowEnabled\": true,\n"
            + "                    \"transferInEnabled\": true,\n"
            + "                    \"liability\": \"0\",\n"
            + "                    \"liabilityPrincipal\": \"0\",\n"
            + "                    \"liabilityInterest\": \"0\",\n"
            + "                    \"total\": \"0\",\n"
            + "                    \"available\": \"0\",\n"
            + "                    \"hold\": \"0\",\n"
            + "                    \"maxBorrowSize\": \"0\"\n"
            + "                },\n"
            + "                \"quoteAsset\": {\n"
            + "                    \"currency\": \"USDT\",\n"
            + "                    \"borrowEnabled\": true,\n"
            + "                    \"transferInEnabled\": true,\n"
            + "                    \"liability\": \"0.00038891\",\n"
            + "                    \"liabilityPrincipal\": \"0.00038888\",\n"
            + "                    \"liabilityInterest\": \"0.00000003\",\n"
            + "                    \"total\": \"4.97047372\",\n"
            + "                    \"available\": \"4.97047372\",\n"
            + "                    \"hold\": \"0\",\n"
            + "                    \"maxBorrowSize\": \"44\"\n"
            + "                }\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetIsolatedMarginAccountResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetIsolatedMarginAccountResp>>() {});
  }

  /** getFuturesAccount Request Get Account - Futures /api/v1/account-overview */
  public static void testGetFuturesAccountRequest() throws Exception {
    String data = "{\"currency\": \"USDT\"}";
    GetFuturesAccountReq obj = mapper.readValue(data, GetFuturesAccountReq.class);
  }

  /** getFuturesAccount Response Get Account - Futures /api/v1/account-overview */
  public static void testGetFuturesAccountResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"accountEquity\": 394.439280806,\n"
            + "        \"unrealisedPNL\": 20.15278,\n"
            + "        \"marginBalance\": 371.394298816,\n"
            + "        \"positionMargin\": 102.20664159,\n"
            + "        \"orderMargin\": 10.06002012,\n"
            + "        \"frozenFunds\": 0.0,\n"
            + "        \"availableBalance\": 290.326799096,\n"
            + "        \"currency\": \"USDT\",\n"
            + "        \"riskRatio\": 0.0065289525,\n"
            + "        \"maxWithdrawAmount\": 290.326419096\n"
            + "    }\n"
            + "}";
    RestResponse<GetFuturesAccountResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetFuturesAccountResp>>() {});
  }

  /** getSpotLedger Request Get Account Ledgers - Spot/Margin /api/v1/accounts/ledgers */
  public static void testGetSpotLedgerRequest() throws Exception {
    String data =
        "{\"currency\": \"BTC\", \"direction\": \"in\", \"bizType\": \"TRANSFER\", \"startAt\":"
            + " 1728663338000, \"endAt\": 1728692138000, \"currentPage\": 1, \"pageSize\": 50}";
    GetSpotLedgerReq obj = mapper.readValue(data, GetSpotLedgerReq.class);
  }

  /** getSpotLedger Response Get Account Ledgers - Spot/Margin /api/v1/accounts/ledgers */
  public static void testGetSpotLedgerResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 50,\n"
            + "        \"totalNum\": 1,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"id\": \"265329987780896\",\n"
            + "                \"currency\": \"USDT\",\n"
            + "                \"amount\": \"0.01\",\n"
            + "                \"fee\": \"0\",\n"
            + "                \"balance\": \"0\",\n"
            + "                \"accountType\": \"TRADE\",\n"
            + "                \"bizType\": \"SUB_TRANSFER\",\n"
            + "                \"direction\": \"out\",\n"
            + "                \"createdAt\": 1728658481484,\n"
            + "                \"context\": \"\"\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetSpotLedgerResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSpotLedgerResp>>() {});
  }

  /** getSpotHFLedger Request Get Account Ledgers - Trade_hf /api/v1/hf/accounts/ledgers */
  public static void testGetSpotHFLedgerRequest() throws Exception {
    String data =
        "{\"currency\": \"BTC\", \"direction\": \"in\", \"bizType\": \"TRANSFER\", \"lastId\":"
            + " 254062248624417, \"limit\": 100, \"startAt\": 1728663338000, \"endAt\":"
            + " 1728692138000}";
    GetSpotHFLedgerReq obj = mapper.readValue(data, GetSpotHFLedgerReq.class);
  }

  /** getSpotHFLedger Response Get Account Ledgers - Trade_hf /api/v1/hf/accounts/ledgers */
  public static void testGetSpotHFLedgerResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"254062248624417\",\n"
            + "            \"currency\": \"USDT\",\n"
            + "            \"amount\": \"1.59760080\",\n"
            + "            \"fee\": \"0.00159920\",\n"
            + "            \"tax\": \"0\",\n"
            + "            \"balance\": \"26.73759503\",\n"
            + "            \"accountType\": \"TRADE_HF\",\n"
            + "            \"bizType\": \"TRADE_EXCHANGE\",\n"
            + "            \"direction\": \"in\",\n"
            + "            \"createdAt\": \"1728443957539\",\n"
            + "            \"context\":"
            + " \"{\\\"symbol\\\":\\\"KCS-USDT\\\",\\\"orderId\\\":\\\"6705f6350dc7210007d6a36d\\\",\\\"tradeId\\\":\\\"10046097631627265\\\"}\"\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetSpotHFLedgerResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetSpotHFLedgerResp>>() {});
  }

  /** getMarginHFLedger Request Get Account Ledgers - Margin_hf /api/v3/hf/margin/account/ledgers */
  public static void testGetMarginHFLedgerRequest() throws Exception {
    String data =
        "{\"currency\": \"BTC\", \"direction\": \"in\", \"bizType\": \"TRANSFER\", \"lastId\":"
            + " 254062248624417, \"limit\": 100, \"startAt\": 1728663338000, \"endAt\":"
            + " 1728692138000}";
    GetMarginHFLedgerReq obj = mapper.readValue(data, GetMarginHFLedgerReq.class);
  }

  /**
   * getMarginHFLedger Response Get Account Ledgers - Margin_hf /api/v3/hf/margin/account/ledgers
   */
  public static void testGetMarginHFLedgerResponse() throws Exception {
    String data =
        "{\"code\":\"200000\",\"data\":[{\"id\":1949641706720,\"currency\":\"USDT\",\"amount\":\"0.01000000\",\"fee\":\"0.00000000\",\"balance\":\"0.01000000\",\"accountType\":\"MARGIN_V2\",\"bizType\":\"TRANSFER\",\"direction\":\"in\",\"createdAt\":1728664091208,\"context\":\"{}\",\"tax\":\"0.00000000\"}]}";
    RestResponse<GetMarginHFLedgerResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarginHFLedgerResp>>() {});
  }

  /** getFuturesLedger Request Get Account Ledgers - Futures /api/v1/transaction-history */
  public static void testGetFuturesLedgerRequest() throws Exception {
    String data =
        "{\"currency\": \"XBT\", \"type\": \"Transferin\", \"offset\": 254062248624417,"
            + " \"forward\": true, \"maxCount\": 50, \"startAt\": 1728663338000, \"endAt\":"
            + " 1728692138000}";
    GetFuturesLedgerReq obj = mapper.readValue(data, GetFuturesLedgerReq.class);
  }

  /** getFuturesLedger Response Get Account Ledgers - Futures /api/v1/transaction-history */
  public static void testGetFuturesLedgerResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"dataList\": [\n"
            + "            {\n"
            + "                \"time\": 1728665747000,\n"
            + "                \"type\": \"TransferIn\",\n"
            + "                \"amount\": 0.01,\n"
            + "                \"fee\": 0.0,\n"
            + "                \"accountEquity\": 14.02924938,\n"
            + "                \"status\": \"Completed\",\n"
            + "                \"remark\": \"Transferred from High-Frequency Trading Account\",\n"
            + "                \"offset\": 51360793,\n"
            + "                \"currency\": \"USDT\"\n"
            + "            },\n"
            + "            {\n"
            + "                \"time\": 1728648000000,\n"
            + "                \"type\": \"RealisedPNL\",\n"
            + "                \"amount\": 0.00630042,\n"
            + "                \"fee\": 0.0,\n"
            + "                \"accountEquity\": 20.0,\n"
            + "                \"status\": \"Completed\",\n"
            + "                \"remark\": \"XBTUSDTM\",\n"
            + "                \"offset\": 51352430,\n"
            + "                \"currency\": \"USDT\"\n"
            + "            }\n"
            + "        ],\n"
            + "        \"hasMore\": false\n"
            + "    }\n"
            + "}";
    RestResponse<GetFuturesLedgerResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetFuturesLedgerResp>>() {});
  }

  /** getMarginAccountDetail Request Get Account Detail - Margin /api/v1/margin/account */
  public static void testGetMarginAccountDetailRequest() throws Exception {
    // $this->assertTrue(true);
  }

  /** getMarginAccountDetail Response Get Account Detail - Margin /api/v1/margin/account */
  public static void testGetMarginAccountDetailResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"debtRatio\": \"0\",\n"
            + "        \"accounts\": [\n"
            + "            {\n"
            + "                \"currency\": \"USDT\",\n"
            + "                \"totalBalance\": \"0.03\",\n"
            + "                \"availableBalance\": \"0.02\",\n"
            + "                \"holdBalance\": \"0.01\",\n"
            + "                \"liability\": \"0\",\n"
            + "                \"maxBorrowSize\": \"0\"\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetMarginAccountDetailResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetMarginAccountDetailResp>>() {});
  }

  /**
   * getIsolatedMarginAccountListV1 Request Get Account List - Isolated Margin - V1
   * /api/v1/isolated/accounts
   */
  public static void testGetIsolatedMarginAccountListV1Request() throws Exception {
    String data = "{\"balanceCurrency\": \"USDT\"}";
    GetIsolatedMarginAccountListV1Req obj =
        mapper.readValue(data, GetIsolatedMarginAccountListV1Req.class);
  }

  /**
   * getIsolatedMarginAccountListV1 Response Get Account List - Isolated Margin - V1
   * /api/v1/isolated/accounts
   */
  public static void testGetIsolatedMarginAccountListV1Response() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"totalConversionBalance\": \"0.01\",\n"
            + "        \"liabilityConversionBalance\": \"0\",\n"
            + "        \"assets\": [\n"
            + "            {\n"
            + "                \"symbol\": \"BTC-USDT\",\n"
            + "                \"status\": \"CLEAR\",\n"
            + "                \"debtRatio\": \"0\",\n"
            + "                \"baseAsset\": {\n"
            + "                    \"currency\": \"BTC\",\n"
            + "                    \"totalBalance\": \"0\",\n"
            + "                    \"holdBalance\": \"0\",\n"
            + "                    \"availableBalance\": \"0\",\n"
            + "                    \"liability\": \"0\",\n"
            + "                    \"interest\": \"0\",\n"
            + "                    \"borrowableAmount\": \"0\"\n"
            + "                },\n"
            + "                \"quoteAsset\": {\n"
            + "                    \"currency\": \"USDT\",\n"
            + "                    \"totalBalance\": \"0.01\",\n"
            + "                    \"holdBalance\": \"0\",\n"
            + "                    \"availableBalance\": \"0.01\",\n"
            + "                    \"liability\": \"0\",\n"
            + "                    \"interest\": \"0\",\n"
            + "                    \"borrowableAmount\": \"0\"\n"
            + "                }\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetIsolatedMarginAccountListV1Resp> resp =
        mapper.readValue(
            data, new TypeReference<RestResponse<GetIsolatedMarginAccountListV1Resp>>() {});
  }

  /**
   * getIsolatedMarginAccountDetailV1 Request Get Account Detail - Isolated Margin - V1
   * /api/v1/isolated/account/{symbol}
   */
  public static void testGetIsolatedMarginAccountDetailV1Request() throws Exception {
    String data = "{\"symbol\": \"example_string_default_value\"}";
    GetIsolatedMarginAccountDetailV1Req obj =
        mapper.readValue(data, GetIsolatedMarginAccountDetailV1Req.class);
  }

  /**
   * getIsolatedMarginAccountDetailV1 Response Get Account Detail - Isolated Margin - V1
   * /api/v1/isolated/account/{symbol}
   */
  public static void testGetIsolatedMarginAccountDetailV1Response() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"symbol\": \"BTC-USDT\",\n"
            + "        \"status\": \"CLEAR\",\n"
            + "        \"debtRatio\": \"0\",\n"
            + "        \"baseAsset\": {\n"
            + "            \"currency\": \"BTC\",\n"
            + "            \"totalBalance\": \"0\",\n"
            + "            \"holdBalance\": \"0\",\n"
            + "            \"availableBalance\": \"0\",\n"
            + "            \"liability\": \"0\",\n"
            + "            \"interest\": \"0\",\n"
            + "            \"borrowableAmount\": \"0\"\n"
            + "        },\n"
            + "        \"quoteAsset\": {\n"
            + "            \"currency\": \"USDT\",\n"
            + "            \"totalBalance\": \"0.01\",\n"
            + "            \"holdBalance\": \"0\",\n"
            + "            \"availableBalance\": \"0.01\",\n"
            + "            \"liability\": \"0\",\n"
            + "            \"interest\": \"0\",\n"
            + "            \"borrowableAmount\": \"0\"\n"
            + "        }\n"
            + "    }\n"
            + "}";
    RestResponse<GetIsolatedMarginAccountDetailV1Resp> resp =
        mapper.readValue(
            data, new TypeReference<RestResponse<GetIsolatedMarginAccountDetailV1Resp>>() {});
  }

  public static void runAllTests() {
    run(AccountApiAutoGeneratedTest::testGetAccountInfoRequest, "testGetAccountInfoRequest");
    run(AccountApiAutoGeneratedTest::testGetAccountInfoResponse, "testGetAccountInfoResponse");
    run(AccountApiAutoGeneratedTest::testGetApikeyInfoRequest, "testGetApikeyInfoRequest");
    run(AccountApiAutoGeneratedTest::testGetApikeyInfoResponse, "testGetApikeyInfoResponse");
    run(
        AccountApiAutoGeneratedTest::testGetSpotAccountTypeRequest,
        "testGetSpotAccountTypeRequest");
    run(
        AccountApiAutoGeneratedTest::testGetSpotAccountTypeResponse,
        "testGetSpotAccountTypeResponse");
    run(
        AccountApiAutoGeneratedTest::testGetSpotAccountListRequest,
        "testGetSpotAccountListRequest");
    run(
        AccountApiAutoGeneratedTest::testGetSpotAccountListResponse,
        "testGetSpotAccountListResponse");
    run(
        AccountApiAutoGeneratedTest::testGetSpotAccountDetailRequest,
        "testGetSpotAccountDetailRequest");
    run(
        AccountApiAutoGeneratedTest::testGetSpotAccountDetailResponse,
        "testGetSpotAccountDetailResponse");
    run(
        AccountApiAutoGeneratedTest::testGetCrossMarginAccountRequest,
        "testGetCrossMarginAccountRequest");
    run(
        AccountApiAutoGeneratedTest::testGetCrossMarginAccountResponse,
        "testGetCrossMarginAccountResponse");
    run(
        AccountApiAutoGeneratedTest::testGetIsolatedMarginAccountRequest,
        "testGetIsolatedMarginAccountRequest");
    run(
        AccountApiAutoGeneratedTest::testGetIsolatedMarginAccountResponse,
        "testGetIsolatedMarginAccountResponse");
    run(AccountApiAutoGeneratedTest::testGetFuturesAccountRequest, "testGetFuturesAccountRequest");
    run(
        AccountApiAutoGeneratedTest::testGetFuturesAccountResponse,
        "testGetFuturesAccountResponse");
    run(AccountApiAutoGeneratedTest::testGetSpotLedgerRequest, "testGetSpotLedgerRequest");
    run(AccountApiAutoGeneratedTest::testGetSpotLedgerResponse, "testGetSpotLedgerResponse");
    run(AccountApiAutoGeneratedTest::testGetSpotHFLedgerRequest, "testGetSpotHFLedgerRequest");
    run(AccountApiAutoGeneratedTest::testGetSpotHFLedgerResponse, "testGetSpotHFLedgerResponse");
    run(AccountApiAutoGeneratedTest::testGetMarginHFLedgerRequest, "testGetMarginHFLedgerRequest");
    run(
        AccountApiAutoGeneratedTest::testGetMarginHFLedgerResponse,
        "testGetMarginHFLedgerResponse");
    run(AccountApiAutoGeneratedTest::testGetFuturesLedgerRequest, "testGetFuturesLedgerRequest");
    run(AccountApiAutoGeneratedTest::testGetFuturesLedgerResponse, "testGetFuturesLedgerResponse");
    run(
        AccountApiAutoGeneratedTest::testGetMarginAccountDetailRequest,
        "testGetMarginAccountDetailRequest");
    run(
        AccountApiAutoGeneratedTest::testGetMarginAccountDetailResponse,
        "testGetMarginAccountDetailResponse");
    run(
        AccountApiAutoGeneratedTest::testGetIsolatedMarginAccountListV1Request,
        "testGetIsolatedMarginAccountListV1Request");
    run(
        AccountApiAutoGeneratedTest::testGetIsolatedMarginAccountListV1Response,
        "testGetIsolatedMarginAccountListV1Response");
    run(
        AccountApiAutoGeneratedTest::testGetIsolatedMarginAccountDetailV1Request,
        "testGetIsolatedMarginAccountDetailV1Request");
    run(
        AccountApiAutoGeneratedTest::testGetIsolatedMarginAccountDetailV1Response,
        "testGetIsolatedMarginAccountDetailV1Response");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
