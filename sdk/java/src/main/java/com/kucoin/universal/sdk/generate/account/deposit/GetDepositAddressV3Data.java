// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.deposit;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetDepositAddressV3Data {
  /** Deposit address */
  @JsonProperty("address")
  private String address;

  /**
   * Address remark. If thereâ€™s no remark, it is empty. When you withdraw from other platforms to
   * KuCoin, you need to fill in memo(tag). Be careful: If you do not fill in memo(tag), your
   * deposit may not be available.
   */
  @JsonProperty("memo")
  private String memo;

  /** The chainId of currency */
  @JsonProperty("chainId")
  private String chainId;

  /** Deposit account type: MAIN (funding account), TRADE (spot trading account) */
  @JsonProperty("to")
  private ToEnum to;

  /**
   * Expiration time; Lightning network expiration time; this field is not applicable to
   * non-Lightning networks
   */
  @JsonProperty("expirationDate")
  private Integer expirationDate;

  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** The token contract address. */
  @JsonProperty("contractAddress")
  private String contractAddress;

  /** The chainName of currency */
  @JsonProperty("chainName")
  private String chainName;

  public enum ToEnum {
    /** Funding account */
    MAIN("MAIN"),
    /** Spot account */
    TRADE("TRADE");

    private final String value;

    ToEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ToEnum fromValue(String value) {
      for (ToEnum b : ToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
