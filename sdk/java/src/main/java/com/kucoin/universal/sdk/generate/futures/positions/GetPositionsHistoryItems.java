// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.positions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetPositionsHistoryItems {
  /** Close ID */
  @JsonProperty("closeId")
  private String closeId;

  /** User ID */
  @JsonProperty("userId")
  private String userId;

  /**
   * Symbol of the contract, Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-3470220)
   */
  @JsonProperty("symbol")
  private String symbol;

  /** Currency used to settle trades */
  @JsonProperty("settleCurrency")
  private String settleCurrency;

  /** Leverage applied to the order */
  @JsonProperty("leverage")
  private String leverage;

  /** Type of closure */
  @JsonProperty("type")
  private String type;

  /** Net profit and loss (after deducting fees and funding costs) */
  @JsonProperty("pnl")
  private String pnl;

  /** Accumulated realised gross profit value */
  @JsonProperty("realisedGrossCost")
  private String realisedGrossCost;

  /** Accumulated realised profit withdrawn from the position */
  @JsonProperty("withdrawPnl")
  private String withdrawPnl;

  /** Accumulated trading fees */
  @JsonProperty("tradeFee")
  private String tradeFee;

  /** Accumulated funding fees */
  @JsonProperty("fundingFee")
  private String fundingFee;

  /** Time when the position was opened */
  @JsonProperty("openTime")
  private Long openTime;

  /** Time when the position was closed (default sorted in descending order) */
  @JsonProperty("closeTime")
  private Long closeTime;

  /** Opening price of the position */
  @JsonProperty("openPrice")
  private String openPrice;

  /** Closing price of the position */
  @JsonProperty("closePrice")
  private String closePrice;

  /** Margin Mode: CROSSï¼ŒISOLATED */
  @JsonProperty("marginMode")
  private MarginModeEnum marginMode;

  /** */
  @JsonProperty("realisedGrossCostNew")
  private String realisedGrossCostNew;

  /** Tax */
  @JsonProperty("tax")
  private String tax;

  /** */
  @JsonProperty("roe")
  private String roe;

  /** */
  @JsonProperty("liquidAmount")
  private String liquidAmount;

  /** */
  @JsonProperty("liquidPrice")
  private String liquidPrice;

  /** Position side */
  @JsonProperty("side")
  private String side;

  public enum MarginModeEnum {
    /** cross margin */
    CROSS("CROSS"),
    /** isolated margin */
    ISOLATED("ISOLATED");

    private final String value;

    MarginModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MarginModeEnum fromValue(String value) {
      for (MarginModeEnum b : MarginModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
