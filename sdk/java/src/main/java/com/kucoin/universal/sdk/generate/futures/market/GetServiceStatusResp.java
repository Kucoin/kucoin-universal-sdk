// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.market;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetServiceStatusResp
    implements Response<GetServiceStatusResp, RestResponse<GetServiceStatusResp>> {
  /** */
  @JsonProperty("msg")
  private String msg;

  /**
   * Status of service: open: normal transaction; close: Stop Trading/Maintenance; cancelonly: can
   * only cancel the order but not place order
   */
  @JsonProperty("status")
  private StatusEnum status;

  /** common response */
  @JsonIgnore private RestResponse<GetServiceStatusResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<GetServiceStatusResp> response) {
    this.commonResponse = response;
  }

  public enum StatusEnum {
    /** normal transaction */
    OPEN("open"),
    /** Stop Trading/Maintenance */
    CLOSE("close"),
    /** can only cancel the order but not place order */
    CANCELONLY("cancelonly");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
