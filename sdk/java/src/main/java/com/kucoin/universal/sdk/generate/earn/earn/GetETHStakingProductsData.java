// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.earn.earn;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetETHStakingProductsData {
  /** Product ID */
  @JsonProperty("id")
  private String id;

  /** Product category: ETH2 (ETH Staking) */
  @JsonProperty("category")
  private CategoryEnum category;

  /** Product subtype: DEMAND (demand) */
  @JsonProperty("type")
  private TypeEnum type;

  /** Maximum precision supported */
  @JsonProperty("precision")
  private Integer precision;

  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** Income currency */
  @JsonProperty("incomeCurrency")
  private String incomeCurrency;

  /** Annualized Rate of Return, for example, 0.035 is equal to 3.5% annualized rate of return */
  @JsonProperty("returnRate")
  private String returnRate;

  /** Min. user subscribe amount */
  @JsonProperty("userLowerLimit")
  private String userLowerLimit;

  /** Max. user subscription amount */
  @JsonProperty("userUpperLimit")
  private String userUpperLimit;

  /** Products total subscription amount */
  @JsonProperty("productUpperLimit")
  private String productUpperLimit;

  /** Remaining product subscription amount */
  @JsonProperty("productRemainAmount")
  private String productRemainAmount;

  /** Redemption waiting period (days) */
  @JsonProperty("redeemPeriod")
  private Integer redeemPeriod;

  /**
   * Redemption channel: MANUAL (manual redemption), TRANS_DEMAND (transfer to corresponding demand
   * product upon maturity), AUTO (redeem to funding account upon maturity)
   */
  @JsonProperty("redeemType")
  private RedeemTypeEnum redeemType;

  /** Income release type: DAILY (daily release), AFTER (release after product ends) */
  @JsonProperty("incomeReleaseType")
  private IncomeReleaseTypeEnum incomeReleaseType;

  /** Subscription start time, in milliseconds */
  @JsonProperty("applyStartTime")
  private Long applyStartTime;

  /** Subscription end time, in milliseconds */
  @JsonProperty("applyEndTime")
  private Long applyEndTime;

  /** Product earliest interest start time, in milliseconds */
  @JsonProperty("lockStartTime")
  private Long lockStartTime;

  /** Product maturity time, in milliseconds */
  @JsonProperty("lockEndTime")
  private Long lockEndTime;

  /** Most recent interest date (milliseconds) */
  @JsonProperty("interestDate")
  private Long interestDate;

  /** Whether the product is exclusive to new users: 0 (no), 1 (yes) */
  @JsonProperty("newUserOnly")
  private NewUserOnlyEnum newUserOnly;

  /** Whether the fixed product supports early redemption: 0 (no), 1 (yes) */
  @JsonProperty("earlyRedeemSupported")
  private EarlyRedeemSupportedEnum earlyRedeemSupported;

  /** Product duration (days) */
  @JsonProperty("duration")
  private Integer duration;

  /**
   * Product status: ONGOING (Subscription in progress), PENDING (Preheating Subscription), FULL
   * (Subscribed), INTERESTING (Interest in progress)
   */
  @JsonProperty("status")
  private StatusEnum status;

  public enum CategoryEnum {
    /** */
    ETH2("ETH2");

    private final String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** demand */
    DEMAND("DEMAND");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum RedeemTypeEnum {
    /** */
    MANUAL("MANUAL"),
    /** */
    TRANS_DEMAND("TRANS_DEMAND"),
    /** */
    AUTO("AUTO");

    private final String value;

    RedeemTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RedeemTypeEnum fromValue(String value) {
      for (RedeemTypeEnum b : RedeemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum IncomeReleaseTypeEnum {
    /** */
    DAILY("DAILY"),
    /** */
    AFTER("AFTER");

    private final String value;

    IncomeReleaseTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IncomeReleaseTypeEnum fromValue(String value) {
      for (IncomeReleaseTypeEnum b : IncomeReleaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum NewUserOnlyEnum {
    /** */
    _0(0),
    /** */
    _1(1);

    private final Integer value;

    NewUserOnlyEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NewUserOnlyEnum fromValue(Integer value) {
      for (NewUserOnlyEnum b : NewUserOnlyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum EarlyRedeemSupportedEnum {
    /** */
    _0(0),
    /** */
    _1(1);

    private final Integer value;

    EarlyRedeemSupportedEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EarlyRedeemSupportedEnum fromValue(Integer value) {
      for (EarlyRedeemSupportedEnum b : EarlyRedeemSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StatusEnum {
    /** */
    ONGOING("ONGOING"),
    /** */
    PENDING("PENDING"),
    /** */
    FULL("FULL"),
    /** */
    INTERESTING("INTERESTING");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
