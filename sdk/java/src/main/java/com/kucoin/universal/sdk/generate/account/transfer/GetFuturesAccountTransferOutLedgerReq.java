// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.transfer;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Request;
import java.util.ArrayList;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Builder
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetFuturesAccountTransferOutLedgerReq implements Request {
  /** currency */
  @JsonProperty("currency")
  private String currency;

  /** Status PROCESSING, SUCCESS, FAILURE */
  @JsonProperty("type")
  private TypeEnum type;

  /** Status List PROCESSING, SUCCESS, FAILURE */
  @JsonProperty("tag")
  @Builder.Default
  private List<String> tag = new ArrayList<>();

  /** Start time (milliseconds) */
  @JsonProperty("startAt")
  private Long startAt;

  /** End time (milliseconds) */
  @JsonProperty("endAt")
  private Long endAt;

  /** Current request page. The default currentPage is 1 */
  @JsonProperty("currentPage")
  @Builder.Default
  private Long currentPage = 1l;

  /** pageSize; the default pageSize is 50 */
  @JsonProperty("pageSize")
  @Builder.Default
  private Long pageSize = 50l;

  public enum TypeEnum {
    /** */
    MAIN("MAIN"),
    /** */
    TRADE("TRADE"),
    /** */
    MARGIN("MARGIN"),
    /** */
    ISOLATED("ISOLATED");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
