package com.kucoin.universal.sdk.generate.margin.marginprivate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.WsMessage;
import java.util.ArrayList;
import java.util.List;

class MarginPrivateWsAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** crossMarginPosition Get Cross Margin Position change /crossMarginPosition/margin/position */
  public static void testCrossMarginPositionResponse() throws Exception {
    String data =
        "{\"topic\":\"/margin/position\",\"subject\":\"debt.ratio\",\"type\":\"message\",\"userId\":\"633559791e1cbc0001f319bc\",\"channelType\":\"private\",\"data\":{\"debtRatio\":0,\"totalAsset\":0.00052431772284080000000,\"marginCoefficientTotalAsset\":\"0.0005243177228408\",\"totalDebt\":\"0\",\"assetList\":{\"BTC\":{\"total\":\"0.00002\",\"available\":\"0\",\"hold\":\"0.00002\"},\"USDT\":{\"total\":\"33.68855864\",\"available\":\"15.01916691\",\"hold\":\"18.66939173\"}},\"debtList\":{\"BTC\":\"0\",\"USDT\":\"0\"},\"timestamp\":1729912435657}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    CrossMarginPositionEvent event =
        mapper.convertValue(resp.getData(), CrossMarginPositionEvent.class);
  }

  /**
   * isolatedMarginPosition Get Isolated Margin Position change
   * /isolatedMarginPosition/margin/isolatedPosition:_symbol_
   */
  public static void testIsolatedMarginPositionResponse() throws Exception {
    String data =
        "{\"topic\":\"/margin/isolatedPosition:BTC-USDT\",\"subject\":\"positionChange\",\"type\":\"message\",\"userId\":\"633559791e1cbc0001f319bc\",\"channelType\":\"private\",\"data\":{\"tag\":\"BTC-USDT\",\"status\":\"DEBT\",\"statusBizType\":\"DEFAULT_DEBT\",\"accumulatedPrincipal\":\"5.01\",\"changeAssets\":{\"BTC\":{\"total\":\"0.00043478\",\"hold\":\"0\",\"liabilityPrincipal\":\"0\",\"liabilityInterest\":\"0\"},\"USDT\":{\"total\":\"0.98092004\",\"hold\":\"0\",\"liabilityPrincipal\":\"26\",\"liabilityInterest\":\"0.00025644\"}},\"timestamp\":1730121097742}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    IsolatedMarginPositionEvent event =
        mapper.convertValue(resp.getData(), IsolatedMarginPositionEvent.class);
  }

  public static void runAllTests() {
    run(
        MarginPrivateWsAutoGeneratedTest::testCrossMarginPositionResponse,
        "testCrossMarginPositionResponse");
    run(
        MarginPrivateWsAutoGeneratedTest::testIsolatedMarginPositionResponse,
        "testIsolatedMarginPositionResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
