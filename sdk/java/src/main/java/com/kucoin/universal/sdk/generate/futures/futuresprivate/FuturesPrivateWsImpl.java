// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.futuresprivate;

import com.kucoin.universal.sdk.internal.interfaces.WebSocketService;

public class FuturesPrivateWsImpl implements FuturesPrivateWs {

  private final WebSocketService wsService;

  public FuturesPrivateWsImpl(WebSocketService wsService) {
    this.wsService = wsService;
  }

  public String allOrder(AllOrderEvent.Callback callback) {
    String topicPrefix = "/contractMarket/tradeOrders";

    String[] args = {};

    return this.wsService.subscribe(topicPrefix, args, AllOrderEvent.CallbackAdapters.of(callback));
  }

  public String allPosition(AllPositionEvent.Callback callback) {
    String topicPrefix = "/contract/positionAll";

    String[] args = {};

    return this.wsService.subscribe(
        topicPrefix, args, AllPositionEvent.CallbackAdapters.of(callback));
  }

  public String balance(BalanceEvent.Callback callback) {
    String topicPrefix = "/contractAccount/wallet";

    String[] args = {};

    return this.wsService.subscribe(topicPrefix, args, BalanceEvent.CallbackAdapters.of(callback));
  }

  public String crossLeverage(CrossLeverageEvent.Callback callback) {
    String topicPrefix = "/contract/crossLeverage";

    String[] args = {};

    return this.wsService.subscribe(
        topicPrefix, args, CrossLeverageEvent.CallbackAdapters.of(callback));
  }

  public String marginMode(MarginModeEvent.Callback callback) {
    String topicPrefix = "/contract/marginMode";

    String[] args = {};

    return this.wsService.subscribe(
        topicPrefix, args, MarginModeEvent.CallbackAdapters.of(callback));
  }

  public String order(String symbol, OrderEvent.Callback callback) {
    String topicPrefix = "/contractMarket/tradeOrders";

    String[] args = {symbol};

    return this.wsService.subscribe(topicPrefix, args, OrderEvent.CallbackAdapters.of(callback));
  }

  public String position(String symbol, PositionEvent.Callback callback) {
    String topicPrefix = "/contract/position";

    String[] args = {symbol};

    return this.wsService.subscribe(topicPrefix, args, PositionEvent.CallbackAdapters.of(callback));
  }

  public String stopOrders(StopOrdersEvent.Callback callback) {
    String topicPrefix = "/contractMarket/advancedOrders";

    String[] args = {};

    return this.wsService.subscribe(
        topicPrefix, args, StopOrdersEvent.CallbackAdapters.of(callback));
  }

  public void unSubscribe(String id) {
    this.wsService.unsubscribe(id);
  }

  public void start() {
    this.wsService.start();
  }

  public void stop() {
    this.wsService.stop();
  }
}
