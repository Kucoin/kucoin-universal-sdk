// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.spot.spotprivate;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;
import com.kucoin.universal.sdk.model.WsMessage;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class OrderV1Event implements Response<OrderV1Event, WsMessage> {
  /** Cumulative number of cancellations */
  @JsonProperty("canceledSize")
  private String canceledSize;

  /** Client Order ID: The ClientOid field is a unique ID created by the user */
  @JsonProperty("clientOid")
  private String clientOid;

  /** Cumulative number filled */
  @JsonProperty("filledSize")
  private String filledSize;

  /** The unique order id generated by the trading system */
  @JsonProperty("orderId")
  private String orderId;

  /** Gateway received the message time (milliseconds) */
  @JsonProperty("orderTime")
  private Long orderTime;

  /** User-specified order type */
  @JsonProperty("orderType")
  private OrderTypeEnum orderType;

  /** User-specified order size */
  @JsonProperty("originSize")
  private String originSize;

  /** Specify price for currency */
  @JsonProperty("price")
  private String price;

  /** Remain funds */
  @JsonProperty("remainFunds")
  private String remainFunds;

  /** Remain size */
  @JsonProperty("remainSize")
  private String remainSize;

  /** buy or sell */
  @JsonProperty("side")
  private SideEnum side;

  /** User-specified order size */
  @JsonProperty("size")
  private String size;

  /** Order Status */
  @JsonProperty("status")
  private StatusEnum status;

  /** Symbol */
  @JsonProperty("symbol")
  private String symbol;

  /** Match engine received the message time (nanoseconds) */
  @JsonProperty("ts")
  private Long ts;

  /** Order Type */
  @JsonProperty("type")
  private TypeEnum type;

  /** The size before order update */
  @JsonProperty("oldSize")
  private String oldSize;

  /** Actual Fee Type */
  @JsonProperty("feeType")
  private FeeTypeEnum feeType;

  /**
   * Actual transaction order type, If the counterparty order is an [Hidden/Iceberg
   * Order](https://www.kucoin.com/docs-new/doc-338146), even if it is a maker order, this param
   * will be displayed as taker. For actual trading fee, please refer to the **feeType**
   */
  @JsonProperty("liquidity")
  private LiquidityEnum liquidity;

  /** Match Price (when the type is \"match\") */
  @JsonProperty("matchPrice")
  private String matchPrice;

  /** Match Size (when the type is \"match\") */
  @JsonProperty("matchSize")
  private String matchSize;

  /** Trade ID: Generated by Matching engine. */
  @JsonProperty("tradeId")
  private String tradeId;

  /** common response */
  @JsonIgnore private WsMessage commonResponse;

  @Override
  public void setCommonResponse(WsMessage response) {
    this.commonResponse = response;
  }

  @FunctionalInterface
  public interface Callback {
    void onEvent(String topic, String subject, OrderV1Event data);
  }

  public static class CallbackAdapters {
    public static WebSocketMessageCallback<OrderV1Event> of(Callback callback) {
      return (msg, objectMapper) ->
          callback.onEvent(
              msg.getTopic(),
              msg.getSubject(),
              objectMapper.convertValue(msg.getData(), OrderV1Event.class));
    }
  }

  public enum OrderTypeEnum {
    /** limit */
    LIMIT("limit"),
    /** market */
    MARKET("market");

    private final String value;

    OrderTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderTypeEnum fromValue(String value) {
      for (OrderTypeEnum b : OrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SideEnum {
    /** buy */
    BUY("buy"),
    /** sell */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StatusEnum {
    /** the order enters the matching system */
    _NEW("new"),
    /** the order is in the order book (maker order) */
    OPEN("open"),
    /**
     * when taker order executes with orders in the order book, the taker order status is “match”
     */
    MATCH("match"),
    /** the order is fully executed successfully */
    DONE("done");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TypeEnum {
    /** the order is in the order book (maker order) */
    OPEN("open"),
    /**
     * The message sent when the order is match, 1. When the status is open and the type is match,
     * it is a maker match. 2. When the status is match and the type is match, it is a taker match.
     */
    MATCH("match"),
    /**
     * The message sent due to the order being modified: STP triggering, partial cancellation of the
     * order. Includes these three scenarios: 1. When the status is open and the type is update:
     * partial amounts of the order have been canceled, or STP triggers 2. When the status is match
     * and the type is update: STP triggers 3. When the status is done and the type is update:
     * partial amounts of the order have been filled and the unfilled part got canceled, or STP is
     * triggered.
     */
    UPDATE("update"),
    /** The message sent when the status of the order changes to DONE after the transaction */
    FILLED("filled"),
    /** The message sent when the status of the order changes to DONE due to being canceled */
    CANCELED("canceled");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum FeeTypeEnum {
    /** takerFee */
    TAKERFEE("takerFee"),
    /** makerFee */
    MAKERFEE("makerFee");

    private final String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum LiquidityEnum {
    /** taker */
    TAKER("taker"),
    /** maker */
    MAKER("maker");

    private final String value;

    LiquidityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LiquidityEnum fromValue(String value) {
      for (LiquidityEnum b : LiquidityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
