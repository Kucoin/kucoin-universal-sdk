// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.account;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetIsolatedMarginAccountListV1Assets {
  /** Symbol */
  @JsonProperty("symbol")
  private String symbol;

  /**
   * Position status: Existing liabilities-DEBT, No liabilities-CLEAR, Bankrupcy (after position
   * enters a negative balance)-BANKRUPTCY, Existing borrowings-IN_BORROW, Existing
   * repayments-IN_REPAY, Under liquidation-IN_LIQUIDATION, Under auto-renewal assets-IN_AUTO_RENEW
   * .
   */
  @JsonProperty("status")
  private StatusEnum status;

  /** debt ratio */
  @JsonProperty("debtRatio")
  private String debtRatio;

  /** */
  @JsonProperty("baseAsset")
  private GetIsolatedMarginAccountListV1AssetsBaseAsset baseAsset;

  /** */
  @JsonProperty("quoteAsset")
  private GetIsolatedMarginAccountListV1AssetsQuoteAsset quoteAsset;

  public enum StatusEnum {
    /** */
    DEBT("DEBT"),
    /** */
    CLEAR("CLEAR"),
    /** */
    BANKRUPTCY("BANKRUPTCY"),
    /** */
    IN_BORROW("IN_BORROW"),
    /** */
    IN_REPAY("IN_REPAY"),
    /** */
    IN_LIQUIDATION("IN_LIQUIDATION"),
    /** */
    IN_AUTO_RENEW("IN_AUTO_RENEW");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
