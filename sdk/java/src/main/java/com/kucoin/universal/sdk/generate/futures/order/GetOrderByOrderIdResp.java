// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetOrderByOrderIdResp
    implements Response<GetOrderByOrderIdResp, RestResponse<GetOrderByOrderIdResp>> {
  /** Order ID */
  @JsonProperty("id")
  private String id;

  /**
   * Symbol of the contract, Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-3470220)
   */
  @JsonProperty("symbol")
  private String symbol;

  /** Order type, market order or limit order */
  @JsonProperty("type")
  private TypeEnum type;

  /** Transaction side */
  @JsonProperty("side")
  private SideEnum side;

  /** Order price */
  @JsonProperty("price")
  private String price;

  /** Order quantity */
  @JsonProperty("size")
  private Integer size;

  /** Order value */
  @JsonProperty("value")
  private String value;

  /** Executed size of funds */
  @JsonProperty("dealValue")
  private String dealValue;

  /** Executed quantity */
  @JsonProperty("dealSize")
  private Integer dealSize;

  /**
   * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into these
   * strategies: CN, CO, CB. Not supported DC at the moment.
   */
  @JsonProperty("stp")
  private StpEnum stp;

  /** A mark to the stop order type */
  @JsonProperty("stop")
  private StopEnum stop;

  /** Trigger price type of stop orders */
  @JsonProperty("stopPriceType")
  private StopPriceTypeEnum stopPriceType;

  /** Mark to show whether the stop order is triggered */
  @JsonProperty("stopTriggered")
  private Boolean stopTriggered;

  /** Trigger price of stop orders */
  @JsonProperty("stopPrice")
  private Double stopPrice;

  /** Time in force policy type */
  @JsonProperty("timeInForce")
  private String timeInForce;

  /** Mark of post only */
  @JsonProperty("postOnly")
  private Boolean postOnly;

  /** Mark of the hidden order */
  @JsonProperty("hidden")
  private Boolean hidden;

  /** Mark of the iceberg order */
  @JsonProperty("iceberg")
  private Boolean iceberg;

  /** Leverage of the order */
  @JsonProperty("leverage")
  private String leverage;

  /** A mark to forcely hold the funds for an order */
  @JsonProperty("forceHold")
  private Boolean forceHold;

  /** A mark to close the position */
  @JsonProperty("closeOrder")
  private Boolean closeOrder;

  /** Visible size of the iceberg order */
  @JsonProperty("visibleSize")
  private Integer visibleSize;

  /** Unique order id created by users to identify their orders */
  @JsonProperty("clientOid")
  private String clientOid;

  /** Remark */
  @JsonProperty("remark")
  private String remark;

  /** tag order source */
  @JsonProperty("tags")
  private String tags;

  /** Mark of the active orders */
  @JsonProperty("isActive")
  private Boolean isActive;

  /** Mark of the canceled orders */
  @JsonProperty("cancelExist")
  private Boolean cancelExist;

  /** Time the order created */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** last update time */
  @JsonProperty("updatedAt")
  private Long updatedAt;

  /** Order Endtime */
  @JsonProperty("endAt")
  private Long endAt;

  /** Order create time in nanosecond */
  @JsonProperty("orderTime")
  private Long orderTime;

  /** settlement currency */
  @JsonProperty("settleCurrency")
  private String settleCurrency;

  /** Margin mode: ISOLATED (isolated), CROSS (cross margin). */
  @JsonProperty("marginMode")
  private MarginModeEnum marginMode;

  /**
   * Average transaction price, forward contract average transaction price = sum (transaction value)
   * / sum (transaction quantity), reverse contract average transaction price = sum (transaction
   * quantity) / sum (transaction value). Transaction quantity = lots * multiplier
   */
  @JsonProperty("avgDealPrice")
  private String avgDealPrice;

  /** Value of the executed orders */
  @JsonProperty("filledSize")
  private Integer filledSize;

  /** Executed order quantity */
  @JsonProperty("filledValue")
  private String filledValue;

  /** order status: “open” or “done” */
  @JsonProperty("status")
  private StatusEnum status;

  /** A mark to reduce the position size only */
  @JsonProperty("reduceOnly")
  private Boolean reduceOnly;

  /** common response */
  @JsonIgnore private RestResponse<GetOrderByOrderIdResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<GetOrderByOrderIdResp> response) {
    this.commonResponse = response;
  }

  public enum TypeEnum {
    /** Market Order */
    MARKET("market"),
    /** Limit Order */
    LIMIT("limit");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum SideEnum {
    /** buy */
    BUY("buy"),
    /** sell */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StpEnum {
    /** Null means not stp order */
    NULL(""),
    /** Cancel new, Cancel the new order */
    CN("CN"),
    /** Cancel old, Cancel the old order */
    CO("CO"),
    /** Cancel both, Cancel both sides */
    CB("CB");

    private final String value;

    StpEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StpEnum fromValue(String value) {
      for (StpEnum b : StpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopEnum {
    /** Triggers when the price reaches or goes below the stopPrice. */
    DOWN("down"),
    /** Triggers when the price reaches or goes above the stopPrice. */
    UP("up"),
    /** Not a stop order */
    NONE("");

    private final String value;

    StopEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopEnum fromValue(String value) {
      for (StopEnum b : StopEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopPriceTypeEnum {
    /**
     * TP for trade price, The last trade price is the last price at which an order was filled. This
     * price can be found in the latest match message.
     */
    TRADEPRICE("TP"),
    /**
     * MP for mark price, The mark price can be obtained through relevant OPEN API for index
     * services
     */
    MARKPRICE("MP"),
    /**
     * IP for index price, The index price can be obtained through relevant OPEN API for index
     * services
     */
    INDEXPRICE("IP"),
    /** Not a stop order */
    NONE("");

    private final String value;

    StopPriceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopPriceTypeEnum fromValue(String value) {
      for (StopPriceTypeEnum b : StopPriceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum MarginModeEnum {
    /** Cross margin */
    CROSS("CROSS"),
    /** Isolated margin */
    ISOLATED("ISOLATED");

    private final String value;

    MarginModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MarginModeEnum fromValue(String value) {
      for (MarginModeEnum b : MarginModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StatusEnum {
    /** open order */
    OPEN("open"),
    /** done order */
    DONE("done");

    private final String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
