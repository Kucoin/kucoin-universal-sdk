// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.futures.order;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetTradeHistoryItems {
  /**
   * Symbol of the contract. Please refer to [Get Symbol endpoint:
   * symbol](https://www.kucoin.com/docs-new/api-3470220)
   */
  @JsonProperty("symbol")
  private String symbol;

  /** Trade ID */
  @JsonProperty("tradeId")
  private String tradeId;

  /** Order ID */
  @JsonProperty("orderId")
  private String orderId;

  /** Transaction side */
  @JsonProperty("side")
  private SideEnum side;

  /** Liquidity-taker or -maker */
  @JsonProperty("liquidity")
  private LiquidityEnum liquidity;

  /** Whether to force processing as a taker */
  @JsonProperty("forceTaker")
  private Boolean forceTaker;

  /** Filled price */
  @JsonProperty("price")
  private String price;

  /** Filled amount */
  @JsonProperty("size")
  private Integer size;

  /** Order value */
  @JsonProperty("value")
  private String value;

  /** Opening transaction fee */
  @JsonProperty("openFeePay")
  private String openFeePay;

  /** Closing transaction fee */
  @JsonProperty("closeFeePay")
  private String closeFeePay;

  /** A mark to the stop order type */
  @JsonProperty("stop")
  private StopEnum stop;

  /** Fee Rate */
  @JsonProperty("feeRate")
  private String feeRate;

  /** Fixed fees (Deprecated field, no actual use of the value field) */
  @JsonProperty("fixFee")
  private String fixFee;

  /** Charging currency */
  @JsonProperty("feeCurrency")
  private String feeCurrency;

  /** Trade time in nanoseconds */
  @JsonProperty("tradeTime")
  private Long tradeTime;

  /** Deprecated field, no actual use of the value field */
  @JsonProperty("subTradeType")
  private String subTradeType;

  /** Margin mode: ISOLATED (isolated), CROSS (cross margin). */
  @JsonProperty("marginMode")
  private MarginModeEnum marginMode;

  /** Settle currency */
  @JsonProperty("settleCurrency")
  private String settleCurrency;

  /** Order type */
  @JsonProperty("displayType")
  private DisplayTypeEnum displayType;

  /** Trading fee */
  @JsonProperty("fee")
  private String fee;

  /** Order type */
  @JsonProperty("orderType")
  private OrderTypeEnum orderType;

  /** Trade type (trade, liquid, adl or settlement) */
  @JsonProperty("tradeType")
  private TradeTypeEnum tradeType;

  /** Order creation time */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** Opening tax fee (Only KYC users in some regions have this parameter) */
  @JsonProperty("openFeeTaxPay")
  private String openFeeTaxPay;

  /** Close tax fee (Only KYC users in some regions have this parameter) */
  @JsonProperty("closeFeeTaxPay")
  private String closeFeeTaxPay;

  public enum SideEnum {
    /** buy */
    BUY("buy"),
    /** sell */
    SELL("sell");

    private final String value;

    SideEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum LiquidityEnum {
    /** taker */
    TAKER("taker"),
    /** maker */
    MAKER("maker");

    private final String value;

    LiquidityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LiquidityEnum fromValue(String value) {
      for (LiquidityEnum b : LiquidityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum StopEnum {
    /** Triggers when the price reaches or goes below the stopPrice. */
    DOWN("down"),
    /** Triggers when the price reaches or goes above the stopPrice. */
    UP("up"),
    /** Not a stop order */
    NONE("");

    private final String value;

    StopEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StopEnum fromValue(String value) {
      for (StopEnum b : StopEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum MarginModeEnum {
    /** Isolated margin */
    ISOLATED("ISOLATED"),
    /** Cross margin */
    CROSS("CROSS");

    private final String value;

    MarginModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MarginModeEnum fromValue(String value) {
      for (MarginModeEnum b : MarginModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum DisplayTypeEnum {
    /** limit order */
    LIMIT("limit"),
    /** market order */
    MARKET("market"),
    /** stop limit order */
    LIMITSTOP("limit_stop"),
    /** stop market order */
    MARKETSTOP("market_stop");

    private final String value;

    DisplayTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DisplayTypeEnum fromValue(String value) {
      for (DisplayTypeEnum b : DisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum OrderTypeEnum {
    /** market */
    MARKET("market"),
    /** limit */
    LIMIT("limit");

    private final String value;

    OrderTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderTypeEnum fromValue(String value) {
      for (OrderTypeEnum b : OrderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum TradeTypeEnum {
    /** trade */
    TRADE("trade"),
    /** liquid */
    LIQUID("liquid"),
    /** adl */
    ADL("adl"),
    /** settlement */
    SETTLEMENT("settlement");

    private final String value;

    TradeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TradeTypeEnum fromValue(String value) {
      for (TradeTypeEnum b : TradeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
