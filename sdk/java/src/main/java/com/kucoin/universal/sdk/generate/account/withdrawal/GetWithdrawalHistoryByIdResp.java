// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package com.kucoin.universal.sdk.generate.account.withdrawal;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kucoin.universal.sdk.internal.interfaces.Response;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@Data
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class GetWithdrawalHistoryByIdResp
    implements Response<GetWithdrawalHistoryByIdResp, RestResponse<GetWithdrawalHistoryByIdResp>> {
  /** Unique ID */
  @JsonProperty("id")
  private String id;

  /** User ID */
  @JsonProperty("uid")
  private Integer uid;

  /** A unique currency code that will never change */
  @JsonProperty("currency")
  private String currency;

  /** The chain id of currency */
  @JsonProperty("chainId")
  private String chainId;

  /** Chain name of currency */
  @JsonProperty("chainName")
  private String chainName;

  /** Currency name; will change after renaming */
  @JsonProperty("currencyName")
  private String currencyName;

  /** Status. Available value: REVIEW, PROCESSING, WALLET_PROCESSING, SUCCESS and FAILURE */
  @JsonProperty("status")
  private String status;

  /** Failure reason code */
  @JsonProperty("failureReason")
  private String failureReason;

  /** Failure reason message */
  @JsonProperty("failureReasonMsg")
  private String failureReasonMsg;

  /** Withwrawal address */
  @JsonProperty("address")
  private String address;

  /** Address remark. If thereâ€™s no remark, it is empty. */
  @JsonProperty("memo")
  private String memo;

  /** Internal withdrawal or not. */
  @JsonProperty("isInner")
  private Boolean isInner;

  /** Withwrawal amount */
  @JsonProperty("amount")
  private String amount;

  /** Fees charged for withwrawal */
  @JsonProperty("fee")
  private String fee;

  /** Wallet Transaction ID */
  @JsonProperty("walletTxId")
  private String walletTxId;

  /** Address remark */
  @JsonProperty("addressRemark")
  private String addressRemark;

  /** Remark */
  @JsonProperty("remark")
  private String remark;

  /** Creation Time (milliseconds) */
  @JsonProperty("createdAt")
  private Long createdAt;

  /** */
  @JsonProperty("cancelType")
  private CancelTypeEnum cancelType;

  /** Users in some regions need query this field */
  @JsonProperty("taxes")
  private List<String> taxes = new ArrayList<>();

  /** Tax description */
  @JsonProperty("taxDescription")
  private String taxDescription;

  /** Return status */
  @JsonProperty("returnStatus")
  private ReturnStatusEnum returnStatus;

  /** Return amount */
  @JsonProperty("returnAmount")
  private String returnAmount;

  /** Return currency */
  @JsonProperty("returnCurrency")
  private String returnCurrency;

  /** common response */
  @JsonIgnore private RestResponse<GetWithdrawalHistoryByIdResp> commonResponse;

  @Override
  public void setCommonResponse(RestResponse<GetWithdrawalHistoryByIdResp> response) {
    this.commonResponse = response;
  }

  public enum CancelTypeEnum {
    /** Cancellable */
    CANCELABLE("CANCELABLE"),
    /** Cancelling */
    CANCELING("CANCELING"),
    /** Non-Cancellable */
    NON_CANCELABLE("NON_CANCELABLE");

    private final String value;

    CancelTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CancelTypeEnum fromValue(String value) {
      for (CancelTypeEnum b : CancelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public enum ReturnStatusEnum {
    /** No returned */
    NOT_RETURN("NOT_RETURN"),
    /** To be returned */
    PROCESSING("PROCESSING"),
    /** Returned */
    SUCCESS("SUCCESS");

    private final String value;

    ReturnStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReturnStatusEnum fromValue(String value) {
      for (ReturnStatusEnum b : ReturnStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
}
