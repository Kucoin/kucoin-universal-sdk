
    /**
    * borrow
    * Borrow
    * /api/v3/margin/borrow
    */
    @Test
    public void testBorrow() throws Exception {
        BorrowReq.BorrowReqBuilder builder = BorrowReq.builder();
        builder.currency(?).size(?).timeInForce(?).symbol(?).isIsolated(?).isHf(?);
        BorrowReq req = builder.build();
        BorrowResp resp = api.borrow(req);
        Assertions.assertNotNull(resp.getOrderNo());
        Assertions.assertNotNull(resp.getActualSize());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getBorrowHistory
    * Get Borrow History
    * /api/v3/margin/borrow
    */
    @Test
    public void testGetBorrowHistory() throws Exception {
        GetBorrowHistoryReq.GetBorrowHistoryReqBuilder builder = GetBorrowHistoryReq.builder();
        builder.currency(?).isIsolated(?).symbol(?).orderNo(?).startTime(?).endTime(?).currentPage(?).pageSize(?);
        GetBorrowHistoryReq req = builder.build();
        GetBorrowHistoryResp resp = api.getBorrowHistory(req);
        Assertions.assertNotNull(resp.getTimestamp());
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getOrderNo());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getCurrency());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getActualSize());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getCreatedTime());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * repay
    * Repay
    * /api/v3/margin/repay
    */
    @Test
    public void testRepay() throws Exception {
        RepayReq.RepayReqBuilder builder = RepayReq.builder();
        builder.currency(?).size(?).symbol(?).isIsolated(?).isHf(?);
        RepayReq req = builder.build();
        RepayResp resp = api.repay(req);
        Assertions.assertNotNull(resp.getTimestamp());
        Assertions.assertNotNull(resp.getOrderNo());
        Assertions.assertNotNull(resp.getActualSize());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getRepayHistory
    * Get Repay History
    * /api/v3/margin/repay
    */
    @Test
    public void testGetRepayHistory() throws Exception {
        GetRepayHistoryReq.GetRepayHistoryReqBuilder builder = GetRepayHistoryReq.builder();
        builder.currency(?).isIsolated(?).symbol(?).orderNo(?).startTime(?).endTime(?).currentPage(?).pageSize(?);
        GetRepayHistoryReq req = builder.build();
        GetRepayHistoryResp resp = api.getRepayHistory(req);
        Assertions.assertNotNull(resp.getTimestamp());
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getOrderNo());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getCurrency());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getPrincipal());
            Assertions.assertNotNull(item.getInterest());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getCreatedTime());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getInterestHistory
    * Get Interest History.
    * /api/v3/margin/interest
    */
    @Test
    public void testGetInterestHistory() throws Exception {
        GetInterestHistoryReq.GetInterestHistoryReqBuilder builder = GetInterestHistoryReq.builder();
        builder.currency(?).isIsolated(?).symbol(?).startTime(?).endTime(?).currentPage(?).pageSize(?);
        GetInterestHistoryReq req = builder.build();
        GetInterestHistoryResp resp = api.getInterestHistory(req);
        Assertions.assertNotNull(resp.getTimestamp());
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getCurrency());
            Assertions.assertNotNull(item.getDayRatio());
            Assertions.assertNotNull(item.getInterestAmount());
            Assertions.assertNotNull(item.getCreatedTime());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * modifyLeverage
    * Modify Leverage
    * /api/v3/position/update-user-leverage
    */
    @Test
    public void testModifyLeverage() throws Exception {
        ModifyLeverageReq.ModifyLeverageReqBuilder builder = ModifyLeverageReq.builder();
        builder.symbol(?).isIsolated(?).leverage(?);
        ModifyLeverageReq req = builder.build();
        ModifyLeverageResp resp = api.modifyLeverage(req);
        Assertions.assertNotNull(resp.getData());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

