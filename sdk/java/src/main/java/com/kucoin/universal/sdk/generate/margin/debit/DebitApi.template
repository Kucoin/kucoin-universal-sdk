
    /**
    * borrow
    * Borrow
    * /api/v3/margin/borrow
    */
    public void testBorrow() {
        BorrowReq.BorrowReqBuilder builder = BorrowReq.builder();
        builder.currency(?).size(?).timeInForce(?).symbol(?).isIsolated(?).isHf(?);
        BorrowReq req = builder.build();
        BorrowResp resp = this.api.borrow(req);
        self::assertNotNull($resp->orderNo);
        self::assertNotNull($resp->actualSize);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getBorrowHistory
    * Get Borrow History
    * /api/v3/margin/borrow
    */
    public void testGetBorrowHistory() {
        GetBorrowHistoryReq.GetBorrowHistoryReqBuilder builder = GetBorrowHistoryReq.builder();
        builder.currency(?).isIsolated(?).symbol(?).orderNo(?).startTime(?).endTime(?).currentPage(?).pageSize(?);
        GetBorrowHistoryReq req = builder.build();
        GetBorrowHistoryResp resp = this.api.getBorrowHistory(req);
        self::assertNotNull($resp->timestamp);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->orderNo);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->size);
            self::assertNotNull($item->actualSize);
            self::assertNotNull($item->status);
            self::assertNotNull($item->createdTime);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * repay
    * Repay
    * /api/v3/margin/repay
    */
    public void testRepay() {
        RepayReq.RepayReqBuilder builder = RepayReq.builder();
        builder.currency(?).size(?).symbol(?).isIsolated(?).isHf(?);
        RepayReq req = builder.build();
        RepayResp resp = this.api.repay(req);
        self::assertNotNull($resp->timestamp);
        self::assertNotNull($resp->orderNo);
        self::assertNotNull($resp->actualSize);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getRepayHistory
    * Get Repay History
    * /api/v3/margin/repay
    */
    public void testGetRepayHistory() {
        GetRepayHistoryReq.GetRepayHistoryReqBuilder builder = GetRepayHistoryReq.builder();
        builder.currency(?).isIsolated(?).symbol(?).orderNo(?).startTime(?).endTime(?).currentPage(?).pageSize(?);
        GetRepayHistoryReq req = builder.build();
        GetRepayHistoryResp resp = this.api.getRepayHistory(req);
        self::assertNotNull($resp->timestamp);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->orderNo);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->size);
            self::assertNotNull($item->principal);
            self::assertNotNull($item->interest);
            self::assertNotNull($item->status);
            self::assertNotNull($item->createdTime);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getInterestHistory
    * Get Interest History.
    * /api/v3/margin/interest
    */
    public void testGetInterestHistory() {
        GetInterestHistoryReq.GetInterestHistoryReqBuilder builder = GetInterestHistoryReq.builder();
        builder.currency(?).isIsolated(?).symbol(?).startTime(?).endTime(?).currentPage(?).pageSize(?);
        GetInterestHistoryReq req = builder.build();
        GetInterestHistoryResp resp = this.api.getInterestHistory(req);
        self::assertNotNull($resp->timestamp);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->dayRatio);
            self::assertNotNull($item->interestAmount);
            self::assertNotNull($item->createdTime);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * modifyLeverage
    * Modify Leverage
    * /api/v3/position/update-user-leverage
    */
    public void testModifyLeverage() {
        ModifyLeverageReq.ModifyLeverageReqBuilder builder = ModifyLeverageReq.builder();
        builder.symbol(?).isIsolated(?).leverage(?);
        ModifyLeverageReq req = builder.build();
        ModifyLeverageResp resp = this.api.modifyLeverage(req);
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

