package com.kucoin.universal.sdk.generate.futures.order;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class OrderApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /** addOrder Request Add Order /api/v1/orders */
  public static void testAddOrderRequest() throws Exception {
    String data =
        "{\"clientOid\": \"5c52e11203aa677f33e493fb\", \"side\": \"buy\", \"symbol\": \"XBTUSDTM\","
            + " \"leverage\": 3, \"type\": \"limit\", \"remark\": \"order remarks\","
            + " \"reduceOnly\": false, \"marginMode\": \"ISOLATED\", \"price\": \"0.1\", \"size\":"
            + " 1, \"timeInForce\": \"GTC\"}";
    AddOrderReq obj = mapper.readValue(data, AddOrderReq.class);
  }

  /** addOrder Response Add Order /api/v1/orders */
  public static void testAddOrderResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderId\": \"234125150956625920\",\n"
            + "        \"clientOid\": \"5c52e11203aa677f33e493fb\"\n"
            + "    }\n"
            + "}";
    RestResponse<AddOrderResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<AddOrderResp>>() {});
  }

  /** addOrderTest Request Add Order Test /api/v1/orders/test */
  public static void testAddOrderTestRequest() throws Exception {
    String data =
        "{\"clientOid\": \"5c52e11203aa677f33e493fb\", \"side\": \"buy\", \"symbol\": \"XBTUSDTM\","
            + " \"leverage\": 3, \"type\": \"limit\", \"remark\": \"order remarks\","
            + " \"reduceOnly\": false, \"marginMode\": \"ISOLATED\", \"price\": \"0.1\", \"size\":"
            + " 1, \"timeInForce\": \"GTC\"}";
    AddOrderTestReq obj = mapper.readValue(data, AddOrderTestReq.class);
  }

  /** addOrderTest Response Add Order Test /api/v1/orders/test */
  public static void testAddOrderTestResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderId\": \"234125150956625920\",\n"
            + "        \"clientOid\": \"5c52e11203aa677f33e493fb\"\n"
            + "    }\n"
            + "}";
    RestResponse<AddOrderTestResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<AddOrderTestResp>>() {});
  }

  /** batchAddOrders Request Batch Add Orders /api/v1/orders/multi */
  public static void testBatchAddOrdersRequest() throws Exception {
    String data =
        "[{\"clientOid\": \"5c52e11203aa677f33e493fb\", \"side\": \"buy\", \"symbol\":"
            + " \"XBTUSDTM\", \"leverage\": 3, \"type\": \"limit\", \"remark\": \"order remarks\","
            + " \"reduceOnly\": false, \"marginMode\": \"ISOLATED\", \"price\": \"0.1\", \"size\":"
            + " 1, \"timeInForce\": \"GTC\"}, {\"clientOid\": \"5c52e11203aa677f33e493fc\","
            + " \"side\": \"buy\", \"symbol\": \"XBTUSDTM\", \"leverage\": 3, \"type\": \"limit\","
            + " \"remark\": \"order remarks\", \"reduceOnly\": false, \"marginMode\": \"ISOLATED\","
            + " \"price\": \"0.1\", \"size\": 1, \"timeInForce\": \"GTC\"}]";
    BatchAddOrdersReq obj = mapper.readValue(data, BatchAddOrdersReq.class);
  }

  /** batchAddOrders Response Batch Add Orders /api/v1/orders/multi */
  public static void testBatchAddOrdersResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"orderId\": \"235919387779985408\",\n"
            + "            \"clientOid\": \"5c52e11203aa677f33e493fb\",\n"
            + "            \"symbol\": \"XBTUSDTM\",\n"
            + "            \"code\": \"200000\",\n"
            + "            \"msg\": \"success\"\n"
            + "        },\n"
            + "        {\n"
            + "            \"orderId\": \"235919387855482880\",\n"
            + "            \"clientOid\": \"5c52e11203aa677f33e493fc\",\n"
            + "            \"symbol\": \"XBTUSDTM\",\n"
            + "            \"code\": \"200000\",\n"
            + "            \"msg\": \"success\"\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<BatchAddOrdersResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<BatchAddOrdersResp>>() {});
  }

  /** addTPSLOrder Request Add Take Profit And Stop Loss Order /api/v1/st-orders */
  public static void testAddTPSLOrderRequest() throws Exception {
    String data =
        "{\"clientOid\": \"5c52e11203aa677f33e493fb\", \"side\": \"buy\", \"symbol\": \"XBTUSDTM\","
            + " \"leverage\": 3, \"type\": \"limit\", \"remark\": \"order remarks\","
            + " \"reduceOnly\": false, \"marginMode\": \"ISOLATED\", \"price\": \"0.2\", \"size\":"
            + " 1, \"timeInForce\": \"GTC\", \"triggerStopUpPrice\": \"0.3\","
            + " \"triggerStopDownPrice\": \"0.1\", \"stopPriceType\": \"TP\"}";
    AddTPSLOrderReq obj = mapper.readValue(data, AddTPSLOrderReq.class);
  }

  /** addTPSLOrder Response Add Take Profit And Stop Loss Order /api/v1/st-orders */
  public static void testAddTPSLOrderResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderId\": \"234125150956625920\",\n"
            + "        \"clientOid\": \"5c52e11203aa677f33e493fb\"\n"
            + "    }\n"
            + "}";
    RestResponse<AddTPSLOrderResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<AddTPSLOrderResp>>() {});
  }

  /** cancelOrderById Request Cancel Order By OrderId /api/v1/orders/{orderId} */
  public static void testCancelOrderByIdRequest() throws Exception {
    String data = "{\"orderId\": \"example_string_default_value\"}";
    CancelOrderByIdReq obj = mapper.readValue(data, CancelOrderByIdReq.class);
  }

  /** cancelOrderById Response Cancel Order By OrderId /api/v1/orders/{orderId} */
  public static void testCancelOrderByIdResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"cancelledOrderIds\": [\n"
            + "            \"235303670076489728\"\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<CancelOrderByIdResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<CancelOrderByIdResp>>() {});
  }

  /**
   * cancelOrderByClientOid Request Cancel Order By ClientOid
   * /api/v1/orders/client-order/{clientOid}
   */
  public static void testCancelOrderByClientOidRequest() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\", \"clientOid\": \"example_string_default_value\"}";
    CancelOrderByClientOidReq obj = mapper.readValue(data, CancelOrderByClientOidReq.class);
  }

  /**
   * cancelOrderByClientOid Response Cancel Order By ClientOid
   * /api/v1/orders/client-order/{clientOid}
   */
  public static void testCancelOrderByClientOidResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"clientOid\": \"017485b0-2957-4681-8a14-5d46b35aee0d\"\n"
            + "    }\n"
            + "}";
    RestResponse<CancelOrderByClientOidResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<CancelOrderByClientOidResp>>() {});
  }

  /** batchCancelOrders Request Batch Cancel Orders /api/v1/orders/multi-cancel */
  public static void testBatchCancelOrdersRequest() throws Exception {
    String data = "{\"orderIdsList\": [\"250445104152670209\", \"250445181751463936\"]}";
    BatchCancelOrdersReq obj = mapper.readValue(data, BatchCancelOrdersReq.class);
  }

  /** batchCancelOrders Response Batch Cancel Orders /api/v1/orders/multi-cancel */
  public static void testBatchCancelOrdersResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"orderId\": \"250445104152670209\",\n"
            + "            \"clientOid\": null,\n"
            + "            \"code\": \"200\",\n"
            + "            \"msg\": \"success\"\n"
            + "        },\n"
            + "        {\n"
            + "            \"orderId\": \"250445181751463936\",\n"
            + "            \"clientOid\": null,\n"
            + "            \"code\": \"200\",\n"
            + "            \"msg\": \"success\"\n"
            + "        }\n"
            + "    ]\n"
            + "}\n";
    RestResponse<BatchCancelOrdersResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<BatchCancelOrdersResp>>() {});
  }

  /** cancelAllOrdersV3 Request Cancel All Orders /api/v3/orders */
  public static void testCancelAllOrdersV3Request() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    CancelAllOrdersV3Req obj = mapper.readValue(data, CancelAllOrdersV3Req.class);
  }

  /** cancelAllOrdersV3 Response Cancel All Orders /api/v3/orders */
  public static void testCancelAllOrdersV3Response() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"cancelledOrderIds\": [\n"
            + "            \"235919172150824960\",\n"
            + "            \"235919172150824961\"\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<CancelAllOrdersV3Resp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<CancelAllOrdersV3Resp>>() {});
  }

  /** cancelAllStopOrders Request Cancel All Stop orders /api/v1/stopOrders */
  public static void testCancelAllStopOrdersRequest() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    CancelAllStopOrdersReq obj = mapper.readValue(data, CancelAllStopOrdersReq.class);
  }

  /** cancelAllStopOrders Response Cancel All Stop orders /api/v1/stopOrders */
  public static void testCancelAllStopOrdersResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"cancelledOrderIds\": [\n"
            + "            \"235919172150824960\",\n"
            + "            \"235919172150824961\"\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<CancelAllStopOrdersResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<CancelAllStopOrdersResp>>() {});
  }

  /** getOrderByOrderId Request Get Order By OrderId /api/v1/orders/{order-id} */
  public static void testGetOrderByOrderIdRequest() throws Exception {
    String data = "{\"order-id\": \"236655147005071361\"}";
    GetOrderByOrderIdReq obj = mapper.readValue(data, GetOrderByOrderIdReq.class);
  }

  /** getOrderByOrderId Response Get Order By OrderId /api/v1/orders/{order-id} */
  public static void testGetOrderByOrderIdResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"id\": \"236655147005071361\",\n"
            + "        \"symbol\": \"XBTUSDTM\",\n"
            + "        \"type\": \"limit\",\n"
            + "        \"side\": \"buy\",\n"
            + "        \"price\": \"0.1\",\n"
            + "        \"size\": 1,\n"
            + "        \"value\": \"0.0001\",\n"
            + "        \"dealValue\": \"0\",\n"
            + "        \"dealSize\": 0,\n"
            + "        \"stp\": \"\",\n"
            + "        \"stop\": \"\",\n"
            + "        \"stopPriceType\": \"\",\n"
            + "        \"stopTriggered\": false,\n"
            + "        \"stopPrice\": null,\n"
            + "        \"timeInForce\": \"GTC\",\n"
            + "        \"postOnly\": false,\n"
            + "        \"hidden\": false,\n"
            + "        \"iceberg\": false,\n"
            + "        \"leverage\": \"3\",\n"
            + "        \"forceHold\": false,\n"
            + "        \"closeOrder\": false,\n"
            + "        \"visibleSize\": 0,\n"
            + "        \"clientOid\": \"5c52e11203aa677f33e493fb\",\n"
            + "        \"remark\": null,\n"
            + "        \"tags\": \"\",\n"
            + "        \"isActive\": true,\n"
            + "        \"cancelExist\": false,\n"
            + "        \"createdAt\": 1729236185949,\n"
            + "        \"updatedAt\": 1729236185949,\n"
            + "        \"endAt\": null,\n"
            + "        \"orderTime\": 1729236185885647952,\n"
            + "        \"settleCurrency\": \"USDT\",\n"
            + "        \"marginMode\": \"ISOLATED\",\n"
            + "        \"avgDealPrice\": \"0\",\n"
            + "        \"filledSize\": 0,\n"
            + "        \"filledValue\": \"0\",\n"
            + "        \"status\": \"open\",\n"
            + "        \"reduceOnly\": false\n"
            + "    }\n"
            + "}";
    RestResponse<GetOrderByOrderIdResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetOrderByOrderIdResp>>() {});
  }

  /** getOrderByClientOid Request Get Order By ClientOid /api/v1/orders/byClientOid */
  public static void testGetOrderByClientOidRequest() throws Exception {
    String data = "{\"clientOid\": \"5c52e11203aa677f33e493fb\"}";
    GetOrderByClientOidReq obj = mapper.readValue(data, GetOrderByClientOidReq.class);
  }

  /** getOrderByClientOid Response Get Order By ClientOid /api/v1/orders/byClientOid */
  public static void testGetOrderByClientOidResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"id\": \"250444645610336256\",\n"
            + "        \"symbol\": \"XRPUSDTM\",\n"
            + "        \"type\": \"limit\",\n"
            + "        \"side\": \"buy\",\n"
            + "        \"price\": \"0.1\",\n"
            + "        \"size\": 1,\n"
            + "        \"value\": \"1\",\n"
            + "        \"dealValue\": \"0\",\n"
            + "        \"dealSize\": 0,\n"
            + "        \"stp\": \"\",\n"
            + "        \"stop\": \"\",\n"
            + "        \"stopPriceType\": \"\",\n"
            + "        \"stopTriggered\": false,\n"
            + "        \"stopPrice\": null,\n"
            + "        \"timeInForce\": \"GTC\",\n"
            + "        \"postOnly\": false,\n"
            + "        \"hidden\": false,\n"
            + "        \"iceberg\": false,\n"
            + "        \"leverage\": \"3\",\n"
            + "        \"forceHold\": false,\n"
            + "        \"closeOrder\": false,\n"
            + "        \"visibleSize\": 0,\n"
            + "        \"clientOid\": \"5c52e11203aa677f33e493fb\",\n"
            + "        \"remark\": null,\n"
            + "        \"tags\": \"\",\n"
            + "        \"isActive\": true,\n"
            + "        \"cancelExist\": false,\n"
            + "        \"createdAt\": 1732523858568,\n"
            + "        \"updatedAt\": 1732523858568,\n"
            + "        \"endAt\": null,\n"
            + "        \"orderTime\": 1732523858550892322,\n"
            + "        \"settleCurrency\": \"USDT\",\n"
            + "        \"marginMode\": \"ISOLATED\",\n"
            + "        \"avgDealPrice\": \"0\",\n"
            + "        \"filledSize\": 0,\n"
            + "        \"filledValue\": \"0\",\n"
            + "        \"status\": \"open\",\n"
            + "        \"reduceOnly\": false\n"
            + "    }\n"
            + "}";
    RestResponse<GetOrderByClientOidResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetOrderByClientOidResp>>() {});
  }

  /** getOrderList Request Get Order List /api/v1/orders */
  public static void testGetOrderListRequest() throws Exception {
    String data =
        "{\"status\": \"done\", \"symbol\": \"example_string_default_value\", \"side\": \"buy\","
            + " \"type\": \"limit\", \"startAt\": 123456, \"endAt\": 123456, \"currentPage\": 1,"
            + " \"pageSize\": 50}";
    GetOrderListReq obj = mapper.readValue(data, GetOrderListReq.class);
  }

  /** getOrderList Response Get Order List /api/v1/orders */
  public static void testGetOrderListResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 50,\n"
            + "        \"totalNum\": 1,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"id\": \"230181737576050688\",\n"
            + "                \"symbol\": \"PEOPLEUSDTM\",\n"
            + "                \"type\": \"limit\",\n"
            + "                \"side\": \"buy\",\n"
            + "                \"price\": \"0.05\",\n"
            + "                \"size\": 10,\n"
            + "                \"value\": \"5\",\n"
            + "                \"dealValue\": \"0\",\n"
            + "                \"dealSize\": 0,\n"
            + "                \"stp\": \"\",\n"
            + "                \"stop\": \"\",\n"
            + "                \"stopPriceType\": \"\",\n"
            + "                \"stopTriggered\": false,\n"
            + "                \"stopPrice\": null,\n"
            + "                \"timeInForce\": \"GTC\",\n"
            + "                \"postOnly\": false,\n"
            + "                \"hidden\": false,\n"
            + "                \"iceberg\": false,\n"
            + "                \"leverage\": \"1\",\n"
            + "                \"forceHold\": false,\n"
            + "                \"closeOrder\": false,\n"
            + "                \"visibleSize\": 0,\n"
            + "                \"clientOid\": \"5a80bd847f1811ef8a7faa665a37b3d7\",\n"
            + "                \"remark\": null,\n"
            + "                \"tags\": \"\",\n"
            + "                \"isActive\": true,\n"
            + "                \"cancelExist\": false,\n"
            + "                \"createdAt\": 1727692804813,\n"
            + "                \"updatedAt\": 1727692804813,\n"
            + "                \"endAt\": null,\n"
            + "                \"orderTime\": 1727692804808418000,\n"
            + "                \"settleCurrency\": \"USDT\",\n"
            + "                \"marginMode\": \"ISOLATED\",\n"
            + "                \"avgDealPrice\": \"0\",\n"
            + "                \"filledSize\": 0,\n"
            + "                \"filledValue\": \"0\",\n"
            + "                \"status\": \"open\",\n"
            + "                \"reduceOnly\": false\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetOrderListResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetOrderListResp>>() {});
  }

  /** getRecentClosedOrders Request Get Recent Closed Orders /api/v1/recentDoneOrders */
  public static void testGetRecentClosedOrdersRequest() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    GetRecentClosedOrdersReq obj = mapper.readValue(data, GetRecentClosedOrdersReq.class);
  }

  /** getRecentClosedOrders Response Get Recent Closed Orders /api/v1/recentDoneOrders */
  public static void testGetRecentClosedOrdersResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"id\": \"236387137732231168\",\n"
            + "            \"symbol\": \"XRPUSDTM\",\n"
            + "            \"type\": \"market\",\n"
            + "            \"side\": \"buy\",\n"
            + "            \"price\": \"0\",\n"
            + "            \"size\": 1,\n"
            + "            \"value\": \"5.51\",\n"
            + "            \"dealValue\": \"5.511\",\n"
            + "            \"dealSize\": 1,\n"
            + "            \"stp\": \"\",\n"
            + "            \"stop\": \"\",\n"
            + "            \"stopPriceType\": \"\",\n"
            + "            \"stopTriggered\": false,\n"
            + "            \"stopPrice\": null,\n"
            + "            \"timeInForce\": \"GTC\",\n"
            + "            \"postOnly\": false,\n"
            + "            \"hidden\": false,\n"
            + "            \"iceberg\": false,\n"
            + "            \"leverage\": \"10.0\",\n"
            + "            \"forceHold\": false,\n"
            + "            \"closeOrder\": false,\n"
            + "            \"visibleSize\": 0,\n"
            + "            \"clientOid\": \"16698fe6-2746-4aeb-a7fa-61f633ab6090\",\n"
            + "            \"remark\": null,\n"
            + "            \"tags\": \"\",\n"
            + "            \"isActive\": false,\n"
            + "            \"cancelExist\": false,\n"
            + "            \"createdAt\": 1729172287496,\n"
            + "            \"updatedAt\": 1729172287568,\n"
            + "            \"endAt\": 1729172287568,\n"
            + "            \"orderTime\": 1729172287496950800,\n"
            + "            \"settleCurrency\": \"USDT\",\n"
            + "            \"marginMode\": \"ISOLATED\",\n"
            + "            \"avgDealPrice\": \"0.5511\",\n"
            + "            \"filledSize\": 1,\n"
            + "            \"filledValue\": \"5.511\",\n"
            + "            \"status\": \"done\",\n"
            + "            \"reduceOnly\": false\n"
            + "        },\n"
            + "        {\n"
            + "            \"id\": \"236317213710184449\",\n"
            + "            \"symbol\": \"XBTUSDTM\",\n"
            + "            \"type\": \"market\",\n"
            + "            \"side\": \"buy\",\n"
            + "            \"price\": \"0\",\n"
            + "            \"size\": 1,\n"
            + "            \"value\": \"67.4309\",\n"
            + "            \"dealValue\": \"67.4309\",\n"
            + "            \"dealSize\": 1,\n"
            + "            \"stp\": \"\",\n"
            + "            \"stop\": \"\",\n"
            + "            \"stopPriceType\": \"\",\n"
            + "            \"stopTriggered\": false,\n"
            + "            \"stopPrice\": null,\n"
            + "            \"timeInForce\": \"GTC\",\n"
            + "            \"postOnly\": false,\n"
            + "            \"hidden\": false,\n"
            + "            \"iceberg\": false,\n"
            + "            \"leverage\": \"3\",\n"
            + "            \"forceHold\": false,\n"
            + "            \"closeOrder\": false,\n"
            + "            \"visibleSize\": 0,\n"
            + "            \"clientOid\": \"5c52e11203aa677f33e493fb\",\n"
            + "            \"remark\": null,\n"
            + "            \"tags\": \"\",\n"
            + "            \"isActive\": false,\n"
            + "            \"cancelExist\": false,\n"
            + "            \"createdAt\": 1729155616310,\n"
            + "            \"updatedAt\": 1729155616324,\n"
            + "            \"endAt\": 1729155616324,\n"
            + "            \"orderTime\": 1729155616310180400,\n"
            + "            \"settleCurrency\": \"USDT\",\n"
            + "            \"marginMode\": \"ISOLATED\",\n"
            + "            \"avgDealPrice\": \"67430.9\",\n"
            + "            \"filledSize\": 1,\n"
            + "            \"filledValue\": \"67.4309\",\n"
            + "            \"status\": \"done\",\n"
            + "            \"reduceOnly\": false\n"
            + "        },\n"
            + "        {\n"
            + "            \"id\": \"236317094436728832\",\n"
            + "            \"symbol\": \"XBTUSDTM\",\n"
            + "            \"type\": \"market\",\n"
            + "            \"side\": \"buy\",\n"
            + "            \"price\": \"0\",\n"
            + "            \"size\": 1,\n"
            + "            \"value\": \"67.445\",\n"
            + "            \"dealValue\": \"67.445\",\n"
            + "            \"dealSize\": 1,\n"
            + "            \"stp\": \"\",\n"
            + "            \"stop\": \"\",\n"
            + "            \"stopPriceType\": \"\",\n"
            + "            \"stopTriggered\": false,\n"
            + "            \"stopPrice\": null,\n"
            + "            \"timeInForce\": \"GTC\",\n"
            + "            \"postOnly\": false,\n"
            + "            \"hidden\": false,\n"
            + "            \"iceberg\": false,\n"
            + "            \"leverage\": \"3\",\n"
            + "            \"forceHold\": false,\n"
            + "            \"closeOrder\": false,\n"
            + "            \"visibleSize\": 0,\n"
            + "            \"clientOid\": \"5c52e11203aa677f33e493fb\",\n"
            + "            \"remark\": null,\n"
            + "            \"tags\": \"\",\n"
            + "            \"isActive\": false,\n"
            + "            \"cancelExist\": false,\n"
            + "            \"createdAt\": 1729155587873,\n"
            + "            \"updatedAt\": 1729155587946,\n"
            + "            \"endAt\": 1729155587946,\n"
            + "            \"orderTime\": 1729155587873332000,\n"
            + "            \"settleCurrency\": \"USDT\",\n"
            + "            \"marginMode\": \"ISOLATED\",\n"
            + "            \"avgDealPrice\": \"67445.0\",\n"
            + "            \"filledSize\": 1,\n"
            + "            \"filledValue\": \"67.445\",\n"
            + "            \"status\": \"done\",\n"
            + "            \"reduceOnly\": false\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetRecentClosedOrdersResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetRecentClosedOrdersResp>>() {});
  }

  /** getStopOrderList Request Get Stop Order List /api/v1/stopOrders */
  public static void testGetStopOrderListRequest() throws Exception {
    String data =
        "{\"symbol\": \"XBTUSDTM\", \"side\": \"buy\", \"type\": \"limit\", \"startAt\": 123456,"
            + " \"endAt\": 123456, \"currentPage\": 123456, \"pageSize\": 50}";
    GetStopOrderListReq obj = mapper.readValue(data, GetStopOrderListReq.class);
  }

  /** getStopOrderList Response Get Stop Order List /api/v1/stopOrders */
  public static void testGetStopOrderListResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 50,\n"
            + "        \"totalNum\": 1,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"id\": \"230181737576050688\",\n"
            + "                \"symbol\": \"PEOPLEUSDTM\",\n"
            + "                \"type\": \"limit\",\n"
            + "                \"side\": \"buy\",\n"
            + "                \"price\": \"0.05\",\n"
            + "                \"size\": 10,\n"
            + "                \"value\": \"5\",\n"
            + "                \"dealValue\": \"0\",\n"
            + "                \"dealSize\": 0,\n"
            + "                \"stp\": \"\",\n"
            + "                \"stop\": \"\",\n"
            + "                \"stopPriceType\": \"\",\n"
            + "                \"stopTriggered\": false,\n"
            + "                \"stopPrice\": null,\n"
            + "                \"timeInForce\": \"GTC\",\n"
            + "                \"postOnly\": false,\n"
            + "                \"hidden\": false,\n"
            + "                \"iceberg\": false,\n"
            + "                \"leverage\": \"1\",\n"
            + "                \"forceHold\": false,\n"
            + "                \"closeOrder\": false,\n"
            + "                \"visibleSize\": 0,\n"
            + "                \"clientOid\": \"5a80bd847f1811ef8a7faa665a37b3d7\",\n"
            + "                \"remark\": null,\n"
            + "                \"tags\": \"\",\n"
            + "                \"isActive\": true,\n"
            + "                \"cancelExist\": false,\n"
            + "                \"createdAt\": 1727692804813,\n"
            + "                \"updatedAt\": 1727692804813,\n"
            + "                \"endAt\": null,\n"
            + "                \"orderTime\": 1727692804808418000,\n"
            + "                \"settleCurrency\": \"USDT\",\n"
            + "                \"marginMode\": \"ISOLATED\",\n"
            + "                \"avgDealPrice\": \"0\",\n"
            + "                \"filledSize\": 0,\n"
            + "                \"filledValue\": \"0\",\n"
            + "                \"status\": \"open\",\n"
            + "                \"reduceOnly\": false\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetStopOrderListResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetStopOrderListResp>>() {});
  }

  /** getOpenOrderValue Request Get Open Order Value /api/v1/openOrderStatistics */
  public static void testGetOpenOrderValueRequest() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    GetOpenOrderValueReq obj = mapper.readValue(data, GetOpenOrderValueReq.class);
  }

  /** getOpenOrderValue Response Get Open Order Value /api/v1/openOrderStatistics */
  public static void testGetOpenOrderValueResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"openOrderBuySize\": 1,\n"
            + "        \"openOrderSellSize\": 0,\n"
            + "        \"openOrderBuyCost\": \"0.0001\",\n"
            + "        \"openOrderSellCost\": \"0\",\n"
            + "        \"settleCurrency\": \"USDT\"\n"
            + "    }\n"
            + "}";
    RestResponse<GetOpenOrderValueResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetOpenOrderValueResp>>() {});
  }

  /** getRecentTradeHistory Request Get Recent Trade History /api/v1/recentFills */
  public static void testGetRecentTradeHistoryRequest() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    GetRecentTradeHistoryReq obj = mapper.readValue(data, GetRecentTradeHistoryReq.class);
  }

  /** getRecentTradeHistory Response Get Recent Trade History /api/v1/recentFills */
  public static void testGetRecentTradeHistoryResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"symbol\": \"XBTUSDTM\",\n"
            + "            \"tradeId\": \"1784277229880\",\n"
            + "            \"orderId\": \"236317213710184449\",\n"
            + "            \"side\": \"buy\",\n"
            + "            \"liquidity\": \"taker\",\n"
            + "            \"forceTaker\": false,\n"
            + "            \"price\": \"67430.9\",\n"
            + "            \"size\": 1,\n"
            + "            \"value\": \"67.4309\",\n"
            + "            \"openFeePay\": \"0.04045854\",\n"
            + "            \"closeFeePay\": \"0\",\n"
            + "            \"stop\": \"\",\n"
            + "            \"feeRate\": \"0.00060\",\n"
            + "            \"fixFee\": \"0\",\n"
            + "            \"feeCurrency\": \"USDT\",\n"
            + "            \"marginMode\": \"ISOLATED\",\n"
            + "            \"fee\": \"0.04045854\",\n"
            + "            \"settleCurrency\": \"USDT\",\n"
            + "            \"orderType\": \"market\",\n"
            + "            \"displayType\": \"market\",\n"
            + "            \"tradeType\": \"trade\",\n"
            + "            \"subTradeType\": null,\n"
            + "            \"tradeTime\": 1729155616320000000,\n"
            + "            \"createdAt\": 1729155616493\n"
            + "        },\n"
            + "        {\n"
            + "            \"symbol\": \"XBTUSDTM\",\n"
            + "            \"tradeId\": \"1784277132002\",\n"
            + "            \"orderId\": \"236317094436728832\",\n"
            + "            \"side\": \"buy\",\n"
            + "            \"liquidity\": \"taker\",\n"
            + "            \"forceTaker\": false,\n"
            + "            \"price\": \"67445\",\n"
            + "            \"size\": 1,\n"
            + "            \"value\": \"67.445\",\n"
            + "            \"openFeePay\": \"0\",\n"
            + "            \"closeFeePay\": \"0.040467\",\n"
            + "            \"stop\": \"\",\n"
            + "            \"feeRate\": \"0.00060\",\n"
            + "            \"fixFee\": \"0\",\n"
            + "            \"feeCurrency\": \"USDT\",\n"
            + "            \"marginMode\": \"ISOLATED\",\n"
            + "            \"fee\": \"0.040467\",\n"
            + "            \"settleCurrency\": \"USDT\",\n"
            + "            \"orderType\": \"market\",\n"
            + "            \"displayType\": \"market\",\n"
            + "            \"tradeType\": \"trade\",\n"
            + "            \"subTradeType\": null,\n"
            + "            \"tradeTime\": 1729155587944000000,\n"
            + "            \"createdAt\": 1729155588104\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetRecentTradeHistoryResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetRecentTradeHistoryResp>>() {});
  }

  /** getTradeHistory Request Get Trade History /api/v1/fills */
  public static void testGetTradeHistoryRequest() throws Exception {
    String data =
        "{\"orderId\": \"236655147005071361\", \"symbol\": \"example_string_default_value\","
            + " \"side\": \"buy\", \"type\": \"limit\", \"tradeTypes\": \"trade\", \"startAt\":"
            + " 123456, \"endAt\": 123456, \"currentPage\": 1, \"pageSize\": 50}";
    GetTradeHistoryReq obj = mapper.readValue(data, GetTradeHistoryReq.class);
  }

  /** getTradeHistory Response Get Trade History /api/v1/fills */
  public static void testGetTradeHistoryResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 50,\n"
            + "        \"totalNum\": 2,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"symbol\": \"XBTUSDTM\",\n"
            + "                \"tradeId\": \"1828954878212\",\n"
            + "                \"orderId\": \"284486580251463680\",\n"
            + "                \"side\": \"buy\",\n"
            + "                \"liquidity\": \"taker\",\n"
            + "                \"forceTaker\": false,\n"
            + "                \"price\": \"86275.1\",\n"
            + "                \"size\": 1,\n"
            + "                \"value\": \"86.2751\",\n"
            + "                \"openFeePay\": \"0.05176506\",\n"
            + "                \"closeFeePay\": \"0\",\n"
            + "                \"stop\": \"\",\n"
            + "                \"feeRate\": \"0.00060\",\n"
            + "                \"fixFee\": \"0\",\n"
            + "                \"feeCurrency\": \"USDT\",\n"
            + "                \"subTradeType\": null,\n"
            + "                \"marginMode\": \"CROSS\",\n"
            + "                \"openFeeTaxPay\": \"0\",\n"
            + "                \"closeFeeTaxPay\": \"0\",\n"
            + "                \"displayType\": \"market\",\n"
            + "                \"fee\": \"0.05176506\",\n"
            + "                \"settleCurrency\": \"USDT\",\n"
            + "                \"orderType\": \"market\",\n"
            + "                \"tradeType\": \"trade\",\n"
            + "                \"tradeTime\": 1740640088244000000,\n"
            + "                \"createdAt\": 1740640088427\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetTradeHistoryResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetTradeHistoryResp>>() {});
  }

  /** cancelAllOrdersV1 Request Cancel All Orders - V1 /api/v1/orders */
  public static void testCancelAllOrdersV1Request() throws Exception {
    String data = "{\"symbol\": \"XBTUSDTM\"}";
    CancelAllOrdersV1Req obj = mapper.readValue(data, CancelAllOrdersV1Req.class);
  }

  /** cancelAllOrdersV1 Response Cancel All Orders - V1 /api/v1/orders */
  public static void testCancelAllOrdersV1Response() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"cancelledOrderIds\": [\n"
            + "            \"235919172150824960\",\n"
            + "            \"235919172150824961\"\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<CancelAllOrdersV1Resp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<CancelAllOrdersV1Resp>>() {});
  }

  public static void runAllTests() {
    run(OrderApiAutoGeneratedTest::testAddOrderRequest, "testAddOrderRequest");
    run(OrderApiAutoGeneratedTest::testAddOrderResponse, "testAddOrderResponse");
    run(OrderApiAutoGeneratedTest::testAddOrderTestRequest, "testAddOrderTestRequest");
    run(OrderApiAutoGeneratedTest::testAddOrderTestResponse, "testAddOrderTestResponse");
    run(OrderApiAutoGeneratedTest::testBatchAddOrdersRequest, "testBatchAddOrdersRequest");
    run(OrderApiAutoGeneratedTest::testBatchAddOrdersResponse, "testBatchAddOrdersResponse");
    run(OrderApiAutoGeneratedTest::testAddTPSLOrderRequest, "testAddTPSLOrderRequest");
    run(OrderApiAutoGeneratedTest::testAddTPSLOrderResponse, "testAddTPSLOrderResponse");
    run(OrderApiAutoGeneratedTest::testCancelOrderByIdRequest, "testCancelOrderByIdRequest");
    run(OrderApiAutoGeneratedTest::testCancelOrderByIdResponse, "testCancelOrderByIdResponse");
    run(
        OrderApiAutoGeneratedTest::testCancelOrderByClientOidRequest,
        "testCancelOrderByClientOidRequest");
    run(
        OrderApiAutoGeneratedTest::testCancelOrderByClientOidResponse,
        "testCancelOrderByClientOidResponse");
    run(OrderApiAutoGeneratedTest::testBatchCancelOrdersRequest, "testBatchCancelOrdersRequest");
    run(OrderApiAutoGeneratedTest::testBatchCancelOrdersResponse, "testBatchCancelOrdersResponse");
    run(OrderApiAutoGeneratedTest::testCancelAllOrdersV3Request, "testCancelAllOrdersV3Request");
    run(OrderApiAutoGeneratedTest::testCancelAllOrdersV3Response, "testCancelAllOrdersV3Response");
    run(
        OrderApiAutoGeneratedTest::testCancelAllStopOrdersRequest,
        "testCancelAllStopOrdersRequest");
    run(
        OrderApiAutoGeneratedTest::testCancelAllStopOrdersResponse,
        "testCancelAllStopOrdersResponse");
    run(OrderApiAutoGeneratedTest::testGetOrderByOrderIdRequest, "testGetOrderByOrderIdRequest");
    run(OrderApiAutoGeneratedTest::testGetOrderByOrderIdResponse, "testGetOrderByOrderIdResponse");
    run(
        OrderApiAutoGeneratedTest::testGetOrderByClientOidRequest,
        "testGetOrderByClientOidRequest");
    run(
        OrderApiAutoGeneratedTest::testGetOrderByClientOidResponse,
        "testGetOrderByClientOidResponse");
    run(OrderApiAutoGeneratedTest::testGetOrderListRequest, "testGetOrderListRequest");
    run(OrderApiAutoGeneratedTest::testGetOrderListResponse, "testGetOrderListResponse");
    run(
        OrderApiAutoGeneratedTest::testGetRecentClosedOrdersRequest,
        "testGetRecentClosedOrdersRequest");
    run(
        OrderApiAutoGeneratedTest::testGetRecentClosedOrdersResponse,
        "testGetRecentClosedOrdersResponse");
    run(OrderApiAutoGeneratedTest::testGetStopOrderListRequest, "testGetStopOrderListRequest");
    run(OrderApiAutoGeneratedTest::testGetStopOrderListResponse, "testGetStopOrderListResponse");
    run(OrderApiAutoGeneratedTest::testGetOpenOrderValueRequest, "testGetOpenOrderValueRequest");
    run(OrderApiAutoGeneratedTest::testGetOpenOrderValueResponse, "testGetOpenOrderValueResponse");
    run(
        OrderApiAutoGeneratedTest::testGetRecentTradeHistoryRequest,
        "testGetRecentTradeHistoryRequest");
    run(
        OrderApiAutoGeneratedTest::testGetRecentTradeHistoryResponse,
        "testGetRecentTradeHistoryResponse");
    run(OrderApiAutoGeneratedTest::testGetTradeHistoryRequest, "testGetTradeHistoryRequest");
    run(OrderApiAutoGeneratedTest::testGetTradeHistoryResponse, "testGetTradeHistoryResponse");
    run(OrderApiAutoGeneratedTest::testCancelAllOrdersV1Request, "testCancelAllOrdersV1Request");
    run(OrderApiAutoGeneratedTest::testCancelAllOrdersV1Response, "testCancelAllOrdersV1Response");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
