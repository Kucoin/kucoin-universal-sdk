package com.kucoin.universal.sdk.generate.margin.marginpublic;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.WsMessage;
import java.util.ArrayList;
import java.util.List;

class MarginPublicWsAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  /** indexPrice Index Price /indexPrice/indicator/index:_symbol_,_symbol_ */
  public static void testIndexPriceResponse() throws Exception {
    String data =
        "{\"id\":\"5c24c5da03aa673885cd67a0\",\"type\":\"message\",\"topic\":\"/indicator/index:USDT-BTC\",\"subject\":\"tick\",\"data\":{\"symbol\":\"USDT-BTC\",\"granularity\":5000,\"timestamp\":1551770400000,\"value\":0.0001092}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    IndexPriceEvent event = mapper.convertValue(resp.getData(), IndexPriceEvent.class);
  }

  /** markPrice Mark Price /markPrice/indicator/markPrice:_symbol_,_symbol_ */
  public static void testMarkPriceResponse() throws Exception {
    String data =
        "{\"id\":\"5c24c5da03aa673885cd67aa\",\"type\":\"message\",\"topic\":\"/indicator/markPrice:USDT-BTC\",\"subject\":\"tick\",\"data\":{\"symbol\":\"USDT-BTC\",\"granularity\":5000,\"timestamp\":1551770400000,\"value\":0.0001093}}";
    WsMessage resp = mapper.readValue(data, WsMessage.class);
    MarkPriceEvent event = mapper.convertValue(resp.getData(), MarkPriceEvent.class);
  }

  public static void runAllTests() {
    run(MarginPublicWsAutoGeneratedTest::testIndexPriceResponse, "testIndexPriceResponse");
    run(MarginPublicWsAutoGeneratedTest::testMarkPriceResponse, "testMarkPriceResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
