
    /**
    * addOrder
    * Add Order
    * /api/v1/hf/orders
    */
    @Test
    public void testAddOrder() throws Exception {
        AddOrderReq.AddOrderReqBuilder builder = AddOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).tags(?).cancelAfter(?).funds(?).allowMaxTimeWindow(?).clientTimestamp(?);
        AddOrderReq req = builder.build();
        AddOrderResp resp = api.addOrder(req);
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getClientOid());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * addOrderSync
    * Add Order Sync
    * /api/v1/hf/orders/sync
    */
    @Test
    public void testAddOrderSync() throws Exception {
        AddOrderSyncReq.AddOrderSyncReqBuilder builder = AddOrderSyncReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).tags(?).cancelAfter(?).funds(?).allowMaxTimeWindow(?).clientTimestamp(?);
        AddOrderSyncReq req = builder.build();
        AddOrderSyncResp resp = api.addOrderSync(req);
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getOrderTime());
        Assertions.assertNotNull(resp.getOriginSize());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getRemainSize());
        Assertions.assertNotNull(resp.getCanceledSize());
        Assertions.assertNotNull(resp.getStatus());
        Assertions.assertNotNull(resp.getMatchTime());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * addOrderTest
    * Add Order Test
    * /api/v1/hf/orders/test
    */
    @Test
    public void testAddOrderTest() throws Exception {
        AddOrderTestReq.AddOrderTestReqBuilder builder = AddOrderTestReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).tags(?).cancelAfter(?).funds(?).allowMaxTimeWindow(?).clientTimestamp(?);
        AddOrderTestReq req = builder.build();
        AddOrderTestResp resp = api.addOrderTest(req);
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getClientOid());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * batchAddOrders
    * Batch Add Orders
    * /api/v1/hf/orders/multi
    */
    @Test
    public void testBatchAddOrders() throws Exception {
        BatchAddOrdersReq.BatchAddOrdersReqBuilder builder = BatchAddOrdersReq.builder();
        builder.orderList(?);
        BatchAddOrdersReq req = builder.build();
        BatchAddOrdersResp resp = api.batchAddOrders(req);
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getOrderId());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getSuccess());
            Assertions.assertNotNull(item.getFailMsg());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * batchAddOrdersSync
    * Batch Add Orders Sync
    * /api/v1/hf/orders/multi/sync
    */
    @Test
    public void testBatchAddOrdersSync() throws Exception {
        BatchAddOrdersSyncReq.BatchAddOrdersSyncReqBuilder builder = BatchAddOrdersSyncReq.builder();
        builder.orderList(?);
        BatchAddOrdersSyncReq req = builder.build();
        BatchAddOrdersSyncResp resp = api.batchAddOrdersSync(req);
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getOrderId());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getOrderTime());
            Assertions.assertNotNull(item.getOriginSize());
            Assertions.assertNotNull(item.getDealSize());
            Assertions.assertNotNull(item.getRemainSize());
            Assertions.assertNotNull(item.getCanceledSize());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getMatchTime());
            Assertions.assertNotNull(item.getSuccess());
            Assertions.assertNotNull(item.getFailMsg());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOrderByOrderId
    * Cancel Order By OrderId
    * /api/v1/hf/orders/{orderId}
    */
    @Test
    public void testCancelOrderByOrderId() throws Exception {
        CancelOrderByOrderIdReq.CancelOrderByOrderIdReqBuilder builder = CancelOrderByOrderIdReq.builder();
        builder.orderId(?).symbol(?);
        CancelOrderByOrderIdReq req = builder.build();
        CancelOrderByOrderIdResp resp = api.cancelOrderByOrderId(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOrderByOrderIdSync
    * Cancel Order By OrderId Sync
    * /api/v1/hf/orders/sync/{orderId}
    */
    @Test
    public void testCancelOrderByOrderIdSync() throws Exception {
        CancelOrderByOrderIdSyncReq.CancelOrderByOrderIdSyncReqBuilder builder = CancelOrderByOrderIdSyncReq.builder();
        builder.symbol(?).orderId(?);
        CancelOrderByOrderIdSyncReq req = builder.build();
        CancelOrderByOrderIdSyncResp resp = api.cancelOrderByOrderIdSync(req);
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getOriginSize());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getRemainSize());
        Assertions.assertNotNull(resp.getCanceledSize());
        Assertions.assertNotNull(resp.getStatus());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOrderByClientOid
    * Cancel Order By ClientOid
    * /api/v1/hf/orders/client-order/{clientOid}
    */
    @Test
    public void testCancelOrderByClientOid() throws Exception {
        CancelOrderByClientOidReq.CancelOrderByClientOidReqBuilder builder = CancelOrderByClientOidReq.builder();
        builder.clientOid(?).symbol(?);
        CancelOrderByClientOidReq req = builder.build();
        CancelOrderByClientOidResp resp = api.cancelOrderByClientOid(req);
        Assertions.assertNotNull(resp.getClientOid());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOrderByClientOidSync
    * Cancel Order By ClientOid Sync
    * /api/v1/hf/orders/sync/client-order/{clientOid}
    */
    @Test
    public void testCancelOrderByClientOidSync() throws Exception {
        CancelOrderByClientOidSyncReq.CancelOrderByClientOidSyncReqBuilder builder = CancelOrderByClientOidSyncReq.builder();
        builder.symbol(?).clientOid(?);
        CancelOrderByClientOidSyncReq req = builder.build();
        CancelOrderByClientOidSyncResp resp = api.cancelOrderByClientOidSync(req);
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getOriginSize());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getRemainSize());
        Assertions.assertNotNull(resp.getCanceledSize());
        Assertions.assertNotNull(resp.getStatus());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelPartialOrder
    * Cancel Partial Order
    * /api/v1/hf/orders/cancel/{orderId}
    */
    @Test
    public void testCancelPartialOrder() throws Exception {
        CancelPartialOrderReq.CancelPartialOrderReqBuilder builder = CancelPartialOrderReq.builder();
        builder.orderId(?).symbol(?).cancelSize(?);
        CancelPartialOrderReq req = builder.build();
        CancelPartialOrderResp resp = api.cancelPartialOrder(req);
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getCancelSize());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelAllOrdersBySymbol
    * Cancel All Orders By Symbol
    * /api/v1/hf/orders
    */
    @Test
    public void testCancelAllOrdersBySymbol() throws Exception {
        CancelAllOrdersBySymbolReq.CancelAllOrdersBySymbolReqBuilder builder = CancelAllOrdersBySymbolReq.builder();
        builder.symbol(?);
        CancelAllOrdersBySymbolReq req = builder.build();
        CancelAllOrdersBySymbolResp resp = api.cancelAllOrdersBySymbol(req);
        Assertions.assertNotNull(resp.getData());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelAllOrders
    * Cancel All Orders
    * /api/v1/hf/orders/cancelAll
    */
    @Test
    public void testCancelAllOrders() throws Exception {
        CancelAllOrdersResp resp = api.cancelAllOrders();
        resp.getSucceedSymbols().forEach( item -> {
        });

        resp.getFailedSymbols().forEach( item -> {
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getError());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * modifyOrder
    * Modify Order
    * /api/v1/hf/orders/alter
    */
    @Test
    public void testModifyOrder() throws Exception {
        ModifyOrderReq.ModifyOrderReqBuilder builder = ModifyOrderReq.builder();
        builder.clientOid(?).symbol(?).orderId(?).newPrice(?).newSize(?);
        ModifyOrderReq req = builder.build();
        ModifyOrderResp resp = api.modifyOrder(req);
        Assertions.assertNotNull(resp.getNewOrderId());
        Assertions.assertNotNull(resp.getClientOid());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOrderByOrderId
    * Get Order By OrderId
    * /api/v1/hf/orders/{orderId}
    */
    @Test
    public void testGetOrderByOrderId() throws Exception {
        GetOrderByOrderIdReq.GetOrderByOrderIdReqBuilder builder = GetOrderByOrderIdReq.builder();
        builder.symbol(?).orderId(?);
        GetOrderByOrderIdReq req = builder.build();
        GetOrderByOrderIdResp resp = api.getOrderByOrderId(req);
        Assertions.assertNotNull(resp.getId());
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getOpType());
        Assertions.assertNotNull(resp.getType());
        Assertions.assertNotNull(resp.getSide());
        Assertions.assertNotNull(resp.getPrice());
        Assertions.assertNotNull(resp.getSize());
        Assertions.assertNotNull(resp.getFunds());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getDealFunds());
        Assertions.assertNotNull(resp.getFee());
        Assertions.assertNotNull(resp.getFeeCurrency());
        Assertions.assertNotNull(resp.getStp());
        Assertions.assertNotNull(resp.getTimeInForce());
        Assertions.assertNotNull(resp.getPostOnly());
        Assertions.assertNotNull(resp.getHidden());
        Assertions.assertNotNull(resp.getIceberg());
        Assertions.assertNotNull(resp.getVisibleSize());
        Assertions.assertNotNull(resp.getCancelAfter());
        Assertions.assertNotNull(resp.getChannel());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getRemark());
        Assertions.assertNotNull(resp.getTags());
        Assertions.assertNotNull(resp.getCancelExist());
        Assertions.assertNotNull(resp.getCreatedAt());
        Assertions.assertNotNull(resp.getLastUpdatedAt());
        Assertions.assertNotNull(resp.getTradeType());
        Assertions.assertNotNull(resp.getInOrderBook());
        Assertions.assertNotNull(resp.getCancelledSize());
        Assertions.assertNotNull(resp.getCancelledFunds());
        Assertions.assertNotNull(resp.getRemainSize());
        Assertions.assertNotNull(resp.getRemainFunds());
        Assertions.assertNotNull(resp.getTax());
        Assertions.assertNotNull(resp.getActive());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOrderByClientOid
    * Get Order By ClientOid
    * /api/v1/hf/orders/client-order/{clientOid}
    */
    @Test
    public void testGetOrderByClientOid() throws Exception {
        GetOrderByClientOidReq.GetOrderByClientOidReqBuilder builder = GetOrderByClientOidReq.builder();
        builder.symbol(?).clientOid(?);
        GetOrderByClientOidReq req = builder.build();
        GetOrderByClientOidResp resp = api.getOrderByClientOid(req);
        Assertions.assertNotNull(resp.getId());
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getOpType());
        Assertions.assertNotNull(resp.getType());
        Assertions.assertNotNull(resp.getSide());
        Assertions.assertNotNull(resp.getPrice());
        Assertions.assertNotNull(resp.getSize());
        Assertions.assertNotNull(resp.getFunds());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getDealFunds());
        Assertions.assertNotNull(resp.getFee());
        Assertions.assertNotNull(resp.getFeeCurrency());
        Assertions.assertNotNull(resp.getStp());
        Assertions.assertNotNull(resp.getTimeInForce());
        Assertions.assertNotNull(resp.getPostOnly());
        Assertions.assertNotNull(resp.getHidden());
        Assertions.assertNotNull(resp.getIceberg());
        Assertions.assertNotNull(resp.getVisibleSize());
        Assertions.assertNotNull(resp.getCancelAfter());
        Assertions.assertNotNull(resp.getChannel());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getRemark());
        Assertions.assertNotNull(resp.getTags());
        Assertions.assertNotNull(resp.getCancelExist());
        Assertions.assertNotNull(resp.getCreatedAt());
        Assertions.assertNotNull(resp.getLastUpdatedAt());
        Assertions.assertNotNull(resp.getTradeType());
        Assertions.assertNotNull(resp.getInOrderBook());
        Assertions.assertNotNull(resp.getCancelledSize());
        Assertions.assertNotNull(resp.getCancelledFunds());
        Assertions.assertNotNull(resp.getRemainSize());
        Assertions.assertNotNull(resp.getRemainFunds());
        Assertions.assertNotNull(resp.getTax());
        Assertions.assertNotNull(resp.getActive());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getSymbolsWithOpenOrder
    * Get Symbols With Open Order
    * /api/v1/hf/orders/active/symbols
    */
    @Test
    public void testGetSymbolsWithOpenOrder() throws Exception {
        GetSymbolsWithOpenOrderResp resp = api.getSymbolsWithOpenOrder();
        resp.getSymbols().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOpenOrders
    * Get Open Orders
    * /api/v1/hf/orders/active
    */
    @Test
    public void testGetOpenOrders() throws Exception {
        GetOpenOrdersReq.GetOpenOrdersReqBuilder builder = GetOpenOrdersReq.builder();
        builder.symbol(?);
        GetOpenOrdersReq req = builder.build();
        GetOpenOrdersResp resp = api.getOpenOrders(req);
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getOpType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getDealSize());
            Assertions.assertNotNull(item.getDealFunds());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getCancelExist());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getLastUpdatedAt());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getInOrderBook());
            Assertions.assertNotNull(item.getCancelledSize());
            Assertions.assertNotNull(item.getCancelledFunds());
            Assertions.assertNotNull(item.getRemainSize());
            Assertions.assertNotNull(item.getRemainFunds());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getActive());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOpenOrdersByPage
    * Get Open Orders By Page
    * /api/v1/hf/orders/active/page
    */
    @Test
    public void testGetOpenOrdersByPage() throws Exception {
        GetOpenOrdersByPageReq.GetOpenOrdersByPageReqBuilder builder = GetOpenOrdersByPageReq.builder();
        builder.symbol(?).pageNum(?).pageSize(?);
        GetOpenOrdersByPageReq req = builder.build();
        GetOpenOrdersByPageResp resp = api.getOpenOrdersByPage(req);
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getOpType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getDealSize());
            Assertions.assertNotNull(item.getDealFunds());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getCancelExist());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getLastUpdatedAt());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getInOrderBook());
            Assertions.assertNotNull(item.getCancelledSize());
            Assertions.assertNotNull(item.getCancelledFunds());
            Assertions.assertNotNull(item.getRemainSize());
            Assertions.assertNotNull(item.getRemainFunds());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getActive());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getClosedOrders
    * Get Closed Orders
    * /api/v1/hf/orders/done
    */
    @Test
    public void testGetClosedOrders() throws Exception {
        GetClosedOrdersReq.GetClosedOrdersReqBuilder builder = GetClosedOrdersReq.builder();
        builder.symbol(?).side(?).type(?).lastId(?).limit(?).startAt(?).endAt(?);
        GetClosedOrdersReq req = builder.build();
        GetClosedOrdersResp resp = api.getClosedOrders(req);
        Assertions.assertNotNull(resp.getLastId());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getOpType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getDealSize());
            Assertions.assertNotNull(item.getDealFunds());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getCancelExist());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getLastUpdatedAt());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getInOrderBook());
            Assertions.assertNotNull(item.getCancelledSize());
            Assertions.assertNotNull(item.getCancelledFunds());
            Assertions.assertNotNull(item.getRemainSize());
            Assertions.assertNotNull(item.getRemainFunds());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getActive());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getTradeHistory
    * Get Trade History
    * /api/v1/hf/fills
    */
    @Test
    public void testGetTradeHistory() throws Exception {
        GetTradeHistoryReq.GetTradeHistoryReqBuilder builder = GetTradeHistoryReq.builder();
        builder.symbol(?).orderId(?).side(?).type(?).lastId(?).limit(?).startAt(?).endAt(?);
        GetTradeHistoryReq req = builder.build();
        GetTradeHistoryResp resp = api.getTradeHistory(req);
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getTradeId());
            Assertions.assertNotNull(item.getOrderId());
            Assertions.assertNotNull(item.getCounterOrderId());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getLiquidity());
            Assertions.assertNotNull(item.getForceTaker());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeRate());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getTaxRate());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getCreatedAt());
        });

        Assertions.assertNotNull(resp.getLastId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getDCP
    * Get DCP
    * /api/v1/hf/orders/dead-cancel-all/query
    */
    @Test
    public void testGetDCP() throws Exception {
        GetDCPResp resp = api.getDCP();
        Assertions.assertNotNull(resp.getTimeout());
        Assertions.assertNotNull(resp.getSymbols());
        Assertions.assertNotNull(resp.getCurrentTime());
        Assertions.assertNotNull(resp.getTriggerTime());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * setDCP
    * Set DCP
    * /api/v1/hf/orders/dead-cancel-all
    */
    @Test
    public void testSetDCP() throws Exception {
        SetDCPReq.SetDCPReqBuilder builder = SetDCPReq.builder();
        builder.timeout(?).symbols(?);
        SetDCPReq req = builder.build();
        SetDCPResp resp = api.setDCP(req);
        Assertions.assertNotNull(resp.getCurrentTime());
        Assertions.assertNotNull(resp.getTriggerTime());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * addStopOrder
    * Add Stop Order
    * /api/v1/stop-order
    */
    @Test
    public void testAddStopOrder() throws Exception {
        AddStopOrderReq.AddStopOrderReqBuilder builder = AddStopOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).cancelAfter(?).funds(?).stopPrice(?).tradeType(?);
        AddStopOrderReq req = builder.build();
        AddStopOrderResp resp = api.addStopOrder(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelStopOrderByClientOid
    * Cancel Stop Order By ClientOid
    * /api/v1/stop-order/cancelOrderByClientOid
    */
    @Test
    public void testCancelStopOrderByClientOid() throws Exception {
        CancelStopOrderByClientOidReq.CancelStopOrderByClientOidReqBuilder builder = CancelStopOrderByClientOidReq.builder();
        builder.symbol(?).clientOid(?);
        CancelStopOrderByClientOidReq req = builder.build();
        CancelStopOrderByClientOidResp resp = api.cancelStopOrderByClientOid(req);
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getCancelledOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelStopOrderByOrderId
    * Cancel Stop Order By OrderId
    * /api/v1/stop-order/{orderId}
    */
    @Test
    public void testCancelStopOrderByOrderId() throws Exception {
        CancelStopOrderByOrderIdReq.CancelStopOrderByOrderIdReqBuilder builder = CancelStopOrderByOrderIdReq.builder();
        builder.orderId(?);
        CancelStopOrderByOrderIdReq req = builder.build();
        CancelStopOrderByOrderIdResp resp = api.cancelStopOrderByOrderId(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * batchCancelStopOrder
    * Batch Cancel Stop Orders
    * /api/v1/stop-order/cancel
    */
    @Test
    public void testBatchCancelStopOrder() throws Exception {
        BatchCancelStopOrderReq.BatchCancelStopOrderReqBuilder builder = BatchCancelStopOrderReq.builder();
        builder.symbol(?).tradeType(?).orderIds(?);
        BatchCancelStopOrderReq req = builder.build();
        BatchCancelStopOrderResp resp = api.batchCancelStopOrder(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getStopOrdersList
    * Get Stop Orders List
    * /api/v1/stop-order
    */
    @Test
    public void testGetStopOrdersList() throws Exception {
        GetStopOrdersListReq.GetStopOrdersListReqBuilder builder = GetStopOrdersListReq.builder();
        builder.symbol(?).side(?).type(?).tradeType(?).startAt(?).endAt(?).currentPage(?).orderIds(?).pageSize(?).stop(?);
        GetStopOrdersListReq req = builder.build();
        GetStopOrdersListResp resp = api.getStopOrdersList(req);
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getUserId());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getOrderTime());
            Assertions.assertNotNull(item.getDomainId());
            Assertions.assertNotNull(item.getTradeSource());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getTakerFeeRate());
            Assertions.assertNotNull(item.getMakerFeeRate());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getStopTriggerTime());
            Assertions.assertNotNull(item.getStopPrice());
            Assertions.assertNotNull(item.getRelatedNo());
            Assertions.assertNotNull(item.getLimitPrice());
            Assertions.assertNotNull(item.getPop());
            Assertions.assertNotNull(item.getActivateCondition());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getStopOrderByOrderId
    * Get Stop Order By OrderId
    * /api/v1/stop-order/{orderId}
    */
    @Test
    public void testGetStopOrderByOrderId() throws Exception {
        GetStopOrderByOrderIdReq.GetStopOrderByOrderIdReqBuilder builder = GetStopOrderByOrderIdReq.builder();
        builder.orderId(?);
        GetStopOrderByOrderIdReq req = builder.build();
        GetStopOrderByOrderIdResp resp = api.getStopOrderByOrderId(req);
        Assertions.assertNotNull(resp.getId());
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getUserId());
        Assertions.assertNotNull(resp.getStatus());
        Assertions.assertNotNull(resp.getType());
        Assertions.assertNotNull(resp.getSide());
        Assertions.assertNotNull(resp.getPrice());
        Assertions.assertNotNull(resp.getSize());
        Assertions.assertNotNull(resp.getFunds());
        Assertions.assertNotNull(resp.getStp());
        Assertions.assertNotNull(resp.getTimeInForce());
        Assertions.assertNotNull(resp.getCancelAfter());
        Assertions.assertNotNull(resp.getPostOnly());
        Assertions.assertNotNull(resp.getHidden());
        Assertions.assertNotNull(resp.getIceberg());
        Assertions.assertNotNull(resp.getVisibleSize());
        Assertions.assertNotNull(resp.getChannel());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getRemark());
        Assertions.assertNotNull(resp.getTags());
        Assertions.assertNotNull(resp.getDomainId());
        Assertions.assertNotNull(resp.getTradeSource());
        Assertions.assertNotNull(resp.getTradeType());
        Assertions.assertNotNull(resp.getFeeCurrency());
        Assertions.assertNotNull(resp.getTakerFeeRate());
        Assertions.assertNotNull(resp.getMakerFeeRate());
        Assertions.assertNotNull(resp.getCreatedAt());
        Assertions.assertNotNull(resp.getStop());
        Assertions.assertNotNull(resp.getStopTriggerTime());
        Assertions.assertNotNull(resp.getStopPrice());
        Assertions.assertNotNull(resp.getOrderTime());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getStopOrderByClientOid
    * Get Stop Order By ClientOid
    * /api/v1/stop-order/queryOrderByClientOid
    */
    @Test
    public void testGetStopOrderByClientOid() throws Exception {
        GetStopOrderByClientOidReq.GetStopOrderByClientOidReqBuilder builder = GetStopOrderByClientOidReq.builder();
        builder.clientOid(?).symbol(?);
        GetStopOrderByClientOidReq req = builder.build();
        GetStopOrderByClientOidResp resp = api.getStopOrderByClientOid(req);
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getUserId());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getDomainId());
            Assertions.assertNotNull(item.getTradeSource());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getTakerFeeRate());
            Assertions.assertNotNull(item.getMakerFeeRate());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getStopTriggerTime());
            Assertions.assertNotNull(item.getStopPrice());
            Assertions.assertNotNull(item.getOrderTime());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * addOcoOrder
    * Add OCO Order
    * /api/v3/oco/order
    */
    @Test
    public void testAddOcoOrder() throws Exception {
        AddOcoOrderReq.AddOcoOrderReqBuilder builder = AddOcoOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).remark(?).price(?).size(?).stopPrice(?).limitPrice(?).tradeType(?);
        AddOcoOrderReq req = builder.build();
        AddOcoOrderResp resp = api.addOcoOrder(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOcoOrderByOrderId
    * Cancel OCO Order By OrderId
    * /api/v3/oco/order/{orderId}
    */
    @Test
    public void testCancelOcoOrderByOrderId() throws Exception {
        CancelOcoOrderByOrderIdReq.CancelOcoOrderByOrderIdReqBuilder builder = CancelOcoOrderByOrderIdReq.builder();
        builder.orderId(?);
        CancelOcoOrderByOrderIdReq req = builder.build();
        CancelOcoOrderByOrderIdResp resp = api.cancelOcoOrderByOrderId(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOcoOrderByClientOid
    * Cancel OCO Order By ClientOid
    * /api/v3/oco/client-order/{clientOid}
    */
    @Test
    public void testCancelOcoOrderByClientOid() throws Exception {
        CancelOcoOrderByClientOidReq.CancelOcoOrderByClientOidReqBuilder builder = CancelOcoOrderByClientOidReq.builder();
        builder.clientOid(?);
        CancelOcoOrderByClientOidReq req = builder.build();
        CancelOcoOrderByClientOidResp resp = api.cancelOcoOrderByClientOid(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * batchCancelOcoOrders
    * Batch Cancel OCO Order
    * /api/v3/oco/orders
    */
    @Test
    public void testBatchCancelOcoOrders() throws Exception {
        BatchCancelOcoOrdersReq.BatchCancelOcoOrdersReqBuilder builder = BatchCancelOcoOrdersReq.builder();
        builder.orderIds(?).symbol(?);
        BatchCancelOcoOrdersReq req = builder.build();
        BatchCancelOcoOrdersResp resp = api.batchCancelOcoOrders(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOcoOrderByOrderId
    * Get OCO Order By OrderId
    * /api/v3/oco/order/{orderId}
    */
    @Test
    public void testGetOcoOrderByOrderId() throws Exception {
        GetOcoOrderByOrderIdReq.GetOcoOrderByOrderIdReqBuilder builder = GetOcoOrderByOrderIdReq.builder();
        builder.orderId(?);
        GetOcoOrderByOrderIdReq req = builder.build();
        GetOcoOrderByOrderIdResp resp = api.getOcoOrderByOrderId(req);
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getOrderTime());
        Assertions.assertNotNull(resp.getStatus());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOcoOrderByClientOid
    * Get OCO Order By ClientOid
    * /api/v3/oco/client-order/{clientOid}
    */
    @Test
    public void testGetOcoOrderByClientOid() throws Exception {
        GetOcoOrderByClientOidReq.GetOcoOrderByClientOidReqBuilder builder = GetOcoOrderByClientOidReq.builder();
        builder.clientOid(?);
        GetOcoOrderByClientOidReq req = builder.build();
        GetOcoOrderByClientOidResp resp = api.getOcoOrderByClientOid(req);
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getOrderTime());
        Assertions.assertNotNull(resp.getStatus());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOcoOrderDetailByOrderId
    * Get OCO Order Detail By OrderId
    * /api/v3/oco/order/details/{orderId}
    */
    @Test
    public void testGetOcoOrderDetailByOrderId() throws Exception {
        GetOcoOrderDetailByOrderIdReq.GetOcoOrderDetailByOrderIdReqBuilder builder = GetOcoOrderDetailByOrderIdReq.builder();
        builder.orderId(?);
        GetOcoOrderDetailByOrderIdReq req = builder.build();
        GetOcoOrderDetailByOrderIdResp resp = api.getOcoOrderDetailByOrderId(req);
        Assertions.assertNotNull(resp.getOrderId());
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getOrderTime());
        Assertions.assertNotNull(resp.getStatus());
        resp.getOrders().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getStopPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getStatus());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOcoOrderList
    * Get OCO Order List
    * /api/v3/oco/orders
    */
    @Test
    public void testGetOcoOrderList() throws Exception {
        GetOcoOrderListReq.GetOcoOrderListReqBuilder builder = GetOcoOrderListReq.builder();
        builder.symbol(?).startAt(?).endAt(?).orderIds(?).pageSize(?).currentPage(?);
        GetOcoOrderListReq req = builder.build();
        GetOcoOrderListResp resp = api.getOcoOrderList(req);
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getOrderId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getOrderTime());
            Assertions.assertNotNull(item.getStatus());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * addOrderOld
    * Add Order - Old
    * /api/v1/orders
    */
    @Test
    public void testAddOrderOld() throws Exception {
        AddOrderOldReq.AddOrderOldReqBuilder builder = AddOrderOldReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).cancelAfter(?).funds(?).tradeType(?);
        AddOrderOldReq req = builder.build();
        AddOrderOldResp resp = api.addOrderOld(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * addOrderTestOld
    * Add Order Test - Old
    * /api/v1/orders/test
    */
    @Test
    public void testAddOrderTestOld() throws Exception {
        AddOrderTestOldReq.AddOrderTestOldReqBuilder builder = AddOrderTestOldReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).cancelAfter(?).funds(?).tradeType(?);
        AddOrderTestOldReq req = builder.build();
        AddOrderTestOldResp resp = api.addOrderTestOld(req);
        Assertions.assertNotNull(resp.getOrderId());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * batchAddOrdersOld
    * Batch Add Orders - Old
    * /api/v1/orders/multi
    */
    @Test
    public void testBatchAddOrdersOld() throws Exception {
        BatchAddOrdersOldReq.BatchAddOrdersOldReqBuilder builder = BatchAddOrdersOldReq.builder();
        builder.orderList(?).symbol(?);
        BatchAddOrdersOldReq req = builder.build();
        BatchAddOrdersOldResp resp = api.batchAddOrdersOld(req);
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getStopPrice());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberge());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getStatus());
            Assertions.assertNotNull(item.getFailMsg());
            Assertions.assertNotNull(item.getClientOid());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOrderByOrderIdOld
    * Cancel Order By OrderId - Old
    * /api/v1/orders/{orderId}
    */
    @Test
    public void testCancelOrderByOrderIdOld() throws Exception {
        CancelOrderByOrderIdOldReq.CancelOrderByOrderIdOldReqBuilder builder = CancelOrderByOrderIdOldReq.builder();
        builder.orderId(?);
        CancelOrderByOrderIdOldReq req = builder.build();
        CancelOrderByOrderIdOldResp resp = api.cancelOrderByOrderIdOld(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * cancelOrderByClientOidOld
    * Cancel Order By ClientOid - Old
    * /api/v1/order/client-order/{clientOid}
    */
    @Test
    public void testCancelOrderByClientOidOld() throws Exception {
        CancelOrderByClientOidOldReq.CancelOrderByClientOidOldReqBuilder builder = CancelOrderByClientOidOldReq.builder();
        builder.clientOid(?);
        CancelOrderByClientOidOldReq req = builder.build();
        CancelOrderByClientOidOldResp resp = api.cancelOrderByClientOidOld(req);
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getCancelledOrderId());
        resp.getCancelledOcoOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * batchCancelOrderOld
    * Batch Cancel Order - Old
    * /api/v1/orders
    */
    @Test
    public void testBatchCancelOrderOld() throws Exception {
        BatchCancelOrderOldReq.BatchCancelOrderOldReqBuilder builder = BatchCancelOrderOldReq.builder();
        builder.symbol(?).tradeType(?);
        BatchCancelOrderOldReq req = builder.build();
        BatchCancelOrderOldResp resp = api.batchCancelOrderOld(req);
        resp.getCancelledOrderIds().forEach( item -> {
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOrdersListOld
    * Get Orders List - Old
    * /api/v1/orders
    */
    @Test
    public void testGetOrdersListOld() throws Exception {
        GetOrdersListOldReq.GetOrdersListOldReqBuilder builder = GetOrdersListOldReq.builder();
        builder.symbol(?).status(?).side(?).type(?).tradeType(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetOrdersListOldReq req = builder.build();
        GetOrdersListOldResp resp = api.getOrdersListOld(req);
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getOpType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getDealFunds());
            Assertions.assertNotNull(item.getDealSize());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getStopTriggered());
            Assertions.assertNotNull(item.getStopPrice());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getIsActive());
            Assertions.assertNotNull(item.getCancelExist());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getTaxRate());
            Assertions.assertNotNull(item.getTaxCurrency());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getRecentOrdersListOld
    * Get Recent Orders List - Old
    * /api/v1/limit/orders
    */
    @Test
    public void testGetRecentOrdersListOld() throws Exception {
        GetRecentOrdersListOldResp resp = api.getRecentOrdersListOld();
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getId());
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getOpType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getDealFunds());
            Assertions.assertNotNull(item.getDealSize());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStp());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getStopTriggered());
            Assertions.assertNotNull(item.getStopPrice());
            Assertions.assertNotNull(item.getTimeInForce());
            Assertions.assertNotNull(item.getPostOnly());
            Assertions.assertNotNull(item.getHidden());
            Assertions.assertNotNull(item.getIceberg());
            Assertions.assertNotNull(item.getVisibleSize());
            Assertions.assertNotNull(item.getCancelAfter());
            Assertions.assertNotNull(item.getChannel());
            Assertions.assertNotNull(item.getClientOid());
            Assertions.assertNotNull(item.getRemark());
            Assertions.assertNotNull(item.getTags());
            Assertions.assertNotNull(item.getIsActive());
            Assertions.assertNotNull(item.getCancelExist());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getTaxRate());
            Assertions.assertNotNull(item.getTaxCurrency());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOrderByOrderIdOld
    * Get Order By OrderId - Old
    * /api/v1/orders/{orderId}
    */
    @Test
    public void testGetOrderByOrderIdOld() throws Exception {
        GetOrderByOrderIdOldReq.GetOrderByOrderIdOldReqBuilder builder = GetOrderByOrderIdOldReq.builder();
        builder.orderId(?);
        GetOrderByOrderIdOldReq req = builder.build();
        GetOrderByOrderIdOldResp resp = api.getOrderByOrderIdOld(req);
        Assertions.assertNotNull(resp.getId());
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getOpType());
        Assertions.assertNotNull(resp.getType());
        Assertions.assertNotNull(resp.getSide());
        Assertions.assertNotNull(resp.getPrice());
        Assertions.assertNotNull(resp.getSize());
        Assertions.assertNotNull(resp.getFunds());
        Assertions.assertNotNull(resp.getDealFunds());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getFee());
        Assertions.assertNotNull(resp.getFeeCurrency());
        Assertions.assertNotNull(resp.getStp());
        Assertions.assertNotNull(resp.getStop());
        Assertions.assertNotNull(resp.getStopTriggered());
        Assertions.assertNotNull(resp.getStopPrice());
        Assertions.assertNotNull(resp.getTimeInForce());
        Assertions.assertNotNull(resp.getPostOnly());
        Assertions.assertNotNull(resp.getHidden());
        Assertions.assertNotNull(resp.getIceberg());
        Assertions.assertNotNull(resp.getVisibleSize());
        Assertions.assertNotNull(resp.getCancelAfter());
        Assertions.assertNotNull(resp.getChannel());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getRemark());
        Assertions.assertNotNull(resp.getTags());
        Assertions.assertNotNull(resp.getIsActive());
        Assertions.assertNotNull(resp.getCancelExist());
        Assertions.assertNotNull(resp.getCreatedAt());
        Assertions.assertNotNull(resp.getTradeType());
        Assertions.assertNotNull(resp.getTax());
        Assertions.assertNotNull(resp.getTaxRate());
        Assertions.assertNotNull(resp.getTaxCurrency());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getOrderByClientOidOld
    * Get Order By ClientOid - Old
    * /api/v1/order/client-order/{clientOid}
    */
    @Test
    public void testGetOrderByClientOidOld() throws Exception {
        GetOrderByClientOidOldReq.GetOrderByClientOidOldReqBuilder builder = GetOrderByClientOidOldReq.builder();
        builder.clientOid(?);
        GetOrderByClientOidOldReq req = builder.build();
        GetOrderByClientOidOldResp resp = api.getOrderByClientOidOld(req);
        Assertions.assertNotNull(resp.getId());
        Assertions.assertNotNull(resp.getSymbol());
        Assertions.assertNotNull(resp.getOpType());
        Assertions.assertNotNull(resp.getType());
        Assertions.assertNotNull(resp.getSide());
        Assertions.assertNotNull(resp.getPrice());
        Assertions.assertNotNull(resp.getSize());
        Assertions.assertNotNull(resp.getFunds());
        Assertions.assertNotNull(resp.getDealFunds());
        Assertions.assertNotNull(resp.getDealSize());
        Assertions.assertNotNull(resp.getFee());
        Assertions.assertNotNull(resp.getFeeCurrency());
        Assertions.assertNotNull(resp.getStp());
        Assertions.assertNotNull(resp.getStop());
        Assertions.assertNotNull(resp.getStopTriggered());
        Assertions.assertNotNull(resp.getStopPrice());
        Assertions.assertNotNull(resp.getTimeInForce());
        Assertions.assertNotNull(resp.getPostOnly());
        Assertions.assertNotNull(resp.getHidden());
        Assertions.assertNotNull(resp.getIceberg());
        Assertions.assertNotNull(resp.getVisibleSize());
        Assertions.assertNotNull(resp.getCancelAfter());
        Assertions.assertNotNull(resp.getChannel());
        Assertions.assertNotNull(resp.getClientOid());
        Assertions.assertNotNull(resp.getRemark());
        Assertions.assertNotNull(resp.getTags());
        Assertions.assertNotNull(resp.getIsActive());
        Assertions.assertNotNull(resp.getCancelExist());
        Assertions.assertNotNull(resp.getCreatedAt());
        Assertions.assertNotNull(resp.getTradeType());
        Assertions.assertNotNull(resp.getTax());
        Assertions.assertNotNull(resp.getTaxRate());
        Assertions.assertNotNull(resp.getTaxCurrency());
        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getTradeHistoryOld
    * Get Trade History - Old
    * /api/v1/fills
    */
    @Test
    public void testGetTradeHistoryOld() throws Exception {
        GetTradeHistoryOldReq.GetTradeHistoryOldReqBuilder builder = GetTradeHistoryOldReq.builder();
        builder.symbol(?).orderId(?).side(?).type(?).tradeType(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetTradeHistoryOldReq req = builder.build();
        GetTradeHistoryOldResp resp = api.getTradeHistoryOld(req);
        Assertions.assertNotNull(resp.getCurrentPage());
        Assertions.assertNotNull(resp.getPageSize());
        Assertions.assertNotNull(resp.getTotalNum());
        Assertions.assertNotNull(resp.getTotalPage());
        resp.getItems().forEach( item -> {
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getTradeId());
            Assertions.assertNotNull(item.getOrderId());
            Assertions.assertNotNull(item.getCounterOrderId());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getLiquidity());
            Assertions.assertNotNull(item.getForceTaker());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeRate());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getCreatedAt());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

    /**
    * getRecentTradeHistoryOld
    * Get Recent Trade History - Old
    * /api/v1/limit/fills
    */
    @Test
    public void testGetRecentTradeHistoryOld() throws Exception {
        GetRecentTradeHistoryOldResp resp = api.getRecentTradeHistoryOld();
        resp.getData().forEach( item -> {
            Assertions.assertNotNull(item.getSymbol());
            Assertions.assertNotNull(item.getTradeId());
            Assertions.assertNotNull(item.getOrderId());
            Assertions.assertNotNull(item.getCounterOrderId());
            Assertions.assertNotNull(item.getSide());
            Assertions.assertNotNull(item.getLiquidity());
            Assertions.assertNotNull(item.getForceTaker());
            Assertions.assertNotNull(item.getPrice());
            Assertions.assertNotNull(item.getSize());
            Assertions.assertNotNull(item.getFunds());
            Assertions.assertNotNull(item.getFee());
            Assertions.assertNotNull(item.getFeeRate());
            Assertions.assertNotNull(item.getFeeCurrency());
            Assertions.assertNotNull(item.getStop());
            Assertions.assertNotNull(item.getTradeType());
            Assertions.assertNotNull(item.getType());
            Assertions.assertNotNull(item.getCreatedAt());
            Assertions.assertNotNull(item.getTax());
            Assertions.assertNotNull(item.getTaxCurrency());
            Assertions.assertNotNull(item.getTaxRate());
        });

        log.info("resp: {}", mapper.writeValueAsString(resp));
    }

