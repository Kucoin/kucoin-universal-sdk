
    /**
    * addOrder
    * Add Order
    * /api/v1/hf/orders
    */
    public void testAddOrder() {
        AddOrderReq.AddOrderReqBuilder builder = AddOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).tags(?).cancelAfter(?).funds(?).allowMaxTimeWindow(?).clientTimestamp(?);
        AddOrderReq req = builder.build();
        AddOrderResp resp = this.api.addOrder(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addOrderSync
    * Add Order Sync
    * /api/v1/hf/orders/sync
    */
    public void testAddOrderSync() {
        AddOrderSyncReq.AddOrderSyncReqBuilder builder = AddOrderSyncReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).tags(?).cancelAfter(?).funds(?).allowMaxTimeWindow(?).clientTimestamp(?);
        AddOrderSyncReq req = builder.build();
        AddOrderSyncResp resp = this.api.addOrderSync(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->orderTime);
        self::assertNotNull($resp->originSize);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->remainSize);
        self::assertNotNull($resp->canceledSize);
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->matchTime);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addOrderTest
    * Add Order Test
    * /api/v1/hf/orders/test
    */
    public void testAddOrderTest() {
        AddOrderTestReq.AddOrderTestReqBuilder builder = AddOrderTestReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).tags(?).cancelAfter(?).funds(?).allowMaxTimeWindow(?).clientTimestamp(?);
        AddOrderTestReq req = builder.build();
        AddOrderTestResp resp = this.api.addOrderTest(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchAddOrders
    * Batch Add Orders
    * /api/v1/hf/orders/multi
    */
    public void testBatchAddOrders() {
        BatchAddOrdersReq.BatchAddOrdersReqBuilder builder = BatchAddOrdersReq.builder();
        builder.orderList(?);
        BatchAddOrdersReq req = builder.build();
        BatchAddOrdersResp resp = this.api.batchAddOrders(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->success);
            self::assertNotNull($item->failMsg);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchAddOrdersSync
    * Batch Add Orders Sync
    * /api/v1/hf/orders/multi/sync
    */
    public void testBatchAddOrdersSync() {
        BatchAddOrdersSyncReq.BatchAddOrdersSyncReqBuilder builder = BatchAddOrdersSyncReq.builder();
        builder.orderList(?);
        BatchAddOrdersSyncReq req = builder.build();
        BatchAddOrdersSyncResp resp = this.api.batchAddOrdersSync(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->orderTime);
            self::assertNotNull($item->originSize);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->remainSize);
            self::assertNotNull($item->canceledSize);
            self::assertNotNull($item->status);
            self::assertNotNull($item->matchTime);
            self::assertNotNull($item->success);
            self::assertNotNull($item->failMsg);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByOrderId
    * Cancel Order By OrderId
    * /api/v1/hf/orders/{orderId}
    */
    public void testCancelOrderByOrderId() {
        CancelOrderByOrderIdReq.CancelOrderByOrderIdReqBuilder builder = CancelOrderByOrderIdReq.builder();
        builder.orderId(?).symbol(?);
        CancelOrderByOrderIdReq req = builder.build();
        CancelOrderByOrderIdResp resp = this.api.cancelOrderByOrderId(req);
        self::assertNotNull($resp->orderId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByOrderIdSync
    * Cancel Order By OrderId Sync
    * /api/v1/hf/orders/sync/{orderId}
    */
    public void testCancelOrderByOrderIdSync() {
        CancelOrderByOrderIdSyncReq.CancelOrderByOrderIdSyncReqBuilder builder = CancelOrderByOrderIdSyncReq.builder();
        builder.symbol(?).orderId(?);
        CancelOrderByOrderIdSyncReq req = builder.build();
        CancelOrderByOrderIdSyncResp resp = this.api.cancelOrderByOrderIdSync(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->originSize);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->remainSize);
        self::assertNotNull($resp->canceledSize);
        self::assertNotNull($resp->status);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByClientOid
    * Cancel Order By ClientOid
    * /api/v1/hf/orders/client-order/{clientOid}
    */
    public void testCancelOrderByClientOid() {
        CancelOrderByClientOidReq.CancelOrderByClientOidReqBuilder builder = CancelOrderByClientOidReq.builder();
        builder.clientOid(?).symbol(?);
        CancelOrderByClientOidReq req = builder.build();
        CancelOrderByClientOidResp resp = this.api.cancelOrderByClientOid(req);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByClientOidSync
    * Cancel Order By ClientOid Sync
    * /api/v1/hf/orders/sync/client-order/{clientOid}
    */
    public void testCancelOrderByClientOidSync() {
        CancelOrderByClientOidSyncReq.CancelOrderByClientOidSyncReqBuilder builder = CancelOrderByClientOidSyncReq.builder();
        builder.symbol(?).clientOid(?);
        CancelOrderByClientOidSyncReq req = builder.build();
        CancelOrderByClientOidSyncResp resp = this.api.cancelOrderByClientOidSync(req);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->originSize);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->remainSize);
        self::assertNotNull($resp->canceledSize);
        self::assertNotNull($resp->status);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelPartialOrder
    * Cancel Partial Order
    * /api/v1/hf/orders/cancel/{orderId}
    */
    public void testCancelPartialOrder() {
        CancelPartialOrderReq.CancelPartialOrderReqBuilder builder = CancelPartialOrderReq.builder();
        builder.orderId(?).symbol(?).cancelSize(?);
        CancelPartialOrderReq req = builder.build();
        CancelPartialOrderResp resp = this.api.cancelPartialOrder(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->cancelSize);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelAllOrdersBySymbol
    * Cancel All Orders By Symbol
    * /api/v1/hf/orders
    */
    public void testCancelAllOrdersBySymbol() {
        CancelAllOrdersBySymbolReq.CancelAllOrdersBySymbolReqBuilder builder = CancelAllOrdersBySymbolReq.builder();
        builder.symbol(?);
        CancelAllOrdersBySymbolReq req = builder.build();
        CancelAllOrdersBySymbolResp resp = this.api.cancelAllOrdersBySymbol(req);
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelAllOrders
    * Cancel All Orders
    * /api/v1/hf/orders/cancelAll
    */
    public void testCancelAllOrders() {
        CancelAllOrdersResp resp = this.api.cancelAllOrders();
        foreach($resp->succeedSymbols as $item) {
        }

        foreach($resp->failedSymbols as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->error);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * modifyOrder
    * Modify Order
    * /api/v1/hf/orders/alter
    */
    public void testModifyOrder() {
        ModifyOrderReq.ModifyOrderReqBuilder builder = ModifyOrderReq.builder();
        builder.clientOid(?).symbol(?).orderId(?).newPrice(?).newSize(?);
        ModifyOrderReq req = builder.build();
        ModifyOrderResp resp = this.api.modifyOrder(req);
        self::assertNotNull($resp->newOrderId);
        self::assertNotNull($resp->clientOid);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderByOrderId
    * Get Order By OrderId
    * /api/v1/hf/orders/{orderId}
    */
    public void testGetOrderByOrderId() {
        GetOrderByOrderIdReq.GetOrderByOrderIdReqBuilder builder = GetOrderByOrderIdReq.builder();
        builder.symbol(?).orderId(?);
        GetOrderByOrderIdReq req = builder.build();
        GetOrderByOrderIdResp resp = this.api.getOrderByOrderId(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->opType);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->funds);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->dealFunds);
        self::assertNotNull($resp->fee);
        self::assertNotNull($resp->feeCurrency);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->cancelAfter);
        self::assertNotNull($resp->channel);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->cancelExist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->lastUpdatedAt);
        self::assertNotNull($resp->tradeType);
        self::assertNotNull($resp->inOrderBook);
        self::assertNotNull($resp->cancelledSize);
        self::assertNotNull($resp->cancelledFunds);
        self::assertNotNull($resp->remainSize);
        self::assertNotNull($resp->remainFunds);
        self::assertNotNull($resp->tax);
        self::assertNotNull($resp->active);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderByClientOid
    * Get Order By ClientOid
    * /api/v1/hf/orders/client-order/{clientOid}
    */
    public void testGetOrderByClientOid() {
        GetOrderByClientOidReq.GetOrderByClientOidReqBuilder builder = GetOrderByClientOidReq.builder();
        builder.symbol(?).clientOid(?);
        GetOrderByClientOidReq req = builder.build();
        GetOrderByClientOidResp resp = this.api.getOrderByClientOid(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->opType);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->funds);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->dealFunds);
        self::assertNotNull($resp->fee);
        self::assertNotNull($resp->feeCurrency);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->cancelAfter);
        self::assertNotNull($resp->channel);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->cancelExist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->lastUpdatedAt);
        self::assertNotNull($resp->tradeType);
        self::assertNotNull($resp->inOrderBook);
        self::assertNotNull($resp->cancelledSize);
        self::assertNotNull($resp->cancelledFunds);
        self::assertNotNull($resp->remainSize);
        self::assertNotNull($resp->remainFunds);
        self::assertNotNull($resp->tax);
        self::assertNotNull($resp->active);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSymbolsWithOpenOrder
    * Get Symbols With Open Order
    * /api/v1/hf/orders/active/symbols
    */
    public void testGetSymbolsWithOpenOrder() {
        GetSymbolsWithOpenOrderResp resp = this.api.getSymbolsWithOpenOrder();
        foreach($resp->symbols as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOpenOrders
    * Get Open Orders
    * /api/v1/hf/orders/active
    */
    public void testGetOpenOrders() {
        GetOpenOrdersReq.GetOpenOrdersReqBuilder builder = GetOpenOrdersReq.builder();
        builder.symbol(?);
        GetOpenOrdersReq req = builder.build();
        GetOpenOrdersResp resp = this.api.getOpenOrders(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->opType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->dealFunds);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->lastUpdatedAt);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->inOrderBook);
            self::assertNotNull($item->cancelledSize);
            self::assertNotNull($item->cancelledFunds);
            self::assertNotNull($item->remainSize);
            self::assertNotNull($item->remainFunds);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->active);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOpenOrdersByPage
    * Get Open Orders By Page
    * /api/v1/hf/orders/active/page
    */
    public void testGetOpenOrdersByPage() {
        GetOpenOrdersByPageReq.GetOpenOrdersByPageReqBuilder builder = GetOpenOrdersByPageReq.builder();
        builder.symbol(?).pageNum(?).pageSize(?);
        GetOpenOrdersByPageReq req = builder.build();
        GetOpenOrdersByPageResp resp = this.api.getOpenOrdersByPage(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->opType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->dealFunds);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->lastUpdatedAt);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->inOrderBook);
            self::assertNotNull($item->cancelledSize);
            self::assertNotNull($item->cancelledFunds);
            self::assertNotNull($item->remainSize);
            self::assertNotNull($item->remainFunds);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->active);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getClosedOrders
    * Get Closed Orders
    * /api/v1/hf/orders/done
    */
    public void testGetClosedOrders() {
        GetClosedOrdersReq.GetClosedOrdersReqBuilder builder = GetClosedOrdersReq.builder();
        builder.symbol(?).side(?).type(?).lastId(?).limit(?).startAt(?).endAt(?);
        GetClosedOrdersReq req = builder.build();
        GetClosedOrdersResp resp = this.api.getClosedOrders(req);
        self::assertNotNull($resp->lastId);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->opType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->dealFunds);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->lastUpdatedAt);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->inOrderBook);
            self::assertNotNull($item->cancelledSize);
            self::assertNotNull($item->cancelledFunds);
            self::assertNotNull($item->remainSize);
            self::assertNotNull($item->remainFunds);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->active);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getTradeHistory
    * Get Trade History
    * /api/v1/hf/fills
    */
    public void testGetTradeHistory() {
        GetTradeHistoryReq.GetTradeHistoryReqBuilder builder = GetTradeHistoryReq.builder();
        builder.symbol(?).orderId(?).side(?).type(?).lastId(?).limit(?).startAt(?).endAt(?);
        GetTradeHistoryReq req = builder.build();
        GetTradeHistoryResp resp = this.api.getTradeHistory(req);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->tradeId);
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->counterOrderId);
            self::assertNotNull($item->side);
            self::assertNotNull($item->liquidity);
            self::assertNotNull($item->forceTaker);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeRate);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->taxRate);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->type);
            self::assertNotNull($item->createdAt);
        }

        self::assertNotNull($resp->lastId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getDCP
    * Get DCP
    * /api/v1/hf/orders/dead-cancel-all/query
    */
    public void testGetDCP() {
        GetDCPResp resp = this.api.getDCP();
        self::assertNotNull($resp->timeout);
        self::assertNotNull($resp->symbols);
        self::assertNotNull($resp->currentTime);
        self::assertNotNull($resp->triggerTime);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * setDCP
    * Set DCP
    * /api/v1/hf/orders/dead-cancel-all
    */
    public void testSetDCP() {
        SetDCPReq.SetDCPReqBuilder builder = SetDCPReq.builder();
        builder.timeout(?).symbols(?);
        SetDCPReq req = builder.build();
        SetDCPResp resp = this.api.setDCP(req);
        self::assertNotNull($resp->currentTime);
        self::assertNotNull($resp->triggerTime);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addStopOrder
    * Add Stop Order
    * /api/v1/stop-order
    */
    public void testAddStopOrder() {
        AddStopOrderReq.AddStopOrderReqBuilder builder = AddStopOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).cancelAfter(?).funds(?).stopPrice(?).tradeType(?);
        AddStopOrderReq req = builder.build();
        AddStopOrderResp resp = this.api.addStopOrder(req);
        self::assertNotNull($resp->orderId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelStopOrderByClientOid
    * Cancel Stop Order By ClientOid
    * /api/v1/stop-order/cancelOrderByClientOid
    */
    public void testCancelStopOrderByClientOid() {
        CancelStopOrderByClientOidReq.CancelStopOrderByClientOidReqBuilder builder = CancelStopOrderByClientOidReq.builder();
        builder.symbol(?).clientOid(?);
        CancelStopOrderByClientOidReq req = builder.build();
        CancelStopOrderByClientOidResp resp = this.api.cancelStopOrderByClientOid(req);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->cancelledOrderId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelStopOrderByOrderId
    * Cancel Stop Order By OrderId
    * /api/v1/stop-order/{orderId}
    */
    public void testCancelStopOrderByOrderId() {
        CancelStopOrderByOrderIdReq.CancelStopOrderByOrderIdReqBuilder builder = CancelStopOrderByOrderIdReq.builder();
        builder.orderId(?);
        CancelStopOrderByOrderIdReq req = builder.build();
        CancelStopOrderByOrderIdResp resp = this.api.cancelStopOrderByOrderId(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchCancelStopOrder
    * Batch Cancel Stop Orders
    * /api/v1/stop-order/cancel
    */
    public void testBatchCancelStopOrder() {
        BatchCancelStopOrderReq.BatchCancelStopOrderReqBuilder builder = BatchCancelStopOrderReq.builder();
        builder.symbol(?).tradeType(?).orderIds(?);
        BatchCancelStopOrderReq req = builder.build();
        BatchCancelStopOrderResp resp = this.api.batchCancelStopOrder(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getStopOrdersList
    * Get Stop Orders List
    * /api/v1/stop-order
    */
    public void testGetStopOrdersList() {
        GetStopOrdersListReq.GetStopOrdersListReqBuilder builder = GetStopOrdersListReq.builder();
        builder.symbol(?).side(?).type(?).tradeType(?).startAt(?).endAt(?).currentPage(?).orderIds(?).pageSize(?).stop(?);
        GetStopOrdersListReq req = builder.build();
        GetStopOrdersListResp resp = this.api.getStopOrdersList(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->userId);
            self::assertNotNull($item->status);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->orderTime);
            self::assertNotNull($item->domainId);
            self::assertNotNull($item->tradeSource);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->takerFeeRate);
            self::assertNotNull($item->makerFeeRate);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopTriggerTime);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->relatedNo);
            self::assertNotNull($item->limitPrice);
            self::assertNotNull($item->pop);
            self::assertNotNull($item->activateCondition);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getStopOrderByOrderId
    * Get Stop Order By OrderId
    * /api/v1/stop-order/{orderId}
    */
    public void testGetStopOrderByOrderId() {
        GetStopOrderByOrderIdReq.GetStopOrderByOrderIdReqBuilder builder = GetStopOrderByOrderIdReq.builder();
        builder.orderId(?);
        GetStopOrderByOrderIdReq req = builder.build();
        GetStopOrderByOrderIdResp resp = this.api.getStopOrderByOrderId(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->userId);
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->funds);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->cancelAfter);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->channel);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->domainId);
        self::assertNotNull($resp->tradeSource);
        self::assertNotNull($resp->tradeType);
        self::assertNotNull($resp->feeCurrency);
        self::assertNotNull($resp->takerFeeRate);
        self::assertNotNull($resp->makerFeeRate);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->stop);
        self::assertNotNull($resp->stopTriggerTime);
        self::assertNotNull($resp->stopPrice);
        self::assertNotNull($resp->orderTime);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getStopOrderByClientOid
    * Get Stop Order By ClientOid
    * /api/v1/stop-order/queryOrderByClientOid
    */
    public void testGetStopOrderByClientOid() {
        GetStopOrderByClientOidReq.GetStopOrderByClientOidReqBuilder builder = GetStopOrderByClientOidReq.builder();
        builder.clientOid(?).symbol(?);
        GetStopOrderByClientOidReq req = builder.build();
        GetStopOrderByClientOidResp resp = this.api.getStopOrderByClientOid(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->userId);
            self::assertNotNull($item->status);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->domainId);
            self::assertNotNull($item->tradeSource);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->takerFeeRate);
            self::assertNotNull($item->makerFeeRate);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopTriggerTime);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->orderTime);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addOcoOrder
    * Add OCO Order
    * /api/v3/oco/order
    */
    public void testAddOcoOrder() {
        AddOcoOrderReq.AddOcoOrderReqBuilder builder = AddOcoOrderReq.builder();
        builder.clientOid(?).side(?).symbol(?).remark(?).price(?).size(?).stopPrice(?).limitPrice(?).tradeType(?);
        AddOcoOrderReq req = builder.build();
        AddOcoOrderResp resp = this.api.addOcoOrder(req);
        self::assertNotNull($resp->orderId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOcoOrderByOrderId
    * Cancel OCO Order By OrderId
    * /api/v3/oco/order/{orderId}
    */
    public void testCancelOcoOrderByOrderId() {
        CancelOcoOrderByOrderIdReq.CancelOcoOrderByOrderIdReqBuilder builder = CancelOcoOrderByOrderIdReq.builder();
        builder.orderId(?);
        CancelOcoOrderByOrderIdReq req = builder.build();
        CancelOcoOrderByOrderIdResp resp = this.api.cancelOcoOrderByOrderId(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOcoOrderByClientOid
    * Cancel OCO Order By ClientOid
    * /api/v3/oco/client-order/{clientOid}
    */
    public void testCancelOcoOrderByClientOid() {
        CancelOcoOrderByClientOidReq.CancelOcoOrderByClientOidReqBuilder builder = CancelOcoOrderByClientOidReq.builder();
        builder.clientOid(?);
        CancelOcoOrderByClientOidReq req = builder.build();
        CancelOcoOrderByClientOidResp resp = this.api.cancelOcoOrderByClientOid(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchCancelOcoOrders
    * Batch Cancel OCO Order
    * /api/v3/oco/orders
    */
    public void testBatchCancelOcoOrders() {
        BatchCancelOcoOrdersReq.BatchCancelOcoOrdersReqBuilder builder = BatchCancelOcoOrdersReq.builder();
        builder.orderIds(?).symbol(?);
        BatchCancelOcoOrdersReq req = builder.build();
        BatchCancelOcoOrdersResp resp = this.api.batchCancelOcoOrders(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOcoOrderByOrderId
    * Get OCO Order By OrderId
    * /api/v3/oco/order/{orderId}
    */
    public void testGetOcoOrderByOrderId() {
        GetOcoOrderByOrderIdReq.GetOcoOrderByOrderIdReqBuilder builder = GetOcoOrderByOrderIdReq.builder();
        builder.orderId(?);
        GetOcoOrderByOrderIdReq req = builder.build();
        GetOcoOrderByOrderIdResp resp = this.api.getOcoOrderByOrderId(req);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->orderTime);
        self::assertNotNull($resp->status);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOcoOrderByClientOid
    * Get OCO Order By ClientOid
    * /api/v3/oco/client-order/{clientOid}
    */
    public void testGetOcoOrderByClientOid() {
        GetOcoOrderByClientOidReq.GetOcoOrderByClientOidReqBuilder builder = GetOcoOrderByClientOidReq.builder();
        builder.clientOid(?);
        GetOcoOrderByClientOidReq req = builder.build();
        GetOcoOrderByClientOidResp resp = this.api.getOcoOrderByClientOid(req);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->orderTime);
        self::assertNotNull($resp->status);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOcoOrderDetailByOrderId
    * Get OCO Order Detail By OrderId
    * /api/v3/oco/order/details/{orderId}
    */
    public void testGetOcoOrderDetailByOrderId() {
        GetOcoOrderDetailByOrderIdReq.GetOcoOrderDetailByOrderIdReqBuilder builder = GetOcoOrderDetailByOrderIdReq.builder();
        builder.orderId(?);
        GetOcoOrderDetailByOrderIdReq req = builder.build();
        GetOcoOrderDetailByOrderIdResp resp = this.api.getOcoOrderDetailByOrderId(req);
        self::assertNotNull($resp->orderId);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->orderTime);
        self::assertNotNull($resp->status);
        foreach($resp->orders as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->size);
            self::assertNotNull($item->status);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOcoOrderList
    * Get OCO Order List
    * /api/v3/oco/orders
    */
    public void testGetOcoOrderList() {
        GetOcoOrderListReq.GetOcoOrderListReqBuilder builder = GetOcoOrderListReq.builder();
        builder.symbol(?).startAt(?).endAt(?).orderIds(?).pageSize(?).currentPage(?);
        GetOcoOrderListReq req = builder.build();
        GetOcoOrderListResp resp = this.api.getOcoOrderList(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->orderTime);
            self::assertNotNull($item->status);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addOrderOld
    * Add Order - Old
    * /api/v1/orders
    */
    public void testAddOrderOld() {
        AddOrderOldReq.AddOrderOldReqBuilder builder = AddOrderOldReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).cancelAfter(?).funds(?).tradeType(?);
        AddOrderOldReq req = builder.build();
        AddOrderOldResp resp = this.api.addOrderOld(req);
        self::assertNotNull($resp->orderId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addOrderTestOld
    * Add Order Test - Old
    * /api/v1/orders/test
    */
    public void testAddOrderTestOld() {
        AddOrderTestOldReq.AddOrderTestOldReqBuilder builder = AddOrderTestOldReq.builder();
        builder.clientOid(?).side(?).symbol(?).type(?).remark(?).stp(?).price(?).size(?).timeInForce(?).postOnly(?).hidden(?).iceberg(?).visibleSize(?).cancelAfter(?).funds(?).tradeType(?);
        AddOrderTestOldReq req = builder.build();
        AddOrderTestOldResp resp = this.api.addOrderTestOld(req);
        self::assertNotNull($resp->orderId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchAddOrdersOld
    * Batch Add Orders - Old
    * /api/v1/orders/multi
    */
    public void testBatchAddOrdersOld() {
        BatchAddOrdersOldReq.BatchAddOrdersOldReqBuilder builder = BatchAddOrdersOldReq.builder();
        builder.orderList(?).symbol(?);
        BatchAddOrdersOldReq req = builder.build();
        BatchAddOrdersOldResp resp = this.api.batchAddOrdersOld(req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberge);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->id);
            self::assertNotNull($item->status);
            self::assertNotNull($item->failMsg);
            self::assertNotNull($item->clientOid);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByOrderIdOld
    * Cancel Order By OrderId - Old
    * /api/v1/orders/{orderId}
    */
    public void testCancelOrderByOrderIdOld() {
        CancelOrderByOrderIdOldReq.CancelOrderByOrderIdOldReqBuilder builder = CancelOrderByOrderIdOldReq.builder();
        builder.orderId(?);
        CancelOrderByOrderIdOldReq req = builder.build();
        CancelOrderByOrderIdOldResp resp = this.api.cancelOrderByOrderIdOld(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelOrderByClientOidOld
    * Cancel Order By ClientOid - Old
    * /api/v1/order/client-order/{clientOid}
    */
    public void testCancelOrderByClientOidOld() {
        CancelOrderByClientOidOldReq.CancelOrderByClientOidOldReqBuilder builder = CancelOrderByClientOidOldReq.builder();
        builder.clientOid(?);
        CancelOrderByClientOidOldReq req = builder.build();
        CancelOrderByClientOidOldResp resp = this.api.cancelOrderByClientOidOld(req);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->cancelledOrderId);
        foreach($resp->cancelledOcoOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * batchCancelOrderOld
    * Batch Cancel Order - Old
    * /api/v1/orders
    */
    public void testBatchCancelOrderOld() {
        BatchCancelOrderOldReq.BatchCancelOrderOldReqBuilder builder = BatchCancelOrderOldReq.builder();
        builder.symbol(?).tradeType(?);
        BatchCancelOrderOldReq req = builder.build();
        BatchCancelOrderOldResp resp = this.api.batchCancelOrderOld(req);
        foreach($resp->cancelledOrderIds as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrdersListOld
    * Get Orders List - Old
    * /api/v1/orders
    */
    public void testGetOrdersListOld() {
        GetOrdersListOldReq.GetOrdersListOldReqBuilder builder = GetOrdersListOldReq.builder();
        builder.symbol(?).status(?).side(?).type(?).tradeType(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetOrdersListOldReq req = builder.build();
        GetOrdersListOldResp resp = this.api.getOrdersListOld(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->opType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->dealFunds);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopTriggered);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->isActive);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->taxRate);
            self::assertNotNull($item->taxCurrency);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getRecentOrdersListOld
    * Get Recent Orders List - Old
    * /api/v1/limit/orders
    */
    public void testGetRecentOrdersListOld() {
        GetRecentOrdersListOldResp resp = this.api.getRecentOrdersListOld();
        foreach($resp->data as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->opType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->side);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->dealFunds);
            self::assertNotNull($item->dealSize);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stp);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->stopTriggered);
            self::assertNotNull($item->stopPrice);
            self::assertNotNull($item->timeInForce);
            self::assertNotNull($item->postOnly);
            self::assertNotNull($item->hidden);
            self::assertNotNull($item->iceberg);
            self::assertNotNull($item->visibleSize);
            self::assertNotNull($item->cancelAfter);
            self::assertNotNull($item->channel);
            self::assertNotNull($item->clientOid);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->tags);
            self::assertNotNull($item->isActive);
            self::assertNotNull($item->cancelExist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->taxRate);
            self::assertNotNull($item->taxCurrency);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderByOrderIdOld
    * Get Order By OrderId - Old
    * /api/v1/orders/{orderId}
    */
    public void testGetOrderByOrderIdOld() {
        GetOrderByOrderIdOldReq.GetOrderByOrderIdOldReqBuilder builder = GetOrderByOrderIdOldReq.builder();
        builder.orderId(?);
        GetOrderByOrderIdOldReq req = builder.build();
        GetOrderByOrderIdOldResp resp = this.api.getOrderByOrderIdOld(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->opType);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->funds);
        self::assertNotNull($resp->dealFunds);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->fee);
        self::assertNotNull($resp->feeCurrency);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->stop);
        self::assertNotNull($resp->stopTriggered);
        self::assertNotNull($resp->stopPrice);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->cancelAfter);
        self::assertNotNull($resp->channel);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->isActive);
        self::assertNotNull($resp->cancelExist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->tradeType);
        self::assertNotNull($resp->tax);
        self::assertNotNull($resp->taxRate);
        self::assertNotNull($resp->taxCurrency);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getOrderByClientOidOld
    * Get Order By ClientOid - Old
    * /api/v1/order/client-order/{clientOid}
    */
    public void testGetOrderByClientOidOld() {
        GetOrderByClientOidOldReq.GetOrderByClientOidOldReqBuilder builder = GetOrderByClientOidOldReq.builder();
        builder.clientOid(?);
        GetOrderByClientOidOldReq req = builder.build();
        GetOrderByClientOidOldResp resp = this.api.getOrderByClientOidOld(req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->opType);
        self::assertNotNull($resp->type);
        self::assertNotNull($resp->side);
        self::assertNotNull($resp->price);
        self::assertNotNull($resp->size);
        self::assertNotNull($resp->funds);
        self::assertNotNull($resp->dealFunds);
        self::assertNotNull($resp->dealSize);
        self::assertNotNull($resp->fee);
        self::assertNotNull($resp->feeCurrency);
        self::assertNotNull($resp->stp);
        self::assertNotNull($resp->stop);
        self::assertNotNull($resp->stopTriggered);
        self::assertNotNull($resp->stopPrice);
        self::assertNotNull($resp->timeInForce);
        self::assertNotNull($resp->postOnly);
        self::assertNotNull($resp->hidden);
        self::assertNotNull($resp->iceberg);
        self::assertNotNull($resp->visibleSize);
        self::assertNotNull($resp->cancelAfter);
        self::assertNotNull($resp->channel);
        self::assertNotNull($resp->clientOid);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->tags);
        self::assertNotNull($resp->isActive);
        self::assertNotNull($resp->cancelExist);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->tradeType);
        self::assertNotNull($resp->tax);
        self::assertNotNull($resp->taxRate);
        self::assertNotNull($resp->taxCurrency);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getTradeHistoryOld
    * Get Trade History - Old
    * /api/v1/fills
    */
    public void testGetTradeHistoryOld() {
        GetTradeHistoryOldReq.GetTradeHistoryOldReqBuilder builder = GetTradeHistoryOldReq.builder();
        builder.symbol(?).orderId(?).side(?).type(?).tradeType(?).startAt(?).endAt(?).currentPage(?).pageSize(?);
        GetTradeHistoryOldReq req = builder.build();
        GetTradeHistoryOldResp resp = this.api.getTradeHistoryOld(req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->tradeId);
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->counterOrderId);
            self::assertNotNull($item->side);
            self::assertNotNull($item->liquidity);
            self::assertNotNull($item->forceTaker);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeRate);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->createdAt);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getRecentTradeHistoryOld
    * Get Recent Trade History - Old
    * /api/v1/limit/fills
    */
    public void testGetRecentTradeHistoryOld() {
        GetRecentTradeHistoryOldResp resp = this.api.getRecentTradeHistoryOld();
        foreach($resp->data as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->tradeId);
            self::assertNotNull($item->orderId);
            self::assertNotNull($item->counterOrderId);
            self::assertNotNull($item->side);
            self::assertNotNull($item->liquidity);
            self::assertNotNull($item->forceTaker);
            self::assertNotNull($item->price);
            self::assertNotNull($item->size);
            self::assertNotNull($item->funds);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->feeRate);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->stop);
            self::assertNotNull($item->tradeType);
            self::assertNotNull($item->type);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->tax);
            self::assertNotNull($item->taxCurrency);
            self::assertNotNull($item->taxRate);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

