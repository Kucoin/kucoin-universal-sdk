package com.kucoin.universal.sdk.generate.margin.credit;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class CreditApiAutoGeneratedTest {
  public static ObjectMapper mapper = new ObjectMapper();

  private static final List<String> failedTests = new ArrayList<>();

  private static int totalTest = 0;

  /** getLoanMarket Request Get Loan Market /api/v3/project/list */
  public static void testGetLoanMarketRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetLoanMarketReq obj = mapper.readValue(data, GetLoanMarketReq.class);
  }

  /** getLoanMarket Response Get Loan Market /api/v3/project/list */
  public static void testGetLoanMarketResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"currency\": \"BTC\",\n"
            + "            \"purchaseEnable\": true,\n"
            + "            \"redeemEnable\": true,\n"
            + "            \"increment\": \"0.00000001\",\n"
            + "            \"minPurchaseSize\": \"0.001\",\n"
            + "            \"maxPurchaseSize\": \"40\",\n"
            + "            \"interestIncrement\": \"0.0001\",\n"
            + "            \"minInterestRate\": \"0.005\",\n"
            + "            \"marketInterestRate\": \"0.005\",\n"
            + "            \"maxInterestRate\": \"0.32\",\n"
            + "            \"autoPurchaseEnable\": false\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetLoanMarketResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetLoanMarketResp>>() {});
  }

  /**
   * getLoanMarketInterestRate Request Get Loan Market Interest Rate
   * /api/v3/project/marketInterestRate
   */
  public static void testGetLoanMarketInterestRateRequest() throws Exception {
    String data = "{\"currency\": \"BTC\"}";
    GetLoanMarketInterestRateReq obj = mapper.readValue(data, GetLoanMarketInterestRateReq.class);
  }

  /**
   * getLoanMarketInterestRate Response Get Loan Market Interest Rate
   * /api/v3/project/marketInterestRate
   */
  public static void testGetLoanMarketInterestRateResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": [\n"
            + "        {\n"
            + "            \"time\": \"202410170000\",\n"
            + "            \"marketInterestRate\": \"0.005\"\n"
            + "        },\n"
            + "        {\n"
            + "            \"time\": \"202410170100\",\n"
            + "            \"marketInterestRate\": \"0.005\"\n"
            + "        }\n"
            + "    ]\n"
            + "}";
    RestResponse<GetLoanMarketInterestRateResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetLoanMarketInterestRateResp>>() {});
  }

  /** purchase Request Purchase /api/v3/purchase */
  public static void testPurchaseRequest() throws Exception {
    String data = "{\"currency\": \"BTC\", \"size\": \"0.001\", \"interestRate\": \"0.1\"}";
    PurchaseReq obj = mapper.readValue(data, PurchaseReq.class);
  }

  /** purchase Response Purchase /api/v3/purchase */
  public static void testPurchaseResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderNo\": \"671bafa804c26d000773c533\"\n"
            + "    }\n"
            + "}";
    RestResponse<PurchaseResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<PurchaseResp>>() {});
  }

  /** modifyPurchase Request Modify Purchase /api/v3/lend/purchase/update */
  public static void testModifyPurchaseRequest() throws Exception {
    String data =
        "{\"currency\": \"BTC\", \"purchaseOrderNo\": \"671bafa804c26d000773c533\","
            + " \"interestRate\": \"0.09\"}";
    ModifyPurchaseReq obj = mapper.readValue(data, ModifyPurchaseReq.class);
  }

  /** modifyPurchase Response Modify Purchase /api/v3/lend/purchase/update */
  public static void testModifyPurchaseResponse() throws Exception {
    String data = "{\n    \"code\": \"200000\",\n    \"data\": null\n}";
    RestResponse<ModifyPurchaseResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<ModifyPurchaseResp>>() {});
  }

  /** getPurchaseOrders Request Get Purchase Orders /api/v3/purchase/orders */
  public static void testGetPurchaseOrdersRequest() throws Exception {
    String data =
        "{\"status\": \"DONE\", \"currency\": \"BTC\", \"purchaseOrderNo\":"
            + " \"example_string_default_value\", \"currentPage\": 1, \"pageSize\": 50}";
    GetPurchaseOrdersReq obj = mapper.readValue(data, GetPurchaseOrdersReq.class);
  }

  /** getPurchaseOrders Response Get Purchase Orders /api/v3/purchase/orders */
  public static void testGetPurchaseOrdersResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 10,\n"
            + "        \"totalNum\": 1,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"currency\": \"BTC\",\n"
            + "                \"purchaseOrderNo\": \"671bb15a3b3f930007880bae\",\n"
            + "                \"purchaseSize\": \"0.001\",\n"
            + "                \"matchSize\": \"0\",\n"
            + "                \"interestRate\": \"0.1\",\n"
            + "                \"incomeSize\": \"0\",\n"
            + "                \"applyTime\": 1729868122172,\n"
            + "                \"status\": \"PENDING\"\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetPurchaseOrdersResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetPurchaseOrdersResp>>() {});
  }

  /** redeem Request Redeem /api/v3/redeem */
  public static void testRedeemRequest() throws Exception {
    String data =
        "{\"currency\": \"BTC\", \"size\": \"0.001\", \"purchaseOrderNo\":"
            + " \"671bafa804c26d000773c533\"}";
    RedeemReq obj = mapper.readValue(data, RedeemReq.class);
  }

  /** redeem Response Redeem /api/v3/redeem */
  public static void testRedeemResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"orderNo\": \"671bafa804c26d000773c533\"\n"
            + "    }\n"
            + "}";
    RestResponse<RedeemResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<RedeemResp>>() {});
  }

  /** getRedeemOrders Request Get Redeem Orders /api/v3/redeem/orders */
  public static void testGetRedeemOrdersRequest() throws Exception {
    String data =
        "{\"status\": \"DONE\", \"currency\": \"BTC\", \"redeemOrderNo\":"
            + " \"example_string_default_value\", \"currentPage\": 1, \"pageSize\": 50}";
    GetRedeemOrdersReq obj = mapper.readValue(data, GetRedeemOrdersReq.class);
  }

  /** getRedeemOrders Response Get Redeem Orders /api/v3/redeem/orders */
  public static void testGetRedeemOrdersResponse() throws Exception {
    String data =
        "{\n"
            + "    \"code\": \"200000\",\n"
            + "    \"data\": {\n"
            + "        \"currentPage\": 1,\n"
            + "        \"pageSize\": 10,\n"
            + "        \"totalNum\": 1,\n"
            + "        \"totalPage\": 1,\n"
            + "        \"items\": [\n"
            + "            {\n"
            + "                \"currency\": \"BTC\",\n"
            + "                \"purchaseOrderNo\": \"671bafa804c26d000773c533\",\n"
            + "                \"redeemOrderNo\": \"671bb01004c26d000773c55c\",\n"
            + "                \"redeemSize\": \"0.001\",\n"
            + "                \"receiptSize\": \"0.001\",\n"
            + "                \"applyTime\": null,\n"
            + "                \"status\": \"DONE\"\n"
            + "            }\n"
            + "        ]\n"
            + "    }\n"
            + "}";
    RestResponse<GetRedeemOrdersResp> resp =
        mapper.readValue(data, new TypeReference<RestResponse<GetRedeemOrdersResp>>() {});
  }

  public static void runAllTests() {
    run(CreditApiAutoGeneratedTest::testGetLoanMarketRequest, "testGetLoanMarketRequest");
    run(CreditApiAutoGeneratedTest::testGetLoanMarketResponse, "testGetLoanMarketResponse");
    run(
        CreditApiAutoGeneratedTest::testGetLoanMarketInterestRateRequest,
        "testGetLoanMarketInterestRateRequest");
    run(
        CreditApiAutoGeneratedTest::testGetLoanMarketInterestRateResponse,
        "testGetLoanMarketInterestRateResponse");
    run(CreditApiAutoGeneratedTest::testPurchaseRequest, "testPurchaseRequest");
    run(CreditApiAutoGeneratedTest::testPurchaseResponse, "testPurchaseResponse");
    run(CreditApiAutoGeneratedTest::testModifyPurchaseRequest, "testModifyPurchaseRequest");
    run(CreditApiAutoGeneratedTest::testModifyPurchaseResponse, "testModifyPurchaseResponse");
    run(CreditApiAutoGeneratedTest::testGetPurchaseOrdersRequest, "testGetPurchaseOrdersRequest");
    run(CreditApiAutoGeneratedTest::testGetPurchaseOrdersResponse, "testGetPurchaseOrdersResponse");
    run(CreditApiAutoGeneratedTest::testRedeemRequest, "testRedeemRequest");
    run(CreditApiAutoGeneratedTest::testRedeemResponse, "testRedeemResponse");
    run(CreditApiAutoGeneratedTest::testGetRedeemOrdersRequest, "testGetRedeemOrdersRequest");
    run(CreditApiAutoGeneratedTest::testGetRedeemOrdersResponse, "testGetRedeemOrdersResponse");
  }

  private static void run(TestCase test, String name) {
    System.out.println("Running test: " + name);
    totalTest++;
    try {
      test.execute();
      System.out.println("PASSED: " + name);
    } catch (Exception e) {
      System.err.println("FAILED: " + name + " - " + e.getMessage());
      e.printStackTrace(System.err);
      failedTests.add(name);
    }
  }

  @FunctionalInterface
  interface TestCase {
    void execute() throws Exception;
  }

  public static void main(String[] args) {
    runAllTests();
    finish();
  }

  public static void finish() {
    System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
    if (!failedTests.isEmpty()) {
      System.err.println("\n=== TEST SUMMARY ===");
      System.err.println("Failed tests:");
      for (String name : failedTests) {
        System.err.println(" - " + name);
      }
      System.exit(1);
    } else {
      System.out.println("\nAll tests passed.");
    }
  }
}
