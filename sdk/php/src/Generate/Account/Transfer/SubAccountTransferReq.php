<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Transfer;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class SubAccountTransferReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * OUT — the master user to sub user IN — the sub user to the master user
     * - 'IN' :
     * - 'OUT' :
     * @var string $direction
     * @Type("string")
     * @SerializedName("direction")
     */
    public $direction;
    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
     * - 'MAIN' : Funding account
     * - 'TRADE' : Spot account
     * - 'MARGIN' : Margin account
     * - 'CONTRACT' : Futures account
     * - 'OPTION' : Option account
     * @var string|null $accountType
     * @Type("string")
     * @SerializedName("accountType")
     */
    public $accountType = "MAIN";
    /**
     * Sub-account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
     * - 'MAIN' :
     * - 'TRADE' :
     * - 'MARGIN' :
     * - 'CONTRACT' :
     * @var string|null $subAccountType
     * @Type("string")
     * @SerializedName("subAccountType")
     */
    public $subAccountType = "MAIN";
    /**
     * the user ID of a sub-account.
     * @var string|null $subUserId
     * @Type("string")
     * @SerializedName("subUserId")
     */
    public $subUserId;
    /**
     * Need to be defined if accountType=ISOLATED.
     * @var string|null $tag
     * @Type("string")
     * @SerializedName("tag")
     */
    public $tag;
    /**
     * Need to be defined if subAccountType=ISOLATED.
     * @var string $subTag
     * @Type("string")
     * @SerializedName("subTag")
     */
    public $subTag;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            SubAccountTransferReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `SubAccountTransferReq` class.
     * The builder pattern allows step-by-step construction of a `SubAccountTransferReq` object.
     * @return SubAccountTransferReqBuilder
     */
    public static function builder()
    {
        return new SubAccountTransferReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `SubAccountTransferReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class SubAccountTransferReqBuilder
{
    /**
     * @var SubAccountTransferReq $obj
     */
    private $obj;

    public function __construct(SubAccountTransferReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * currency
     * @param string $value
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     * @param string $value
     * @return self
     */
    public function setAmount($value)
    {
        $this->obj->amount = $value;
        return $this;
    }

    /**
     * OUT — the master user to sub user IN — the sub user to the master user
     * - 'IN' :
     * - 'OUT' :
     * @param string $value
     * @return self
     */
    public function setDirection($value)
    {
        $this->obj->direction = $value;
        return $this;
    }

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
     * - 'MAIN' : Funding account
     * - 'TRADE' : Spot account
     * - 'MARGIN' : Margin account
     * - 'CONTRACT' : Futures account
     * - 'OPTION' : Option account
     * @param string $value
     * @return self
     */
    public function setAccountType($value)
    {
        $this->obj->accountType = $value;
        return $this;
    }

    /**
     * Sub-account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
     * - 'MAIN' :
     * - 'TRADE' :
     * - 'MARGIN' :
     * - 'CONTRACT' :
     * @param string $value
     * @return self
     */
    public function setSubAccountType($value)
    {
        $this->obj->subAccountType = $value;
        return $this;
    }

    /**
     * the user ID of a sub-account.
     * @param string $value
     * @return self
     */
    public function setSubUserId($value)
    {
        $this->obj->subUserId = $value;
        return $this;
    }

    /**
     * Need to be defined if accountType=ISOLATED.
     * @param string $value
     * @return self
     */
    public function setTag($value)
    {
        $this->obj->tag = $value;
        return $this;
    }

    /**
     * Need to be defined if subAccountType=ISOLATED.
     * @param string $value
     * @return self
     */
    public function setSubTag($value)
    {
        $this->obj->subTag = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return SubAccountTransferReq
     */
    public function build()
    {
        return $this->obj;
    }
}
