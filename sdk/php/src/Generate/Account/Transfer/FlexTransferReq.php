<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Transfer;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class FlexTransferReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Transfer out UserId: This is required when transferring from sub-account to master-account. It is optional for internal transfers.
     * @var string|null $fromUserId
     * @Type("string")
     * @SerializedName("fromUserId")
     */
    public $fromUserId;
    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     * - 'MAIN' : Funding account
     * - 'TRADE' : Spot account
     * - 'CONTRACT' : Futures account
     * - 'MARGIN' : Cross margin account
     * - 'ISOLATED' : Isolated margin account
     * - 'MARGIN_V2' : Cross margin account
     * - 'ISOLATED_V2' : Isolated margin account
     * - 'OPTION' : Option account
     * @var string $fromAccountType
     * @Type("string")
     * @SerializedName("fromAccountType")
     */
    public $fromAccountType;
    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     * @var string|null $fromAccountTag
     * @Type("string")
     * @SerializedName("fromAccountTag")
     */
    public $fromAccountTag;
    /**
     * Transfer type: INTERNAL (Transfer within account), PARENT_TO_SUB (Transfer from master-account to sub-account), SUB_TO_PARENT (Transfer from sub-account to master-account)
     * - 'INTERNAL' :
     * - 'PARENT_TO_SUB' :
     * - 'SUB_TO_PARENT' :
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * Transfer in UserId: This is required when transferring master-account to sub-account. It is optional for internal transfers.
     * @var string|null $toUserId
     * @Type("string")
     * @SerializedName("toUserId")
     */
    public $toUserId;
    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     * - 'MAIN' : Funding account
     * - 'TRADE' : Spot account
     * - 'CONTRACT' : Futures account
     * - 'MARGIN' : Cross margin account
     * - 'ISOLATED' : Isolated margin account
     * - 'MARGIN_V2' : Cross margin account
     * - 'ISOLATED_V2' : Isolated margin account
     * - 'OPTION' : Option account
     * @var string $toAccountType
     * @Type("string")
     * @SerializedName("toAccountType")
     */
    public $toAccountType;
    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     * @var string|null $toAccountTag
     * @Type("string")
     * @SerializedName("toAccountTag")
     */
    public $toAccountTag;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, FlexTransferReq::class, "json");
    }
    /**
     * Creates a new instance of the `FlexTransferReq` class.
     * The builder pattern allows step-by-step construction of a `FlexTransferReq` object.
     * @return FlexTransferReqBuilder
     */
    public static function builder()
    {
        return new FlexTransferReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `FlexTransferReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class FlexTransferReqBuilder
{
    /**
     * @var FlexTransferReq $obj
     */
    private $obj;

    public function __construct(FlexTransferReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * currency
     * @param string $value
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     * @param string $value
     * @return self
     */
    public function setAmount($value)
    {
        $this->obj->amount = $value;
        return $this;
    }

    /**
     * Transfer out UserId: This is required when transferring from sub-account to master-account. It is optional for internal transfers.
     * @param string $value
     * @return self
     */
    public function setFromUserId($value)
    {
        $this->obj->fromUserId = $value;
        return $this;
    }

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     * - 'MAIN' : Funding account
     * - 'TRADE' : Spot account
     * - 'CONTRACT' : Futures account
     * - 'MARGIN' : Cross margin account
     * - 'ISOLATED' : Isolated margin account
     * - 'MARGIN_V2' : Cross margin account
     * - 'ISOLATED_V2' : Isolated margin account
     * - 'OPTION' : Option account
     * @param string $value
     * @return self
     */
    public function setFromAccountType($value)
    {
        $this->obj->fromAccountType = $value;
        return $this;
    }

    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     * @param string $value
     * @return self
     */
    public function setFromAccountTag($value)
    {
        $this->obj->fromAccountTag = $value;
        return $this;
    }

    /**
     * Transfer type: INTERNAL (Transfer within account), PARENT_TO_SUB (Transfer from master-account to sub-account), SUB_TO_PARENT (Transfer from sub-account to master-account)
     * - 'INTERNAL' :
     * - 'PARENT_TO_SUB' :
     * - 'SUB_TO_PARENT' :
     * @param string $value
     * @return self
     */
    public function setType($value)
    {
        $this->obj->type = $value;
        return $this;
    }

    /**
     * Transfer in UserId: This is required when transferring master-account to sub-account. It is optional for internal transfers.
     * @param string $value
     * @return self
     */
    public function setToUserId($value)
    {
        $this->obj->toUserId = $value;
        return $this;
    }

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     * - 'MAIN' : Funding account
     * - 'TRADE' : Spot account
     * - 'CONTRACT' : Futures account
     * - 'MARGIN' : Cross margin account
     * - 'ISOLATED' : Isolated margin account
     * - 'MARGIN_V2' : Cross margin account
     * - 'ISOLATED_V2' : Isolated margin account
     * - 'OPTION' : Option account
     * @param string $value
     * @return self
     */
    public function setToAccountType($value)
    {
        $this->obj->toAccountType = $value;
        return $this;
    }

    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     * @param string $value
     * @return self
     */
    public function setToAccountTag($value)
    {
        $this->obj->toAccountTag = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return FlexTransferReq
     */
    public function build()
    {
        return $this->obj;
    }
}
