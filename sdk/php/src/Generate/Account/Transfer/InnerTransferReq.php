<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Transfer;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class InnerTransferReq implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Receiving Account Type: main, trade, margin, isolated, margin_v2, isolated_v2, contract
     * - 'main' : Funding account
     * - 'trade' : Spot account
     * - 'margin' : Cross margin account
     * - 'isolated' : Isolated margin account
     * - 'margin_v2' : Cross margin account
     * - 'isolated_v2' : Isolated margin account
     * - 'option' : Option account
     * @var string $to
     * @Type("string")
     * @SerializedName("to")
     */
    public $to;
    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     * @var string|null $fromTag
     * @Type("string")
     * @SerializedName("fromTag")
     */
    public $fromTag;
    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     * @var string|null $toTag
     * @Type("string")
     * @SerializedName("toTag")
     */
    public $toTag;
    /**
     * Payment Account Type: main, trade, margin, isolated, margin_v2, isolated_v2
     * - 'main' : Funding account
     * - 'trade' : Spot account
     * - 'margin' : Cross margin account
     * - 'isolated' : Isolated margin account
     * - 'margin_v2' : Cross margin account
     * - 'isolated_v2' : Isolated margin account
     * - 'option' : Option account
     * @var string $from
     * @Type("string")
     * @SerializedName("from")
     */
    public $from;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, InnerTransferReq::class, "json");
    }
    /**
     * Creates a new instance of the `InnerTransferReq` class.
     * The builder pattern allows step-by-step construction of a `InnerTransferReq` object.
     * @return InnerTransferReqBuilder
     */
    public static function builder()
    {
        return new InnerTransferReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `InnerTransferReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class InnerTransferReqBuilder
{
    /**
     * @var InnerTransferReq $obj
     */
    private $obj;

    public function __construct(InnerTransferReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * currency
     * @param string $value
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     * @param string $value
     * @return self
     */
    public function setAmount($value)
    {
        $this->obj->amount = $value;
        return $this;
    }

    /**
     * Receiving Account Type: main, trade, margin, isolated, margin_v2, isolated_v2, contract
     * - 'main' : Funding account
     * - 'trade' : Spot account
     * - 'margin' : Cross margin account
     * - 'isolated' : Isolated margin account
     * - 'margin_v2' : Cross margin account
     * - 'isolated_v2' : Isolated margin account
     * - 'option' : Option account
     * @param string $value
     * @return self
     */
    public function setTo($value)
    {
        $this->obj->to = $value;
        return $this;
    }

    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     * @param string $value
     * @return self
     */
    public function setFromTag($value)
    {
        $this->obj->fromTag = $value;
        return $this;
    }

    /**
     * Trading pair, required when the payment account type is isolated, e.g.: BTC-USDT
     * @param string $value
     * @return self
     */
    public function setToTag($value)
    {
        $this->obj->toTag = $value;
        return $this;
    }

    /**
     * Payment Account Type: main, trade, margin, isolated, margin_v2, isolated_v2
     * - 'main' : Funding account
     * - 'trade' : Spot account
     * - 'margin' : Cross margin account
     * - 'isolated' : Isolated margin account
     * - 'margin_v2' : Cross margin account
     * - 'isolated_v2' : Isolated margin account
     * - 'option' : Option account
     * @param string $value
     * @return self
     */
    public function setFrom($value)
    {
        $this->obj->from = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return InnerTransferReq
     */
    public function build()
    {
        return $this->obj;
    }
}
