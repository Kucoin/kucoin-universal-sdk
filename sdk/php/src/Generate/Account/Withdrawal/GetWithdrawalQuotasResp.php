<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Withdrawal;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetWithdrawalQuotasResp implements Response
{
    /**
     *
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     *
     * @var string $limitBTCAmount
     * @Type("string")
     * @SerializedName("limitBTCAmount")
     */
    public $limitBTCAmount;
    /**
     *
     * @var string $usedBTCAmount
     * @Type("string")
     * @SerializedName("usedBTCAmount")
     */
    public $usedBTCAmount;
    /**
     * Withdrawal limit currency
     * @var string $quotaCurrency
     * @Type("string")
     * @SerializedName("quotaCurrency")
     */
    public $quotaCurrency;
    /**
     * The intraday available withdrawal amount (withdrawal limit currency)
     * @var string $limitQuotaCurrencyAmount
     * @Type("string")
     * @SerializedName("limitQuotaCurrencyAmount")
     */
    public $limitQuotaCurrencyAmount;
    /**
     * The intraday cumulative withdrawal amount (withdrawal limit currency)
     * @var string $usedQuotaCurrencyAmount
     * @Type("string")
     * @SerializedName("usedQuotaCurrencyAmount")
     */
    public $usedQuotaCurrencyAmount;
    /**
     * Remaining amount available to withdraw the current day
     * @var string $remainAmount
     * @Type("string")
     * @SerializedName("remainAmount")
     */
    public $remainAmount;
    /**
     * Current available withdrawal amount
     * @var string $availableAmount
     * @Type("string")
     * @SerializedName("availableAmount")
     */
    public $availableAmount;
    /**
     * Minimum withdrawal fee
     * @var string $withdrawMinFee
     * @Type("string")
     * @SerializedName("withdrawMinFee")
     */
    public $withdrawMinFee;
    /**
     * Fees for internal withdrawal
     * @var string $innerWithdrawMinFee
     * @Type("string")
     * @SerializedName("innerWithdrawMinFee")
     */
    public $innerWithdrawMinFee;
    /**
     * Minimum withdrawal amount
     * @var string $withdrawMinSize
     * @Type("string")
     * @SerializedName("withdrawMinSize")
     */
    public $withdrawMinSize;
    /**
     * Is the withdraw function enabled?
     * @var bool $isWithdrawEnabled
     * @Type("bool")
     * @SerializedName("isWithdrawEnabled")
     */
    public $isWithdrawEnabled;
    /**
     * Floating point precision.
     * @var int $precision
     * @Type("int")
     * @SerializedName("precision")
     */
    public $precision;
    /**
     * The chainName of currency
     * @var string $chain
     * @Type("string")
     * @SerializedName("chain")
     */
    public $chain;
    /**
     * Reasons for restriction. Usually empty.
     * @var string $reason
     * @Type("string")
     * @SerializedName("reason")
     */
    public $reason;
    /**
     * Total locked amount (including the amount locked into USDT for each currency)
     * @var string $lockedAmount
     * @Type("string")
     * @SerializedName("lockedAmount")
     */
    public $lockedAmount;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetWithdrawalQuotasResp::class,
            "json"
        );
    }
}
