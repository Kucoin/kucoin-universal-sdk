
    /**
    * getWithdrawalQuotas
    * Get Withdrawal Quotas
    * /api/v1/withdrawals/quotas
    */
    public function testGetWithdrawalQuotas() {
        $builder = GetWithdrawalQuotasReq::builder();
        $builder->setCurrency(?)->setChain(?);
        $req = $builder->build();
        $resp = $this->api->getWithdrawalQuotas($req);
        self::assertNotNull($resp->currency);
        self::assertNotNull($resp->limitBTCAmount);
        self::assertNotNull($resp->usedBTCAmount);
        self::assertNotNull($resp->quotaCurrency);
        self::assertNotNull($resp->limitQuotaCurrencyAmount);
        self::assertNotNull($resp->usedQuotaCurrencyAmount);
        self::assertNotNull($resp->remainAmount);
        self::assertNotNull($resp->availableAmount);
        self::assertNotNull($resp->withdrawMinFee);
        self::assertNotNull($resp->innerWithdrawMinFee);
        self::assertNotNull($resp->withdrawMinSize);
        self::assertNotNull($resp->isWithdrawEnabled);
        self::assertNotNull($resp->precision);
        self::assertNotNull($resp->chain);
        self::assertNotNull($resp->reason);
        self::assertNotNull($resp->lockedAmount);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * withdrawalV3
    * Withdraw (V3)
    * /api/v3/withdrawals
    */
    public function testWithdrawalV3() {
        $builder = WithdrawalV3Req::builder();
        $builder->setCurrency(?)->setChain(?)->setAmount(?)->setMemo(?)->setIsInner(?)->setRemark(?)->setFeeDeductType(?)->setToAddress(?)->setWithdrawType(?);
        $req = $builder->build();
        $resp = $this->api->withdrawalV3($req);
        self::assertNotNull($resp->withdrawalId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * cancelWithdrawal
    * Cancel Withdrawal
    * /api/v1/withdrawals/{withdrawalId}
    */
    public function testCancelWithdrawal() {
        $builder = CancelWithdrawalReq::builder();
        $builder->setWithdrawalId(?);
        $req = $builder->build();
        $resp = $this->api->cancelWithdrawal($req);
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getWithdrawalHistory
    * Get Withdrawal History
    * /api/v1/withdrawals
    */
    public function testGetWithdrawalHistory() {
        $builder = GetWithdrawalHistoryReq::builder();
        $builder->setCurrency(?)->setStatus(?)->setStartAt(?)->setEndAt(?)->setCurrentPage(?)->setPageSize(?);
        $req = $builder->build();
        $resp = $this->api->getWithdrawalHistory($req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->id);
            self::assertNotNull($item->currency);
            self::assertNotNull($item->chain);
            self::assertNotNull($item->status);
            self::assertNotNull($item->address);
            self::assertNotNull($item->memo);
            self::assertNotNull($item->isInner);
            self::assertNotNull($item->amount);
            self::assertNotNull($item->fee);
            self::assertNotNull($item->walletTxId);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->updatedAt);
            self::assertNotNull($item->remark);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getWithdrawalHistoryById
    * Get Withdrawal History By ID
    * /api/v1/withdrawals/{withdrawalId}
    */
    public function testGetWithdrawalHistoryById() {
        $builder = GetWithdrawalHistoryByIdReq::builder();
        $builder->setWithdrawalId(?);
        $req = $builder->build();
        $resp = $this->api->getWithdrawalHistoryById($req);
        self::assertNotNull($resp->id);
        self::assertNotNull($resp->uid);
        self::assertNotNull($resp->currency);
        self::assertNotNull($resp->chainId);
        self::assertNotNull($resp->chainName);
        self::assertNotNull($resp->currencyName);
        self::assertNotNull($resp->status);
        self::assertNotNull($resp->failureReason);
        self::assertNotNull($resp->failureReasonMsg);
        self::assertNotNull($resp->address);
        self::assertNotNull($resp->memo);
        self::assertNotNull($resp->isInner);
        self::assertNotNull($resp->amount);
        self::assertNotNull($resp->fee);
        self::assertNotNull($resp->walletTxId);
        self::assertNotNull($resp->addressRemark);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->createdAt);
        self::assertNotNull($resp->cancelType);
        foreach($resp->taxes as $item) {
        }

        self::assertNotNull($resp->taxDescription);
        self::assertNotNull($resp->returnStatus);
        self::assertNotNull($resp->returnAmount);
        self::assertNotNull($resp->returnCurrency);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getWithdrawalHistoryOld
    * Get Withdrawal History - Old
    * /api/v1/hist-withdrawals
    */
    public function testGetWithdrawalHistoryOld() {
        $builder = GetWithdrawalHistoryOldReq::builder();
        $builder->setCurrency(?)->setStatus(?)->setStartAt(?)->setEndAt(?)->setCurrentPage(?)->setPageSize(?);
        $req = $builder->build();
        $resp = $this->api->getWithdrawalHistoryOld($req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->createAt);
            self::assertNotNull($item->amount);
            self::assertNotNull($item->address);
            self::assertNotNull($item->walletTxId);
            self::assertNotNull($item->isInner);
            self::assertNotNull($item->status);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * withdrawalV1
    * Withdraw - V1
    * /api/v1/withdrawals
    */
    public function testWithdrawalV1() {
        $builder = WithdrawalV1Req::builder();
        $builder->setCurrency(?)->setChain(?)->setAddress(?)->setAmount(?)->setMemo(?)->setIsInner(?)->setRemark(?)->setFeeDeductType(?);
        $req = $builder->build();
        $resp = $this->api->withdrawalV1($req);
        self::assertNotNull($resp->withdrawalId);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

