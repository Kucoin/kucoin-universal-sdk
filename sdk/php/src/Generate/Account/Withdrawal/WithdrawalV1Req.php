<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Withdrawal;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class WithdrawalV1Req implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * The chainId of currency, For a currency with multiple chains, it is recommended to specify the chain parameter instead of using the default chain; you can query the chainId through the response of the GET /api/v3/currencies/{currency} interface.
     * @var string|null $chain
     * @Type("string")
     * @SerializedName("chain")
     */
    public $chain = "eth";
    /**
     * Withdrawal address
     * @var string $address
     * @Type("string")
     * @SerializedName("address")
     */
    public $address;
    /**
     * Withdrawal amount, a positive number which is a multiple of the amount precision
     * @var int $amount
     * @Type("int")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Address remark. If there’s no remark, it is empty. When you withdraw from other platforms to KuCoin, you need to fill in memo(tag). Be careful: If you do not fill in memo(tag), your deposit may not be available.
     * @var string|null $memo
     * @Type("string")
     * @SerializedName("memo")
     */
    public $memo;
    /**
     * Internal withdrawal or not. Default: False
     * @var bool|null $isInner
     * @Type("bool")
     * @SerializedName("isInner")
     */
    public $isInner = false;
    /**
     * Remark
     * @var string|null $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * Withdrawal fee deduction type: INTERNAL, EXTERNAL, or not specified  1. INTERNAL: Deduct the transaction fees from your withdrawal amount 2. EXTERNAL: Deduct the transaction fees from your main account 3. If you don't specify the feeDeductType parameter, when the balance in your main account is sufficient to support the withdrawal, the system will initially deduct the transaction fees from your main account. But if the balance in your main account is not sufficient to support the withdrawal, the system will deduct the fees from your withdrawal amount. For example: Suppose you are going to withdraw 1 BTC from the KuCoin platform (transaction fee: 0.0001BTC), if the balance in your main account is insufficient, the system will deduct the transaction fees from your withdrawal amount. In this case, you will be receiving 0.9999BTC.
     * @var string|null $feeDeductType
     * @Type("string")
     * @SerializedName("feeDeductType")
     */
    public $feeDeductType;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, WithdrawalV1Req::class, "json");
    }
    /**
     * Creates a new instance of the `WithdrawalV1Req` class.
     * The builder pattern allows step-by-step construction of a `WithdrawalV1Req` object.
     * @return WithdrawalV1ReqBuilder
     */
    public static function builder()
    {
        return new WithdrawalV1ReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `WithdrawalV1Req` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class WithdrawalV1ReqBuilder
{
    /**
     * @var WithdrawalV1Req $obj
     */
    private $obj;

    public function __construct(WithdrawalV1Req $obj)
    {
        $this->obj = $obj;
    }
    /**
     * currency
     * @param string $value
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * The chainId of currency, For a currency with multiple chains, it is recommended to specify the chain parameter instead of using the default chain; you can query the chainId through the response of the GET /api/v3/currencies/{currency} interface.
     * @param string $value
     * @return self
     */
    public function setChain($value)
    {
        $this->obj->chain = $value;
        return $this;
    }

    /**
     * Withdrawal address
     * @param string $value
     * @return self
     */
    public function setAddress($value)
    {
        $this->obj->address = $value;
        return $this;
    }

    /**
     * Withdrawal amount, a positive number which is a multiple of the amount precision
     * @param int $value
     * @return self
     */
    public function setAmount($value)
    {
        $this->obj->amount = $value;
        return $this;
    }

    /**
     * Address remark. If there’s no remark, it is empty. When you withdraw from other platforms to KuCoin, you need to fill in memo(tag). Be careful: If you do not fill in memo(tag), your deposit may not be available.
     * @param string $value
     * @return self
     */
    public function setMemo($value)
    {
        $this->obj->memo = $value;
        return $this;
    }

    /**
     * Internal withdrawal or not. Default: False
     * @param bool $value
     * @return self
     */
    public function setIsInner($value)
    {
        $this->obj->isInner = $value;
        return $this;
    }

    /**
     * Remark
     * @param string $value
     * @return self
     */
    public function setRemark($value)
    {
        $this->obj->remark = $value;
        return $this;
    }

    /**
     * Withdrawal fee deduction type: INTERNAL, EXTERNAL, or not specified  1. INTERNAL: Deduct the transaction fees from your withdrawal amount 2. EXTERNAL: Deduct the transaction fees from your main account 3. If you don't specify the feeDeductType parameter, when the balance in your main account is sufficient to support the withdrawal, the system will initially deduct the transaction fees from your main account. But if the balance in your main account is not sufficient to support the withdrawal, the system will deduct the fees from your withdrawal amount. For example: Suppose you are going to withdraw 1 BTC from the KuCoin platform (transaction fee: 0.0001BTC), if the balance in your main account is insufficient, the system will deduct the transaction fees from your withdrawal amount. In this case, you will be receiving 0.9999BTC.
     * @param string $value
     * @return self
     */
    public function setFeeDeductType($value)
    {
        $this->obj->feeDeductType = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return WithdrawalV1Req
     */
    public function build()
    {
        return $this->obj;
    }
}
