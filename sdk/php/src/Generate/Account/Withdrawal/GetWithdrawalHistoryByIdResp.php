<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Withdrawal;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetWithdrawalHistoryByIdResp implements Response
{
    /**
     * Unique ID
     * @var string $id
     * @Type("string")
     * @SerializedName("id")
     */
    public $id;
    /**
     * User ID
     * @var int $uid
     * @Type("int")
     * @SerializedName("uid")
     */
    public $uid;
    /**
     * A unique currency code that will never change
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * The chain id of currency
     * @var string $chainId
     * @Type("string")
     * @SerializedName("chainId")
     */
    public $chainId;
    /**
     * Chain name of currency
     * @var string $chainName
     * @Type("string")
     * @SerializedName("chainName")
     */
    public $chainName;
    /**
     * Currency name; will change after renaming
     * @var string $currencyName
     * @Type("string")
     * @SerializedName("currencyName")
     */
    public $currencyName;
    /**
     * Status. Available value: REVIEW, PROCESSING, WALLET_PROCESSING, SUCCESS and FAILURE
     * @var string $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status;
    /**
     * Failure reason code
     * @var string $failureReason
     * @Type("string")
     * @SerializedName("failureReason")
     */
    public $failureReason;
    /**
     * Failure reason message
     * @var string|null $failureReasonMsg
     * @Type("string")
     * @SerializedName("failureReasonMsg")
     */
    public $failureReasonMsg;
    /**
     * Withwrawal address
     * @var string $address
     * @Type("string")
     * @SerializedName("address")
     */
    public $address;
    /**
     * Address remark. If thereâ€™s no remark, it is empty.
     * @var string $memo
     * @Type("string")
     * @SerializedName("memo")
     */
    public $memo;
    /**
     * Internal withdrawal or not.
     * @var bool $isInner
     * @Type("bool")
     * @SerializedName("isInner")
     */
    public $isInner;
    /**
     * Withwrawal amount
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Fees charged for withwrawal
     * @var string $fee
     * @Type("string")
     * @SerializedName("fee")
     */
    public $fee;
    /**
     * Wallet Transaction ID
     * @var string|null $walletTxId
     * @Type("string")
     * @SerializedName("walletTxId")
     */
    public $walletTxId;
    /**
     * Address remark
     * @var string|null $addressRemark
     * @Type("string")
     * @SerializedName("addressRemark")
     */
    public $addressRemark;
    /**
     * Remark
     * @var string $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * Creation Time (milliseconds)
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;
    /**
     *
     * - 'CANCELABLE' : Cancellable
     * - 'CANCELING' : Cancelling
     * - 'NON_CANCELABLE' : Non-Cancellable
     * @var string $cancelType
     * @Type("string")
     * @SerializedName("cancelType")
     */
    public $cancelType;
    /**
     * Users in some regions need query this field
     * @var string[]|null $taxes
     * @Type("array<string>")
     * @SerializedName("taxes")
     */
    public $taxes;
    /**
     * Tax description
     * @var string|null $taxDescription
     * @Type("string")
     * @SerializedName("taxDescription")
     */
    public $taxDescription;
    /**
     * Return status
     * - 'NOT_RETURN' : No returned
     * - 'PROCESSING' : To be returned
     * - 'SUCCESS' : Returned
     * @var string $returnStatus
     * @Type("string")
     * @SerializedName("returnStatus")
     */
    public $returnStatus;
    /**
     * Return amount
     * @var string|null $returnAmount
     * @Type("string")
     * @SerializedName("returnAmount")
     */
    public $returnAmount;
    /**
     * Return currency
     * @var string $returnCurrency
     * @Type("string")
     * @SerializedName("returnCurrency")
     */
    public $returnCurrency;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetWithdrawalHistoryByIdResp::class,
            "json"
        );
    }
}
