
    /**
    * addSubAccount
    * Add sub-account
    * /api/v2/sub/user/created
    */
    public function testAddSubAccount() {
        $builder = AddSubAccountReq::builder();
        $builder->setPassword(?)->setRemarks(?)->setSubName(?)->setAccess(?);
        $req = $builder->build();
        $resp = $this->api->addSubAccount($req);
        self::assertNotNull($resp->uid);
        self::assertNotNull($resp->subName);
        self::assertNotNull($resp->remarks);
        self::assertNotNull($resp->access);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addSubAccountMarginPermission
    * Add sub-account Margin Permission
    * /api/v3/sub/user/margin/enable
    */
    public function testAddSubAccountMarginPermission() {
        $builder = AddSubAccountMarginPermissionReq::builder();
        $builder->setUid(?);
        $req = $builder->build();
        $resp = $this->api->addSubAccountMarginPermission($req);
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addSubAccountFuturesPermission
    * Add sub-account Futures Permission
    * /api/v3/sub/user/futures/enable
    */
    public function testAddSubAccountFuturesPermission() {
        $builder = AddSubAccountFuturesPermissionReq::builder();
        $builder->setUid(?);
        $req = $builder->build();
        $resp = $this->api->addSubAccountFuturesPermission($req);
        self::assertNotNull($resp->data);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotSubAccountsSummaryV2
    * Get sub-account List - Summary Info
    * /api/v2/sub/user
    */
    public function testGetSpotSubAccountsSummaryV2() {
        $builder = GetSpotSubAccountsSummaryV2Req::builder();
        $builder->setCurrentPage(?)->setPageSize(?);
        $req = $builder->build();
        $resp = $this->api->getSpotSubAccountsSummaryV2($req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->userId);
            self::assertNotNull($item->uid);
            self::assertNotNull($item->subName);
            self::assertNotNull($item->status);
            self::assertNotNull($item->type);
            self::assertNotNull($item->access);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->remarks);
            self::assertNotNull($item->tradeTypes);
            self::assertNotNull($item->openedTradeTypes);
            self::assertNotNull($item->hostedStatus);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotSubAccountDetail
    * Get sub-account Detail - Balance
    * /api/v1/sub-accounts/{subUserId}
    */
    public function testGetSpotSubAccountDetail() {
        $builder = GetSpotSubAccountDetailReq::builder();
        $builder->setSubUserId(?)->setIncludeBaseAmount(?)->setBaseCurrency(?)->setBaseAmount(?);
        $req = $builder->build();
        $resp = $this->api->getSpotSubAccountDetail($req);
        self::assertNotNull($resp->subUserId);
        self::assertNotNull($resp->subName);
        foreach($resp->mainAccounts as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->available);
            self::assertNotNull($item->holds);
            self::assertNotNull($item->baseCurrency);
            self::assertNotNull($item->baseCurrencyPrice);
            self::assertNotNull($item->baseAmount);
            self::assertNotNull($item->tag);
        }

        foreach($resp->tradeAccounts as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->available);
            self::assertNotNull($item->holds);
            self::assertNotNull($item->baseCurrency);
            self::assertNotNull($item->baseCurrencyPrice);
            self::assertNotNull($item->baseAmount);
            self::assertNotNull($item->tag);
        }

        foreach($resp->marginAccounts as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->balance);
            self::assertNotNull($item->available);
            self::assertNotNull($item->holds);
            self::assertNotNull($item->baseCurrency);
            self::assertNotNull($item->baseCurrencyPrice);
            self::assertNotNull($item->baseAmount);
            self::assertNotNull($item->tag);
        }

        foreach($resp->tradeHFAccounts as $item) {
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotSubAccountListV2
    * Get sub-account List - Spot Balance (V2)
    * /api/v2/sub-accounts
    */
    public function testGetSpotSubAccountListV2() {
        $builder = GetSpotSubAccountListV2Req::builder();
        $builder->setCurrentPage(?)->setPageSize(?);
        $req = $builder->build();
        $resp = $this->api->getSpotSubAccountListV2($req);
        self::assertNotNull($resp->currentPage);
        self::assertNotNull($resp->pageSize);
        self::assertNotNull($resp->totalNum);
        self::assertNotNull($resp->totalPage);
        foreach($resp->items as $item) {
            self::assertNotNull($item->subUserId);
            self::assertNotNull($item->subName);
            self::assertNotNull($item->mainAccounts);
            self::assertNotNull($item->tradeAccounts);
            self::assertNotNull($item->marginAccounts);
            self::assertNotNull($item->tradeHFAccounts);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getFuturesSubAccountListV2
    * Get sub-account List - Futures Balance (V2)
    * /api/v1/account-overview-all
    */
    public function testGetFuturesSubAccountListV2() {
        $builder = GetFuturesSubAccountListV2Req::builder();
        $builder->setCurrency(?);
        $req = $builder->build();
        $resp = $this->api->getFuturesSubAccountListV2($req);
        self::assertNotNull($resp->summary);
        foreach($resp->accounts as $item) {
            self::assertNotNull($item->accountName);
            self::assertNotNull($item->accountEquity);
            self::assertNotNull($item->unrealisedPNL);
            self::assertNotNull($item->marginBalance);
            self::assertNotNull($item->positionMargin);
            self::assertNotNull($item->orderMargin);
            self::assertNotNull($item->frozenFunds);
            self::assertNotNull($item->availableBalance);
            self::assertNotNull($item->currency);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * addSubAccountApi
    * Add sub-account API
    * /api/v1/sub/api-key
    */
    public function testAddSubAccountApi() {
        $builder = AddSubAccountApiReq::builder();
        $builder->setPassphrase(?)->setRemark(?)->setPermission(?)->setIpWhitelist(?)->setExpire(?)->setSubName(?);
        $req = $builder->build();
        $resp = $this->api->addSubAccountApi($req);
        self::assertNotNull($resp->subName);
        self::assertNotNull($resp->remark);
        self::assertNotNull($resp->apiKey);
        self::assertNotNull($resp->apiSecret);
        self::assertNotNull($resp->apiVersion);
        self::assertNotNull($resp->passphrase);
        self::assertNotNull($resp->permission);
        self::assertNotNull($resp->ipWhitelist);
        self::assertNotNull($resp->createdAt);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * modifySubAccountApi
    * Modify sub-account API
    * /api/v1/sub/api-key/update
    */
    public function testModifySubAccountApi() {
        $builder = ModifySubAccountApiReq::builder();
        $builder->setPassphrase(?)->setPermission(?)->setIpWhitelist(?)->setExpire(?)->setSubName(?)->setApiKey(?);
        $req = $builder->build();
        $resp = $this->api->modifySubAccountApi($req);
        self::assertNotNull($resp->subName);
        self::assertNotNull($resp->apiKey);
        self::assertNotNull($resp->permission);
        self::assertNotNull($resp->ipWhitelist);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSubAccountApiList
    * Get sub-account API List
    * /api/v1/sub/api-key
    */
    public function testGetSubAccountApiList() {
        $builder = GetSubAccountApiListReq::builder();
        $builder->setApiKey(?)->setSubName(?);
        $req = $builder->build();
        $resp = $this->api->getSubAccountApiList($req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->subName);
            self::assertNotNull($item->remark);
            self::assertNotNull($item->apiKey);
            self::assertNotNull($item->apiVersion);
            self::assertNotNull($item->permission);
            self::assertNotNull($item->ipWhitelist);
            self::assertNotNull($item->createdAt);
            self::assertNotNull($item->uid);
            self::assertNotNull($item->isMaster);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * deleteSubAccountApi
    * Delete sub-account API
    * /api/v1/sub/api-key
    */
    public function testDeleteSubAccountApi() {
        $builder = DeleteSubAccountApiReq::builder();
        $builder->setApiKey(?)->setSubName(?)->setPassphrase(?);
        $req = $builder->build();
        $resp = $this->api->deleteSubAccountApi($req);
        self::assertNotNull($resp->subName);
        self::assertNotNull($resp->apiKey);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotSubAccountsSummaryV1
    * Get sub-account List - Summary Info (V1)
    * /api/v1/sub/user
    */
    public function testGetSpotSubAccountsSummaryV1() {
        $resp = $this->api->getSpotSubAccountsSummaryV1();
        foreach($resp->data as $item) {
            self::assertNotNull($item->userId);
            self::assertNotNull($item->uid);
            self::assertNotNull($item->subName);
            self::assertNotNull($item->type);
            self::assertNotNull($item->remarks);
            self::assertNotNull($item->access);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getSpotSubAccountListV1
    * Get sub-account List - Spot Balance (V1)
    * /api/v1/sub-accounts
    */
    public function testGetSpotSubAccountListV1() {
        $resp = $this->api->getSpotSubAccountListV1();
        foreach($resp->data as $item) {
            self::assertNotNull($item->subUserId);
            self::assertNotNull($item->subName);
            self::assertNotNull($item->mainAccounts);
            self::assertNotNull($item->tradeAccounts);
            self::assertNotNull($item->marginAccounts);
            self::assertNotNull($item->tradeHFAccounts);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

