<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Subaccount;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetSpotSubAccountListV1DataTradeAccounts implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * The currency of the account.
     * @var string|null $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Total funds in the account.
     * @var string|null $balance
     * @Type("string")
     * @SerializedName("balance")
     */
    public $balance;
    /**
     * Funds available to withdraw or trade.
     * @var string|null $available
     * @Type("string")
     * @SerializedName("available")
     */
    public $available;
    /**
     * Funds on hold (not available for use).
     * @var string|null $holds
     * @Type("string")
     * @SerializedName("holds")
     */
    public $holds;
    /**
     * Calculated on this currency.
     * @var string|null $baseCurrency
     * @Type("string")
     * @SerializedName("baseCurrency")
     */
    public $baseCurrency;
    /**
     * The base currency price.
     * @var string|null $baseCurrencyPrice
     * @Type("string")
     * @SerializedName("baseCurrencyPrice")
     */
    public $baseCurrencyPrice;
    /**
     * The base currency amount.
     * @var string|null $baseAmount
     * @Type("string")
     * @SerializedName("baseAmount")
     */
    public $baseAmount;
    /**
     *
     * @var string|null $tag
     * @Type("string")
     * @SerializedName("tag")
     */
    public $tag;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetSpotSubAccountListV1DataTradeAccounts::class,
            "json"
        );
    }
}
