<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Subaccount;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class AddSubAccountReq implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Password (7–24 characters, must contain letters and numbers, cannot only contain numbers or include special characters)
     * @var string $password
     * @Type("string")
     * @SerializedName("password")
     */
    public $password;
    /**
     * Remarks (1–24 characters)
     * @var string|null $remarks
     * @Type("string")
     * @SerializedName("remarks")
     */
    public $remarks;
    /**
     * Sub-account name (must contain 7–32 characters, at least one number and one letter. Cannot contain any spaces.)
     * @var string $subName
     * @Type("string")
     * @SerializedName("subName")
     */
    public $subName;
    /**
     * Permission (types include Spot, Futures, Margin permissions, which can be used alone or in combination).
     * - 'Spot' : Spot Account
     * - 'Futures' : Futures Account
     * - 'Margin' : Margin Account
     * @var string $access
     * @Type("string")
     * @SerializedName("access")
     */
    public $access;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, AddSubAccountReq::class, "json");
    }
    /**
     * Creates a new instance of the `AddSubAccountReq` class.
     * The builder pattern allows step-by-step construction of a `AddSubAccountReq` object.
     * @return AddSubAccountReqBuilder
     */
    public static function builder()
    {
        return new AddSubAccountReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `AddSubAccountReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class AddSubAccountReqBuilder
{
    /**
     * @var AddSubAccountReq $obj
     */
    private $obj;

    public function __construct(AddSubAccountReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Password (7–24 characters, must contain letters and numbers, cannot only contain numbers or include special characters)
     * @param string $value
     * @return self
     */
    public function setPassword($value)
    {
        $this->obj->password = $value;
        return $this;
    }

    /**
     * Remarks (1–24 characters)
     * @param string $value
     * @return self
     */
    public function setRemarks($value)
    {
        $this->obj->remarks = $value;
        return $this;
    }

    /**
     * Sub-account name (must contain 7–32 characters, at least one number and one letter. Cannot contain any spaces.)
     * @param string $value
     * @return self
     */
    public function setSubName($value)
    {
        $this->obj->subName = $value;
        return $this;
    }

    /**
     * Permission (types include Spot, Futures, Margin permissions, which can be used alone or in combination).
     * - 'Spot' : Spot Account
     * - 'Futures' : Futures Account
     * - 'Margin' : Margin Account
     * @param string $value
     * @return self
     */
    public function setAccess($value)
    {
        $this->obj->access = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return AddSubAccountReq
     */
    public function build()
    {
        return $this->obj;
    }
}
