<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Account;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class GetSpotHFLedgerReq implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Currency (you can choose more than one currency). You can specify a max. of 10 currencies in one go. If not specified, all currencies will be queried by default.
     * @var string|null $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * direction: in, out
     * @var string|null $direction
     * @Type("string")
     * @SerializedName("direction")
     */
    public $direction;
    /**
     * Transaction type
     * @var string|null $bizType
     * @Type("string")
     * @SerializedName("bizType")
     */
    public $bizType;
    /**
     * The ID of the last set of data from the previous data batch. By default, the latest information is given.
     * @var int|null $lastId
     * @Type("int")
     * @SerializedName("lastId")
     */
    public $lastId;
    /**
     * Default100, Max200
     * @var int|null $limit
     * @Type("int")
     * @SerializedName("limit")
     */
    public $limit = 100;
    /**
     * Start time (milliseconds)
     * @var int|null $startAt
     * @Type("int")
     * @SerializedName("startAt")
     */
    public $startAt;
    /**
     * End time (milliseconds)
     * @var int|null $endAt
     * @Type("int")
     * @SerializedName("endAt")
     */
    public $endAt;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetSpotHFLedgerReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `GetSpotHFLedgerReq` class.
     * The builder pattern allows step-by-step construction of a `GetSpotHFLedgerReq` object.
     * @return GetSpotHFLedgerReqBuilder
     */
    public static function builder()
    {
        return new GetSpotHFLedgerReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `GetSpotHFLedgerReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class GetSpotHFLedgerReqBuilder
{
    /**
     * @var GetSpotHFLedgerReq $obj
     */
    private $obj;

    public function __construct(GetSpotHFLedgerReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * @param string $value Currency (you can choose more than one currency). You can specify a max. of 10 currencies in one go. If not specified, all currencies will be queried by default.
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * @param string $value direction: in, out
     * @return self
     */
    public function setDirection($value)
    {
        $this->obj->direction = $value;
        return $this;
    }

    /**
     * @param string $value Transaction type
     * @return self
     */
    public function setBizType($value)
    {
        $this->obj->bizType = $value;
        return $this;
    }

    /**
     * @param int $value The ID of the last set of data from the previous data batch. By default, the latest information is given.
     * @return self
     */
    public function setLastId($value)
    {
        $this->obj->lastId = $value;
        return $this;
    }

    /**
     * @param int $value Default100, Max200
     * @return self
     */
    public function setLimit($value)
    {
        $this->obj->limit = $value;
        return $this;
    }

    /**
     * @param int $value Start time (milliseconds)
     * @return self
     */
    public function setStartAt($value)
    {
        $this->obj->startAt = $value;
        return $this;
    }

    /**
     * @param int $value End time (milliseconds)
     * @return self
     */
    public function setEndAt($value)
    {
        $this->obj->endAt = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return GetSpotHFLedgerReq
     */
    public function build()
    {
        return $this->obj;
    }
}
