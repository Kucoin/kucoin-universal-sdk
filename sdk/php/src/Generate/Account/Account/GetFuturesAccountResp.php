<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Account;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetFuturesAccountResp implements Response
{
    /**
     * Account equity = marginBalance + unrealizedPNL
     * @var float $accountEquity
     * @Type("float")
     * @SerializedName("accountEquity")
     */
    public $accountEquity;
    /**
     * Unrealized profit and loss
     * @var float $unrealisedPNL
     * @Type("float")
     * @SerializedName("unrealisedPNL")
     */
    public $unrealisedPNL;
    /**
     * Margin balance = positionMargin + orderMargin + frozenFunds + availableBalance - unrealizedPNL
     * @var float $marginBalance
     * @Type("float")
     * @SerializedName("marginBalance")
     */
    public $marginBalance;
    /**
     * Position margin
     * @var float $positionMargin
     * @Type("float")
     * @SerializedName("positionMargin")
     */
    public $positionMargin;
    /**
     * Order margin
     * @var float $orderMargin
     * @Type("float")
     * @SerializedName("orderMargin")
     */
    public $orderMargin;
    /**
     * Frozen funds for out-transfer
     * @var float $frozenFunds
     * @Type("float")
     * @SerializedName("frozenFunds")
     */
    public $frozenFunds;
    /**
     * Available balance
     * @var float $availableBalance
     * @Type("float")
     * @SerializedName("availableBalance")
     */
    public $availableBalance;
    /**
     * Currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Cross margin risk rate
     * @var float $riskRatio
     * @Type("float")
     * @SerializedName("riskRatio")
     */
    public $riskRatio;
    /**
     * Maximum amount that can be withdrawn/transferred.
     * @var float $maxWithdrawAmount
     * @Type("float")
     * @SerializedName("maxWithdrawAmount")
     */
    public $maxWithdrawAmount;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetFuturesAccountResp::class,
            "json"
        );
    }
}
