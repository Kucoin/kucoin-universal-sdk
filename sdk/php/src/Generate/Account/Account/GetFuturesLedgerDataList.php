<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Account\Account;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetFuturesLedgerDataList implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Ledger time
     * @var int $time
     * @Type("int")
     * @SerializedName("time")
     */
    public $time;
    /**
     * Type: RealisedPNL, Deposit, Withdrawal, TransferIn, TransferOut
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * Transaction amount
     * @var float $amount
     * @Type("float")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Fee
     * @var float $fee
     * @Type("float")
     * @SerializedName("fee")
     */
    public $fee;
    /**
     * Account equity
     * @var float $accountEquity
     * @Type("float")
     * @SerializedName("accountEquity")
     */
    public $accountEquity;
    /**
     * Status: Completed, Pending
     * @var string $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status;
    /**
     * Ticker symbol of the contract
     * @var string $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * Offset
     * @var int $offset
     * @Type("int")
     * @SerializedName("offset")
     */
    public $offset;
    /**
     * Currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetFuturesLedgerDataList::class,
            "json"
        );
    }
}
