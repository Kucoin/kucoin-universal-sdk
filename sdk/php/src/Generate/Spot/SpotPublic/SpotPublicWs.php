<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\SpotPublic;
use React\Promise\PromiseInterface;

interface SpotPublicWs
{
    /**
     * Get All Tickers
     * Subscribe to this topic to get pushes on all market symbol BBO changes.
     * push frequency: once every 100ms
     * @param callable $callback function(string $topic, string $subject, AllTickersEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function allTickers(callable $callback): PromiseInterface;

    /**
     * Get Call Auction Info
     * Subscribe to this topic to get the specified symbol call auction info.
     * push frequency: once every 100ms
     * @param callable $callback function(string $topic, string $subject, CallAuctionInfoEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function callAuctionInfo(
        string $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * CallAuctionOrderbook - Level50
     * The system will return the call auction 50 best ask/bid orders data; if there is no change in the market, data will not be pushed
     * push frequency: once every 100ms
     * @param callable $callback function(string $topic, string $subject, CallAuctionOrderbookLevel50Event $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function callAuctionOrderbookLevel50(
        string $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Klines
     * Subscribe to this topic to get K-Line data.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, KlinesEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function klines(
        string $symbol,
        string $type,
        callable $callback
    ): PromiseInterface;

    /**
     * Market Snapshot
     * Subscribe to this topic to get snapshot data for the entire market.
     * push frequency: once every 2s
     * @param callable $callback function(string $topic, string $subject, MarketSnapshotEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function marketSnapshot(
        string $market,
        callable $callback
    ): PromiseInterface;

    /**
     * Orderbook - Increment
     * The system will return the increment change orderbook data (all depths); a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, OrderbookIncrementEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function orderbookIncrement(
        array $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Orderbook - Level1
     * The system will return the 1 best ask/bid orders data; a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
     * push frequency: once every 10ms
     * @param callable $callback function(string $topic, string $subject, OrderbookLevel1Event $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function orderbookLevel1(
        array $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Orderbook - Level50
     * The system will return data for the 50 best ask/bid orders; a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
     * push frequency: once every 100ms
     * @param callable $callback function(string $topic, string $subject, OrderbookLevel50Event $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function orderbookLevel50(
        array $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Orderbook - Level5
     * The system will return the 5 best ask/bid orders data; a topic supports up to 100 symbols. If there is no change in the market, data will not be pushed
     * push frequency: once every 100ms
     * @param callable $callback function(string $topic, string $subject, OrderbookLevel5Event $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function orderbookLevel5(
        array $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Symbol Snapshot
     * Subscribe to get snapshot data for a single symbol.
     * push frequency: once every 2s
     * @param callable $callback function(string $topic, string $subject, SymbolSnapshotEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function symbolSnapshot(
        string $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Get Ticker
     * Subscribe to this topic to get specified symbol pushes on BBO changes.
     * push frequency: once every 100ms
     * @param callable $callback function(string $topic, string $subject, TickerEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function ticker(array $symbol, callable $callback): PromiseInterface;

    /**
     * Trade
     * Subscribe to this topic to get Level 3 matching event data flows. A topic supports up to 100 symbols.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, TradeEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function trade(array $symbol, callable $callback): PromiseInterface;

    /**
     * Unsubscribe from topics
     */
    public function unSubscribe(string $id): PromiseInterface;

    /**
     * Start websocket
     */
    public function start(): PromiseInterface;

    /**
     * Stop websocket
     */
    public function stop(): PromiseInterface;
}
