<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class BatchAddOrdersSyncOrderList implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.
     * @var string|null $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Specify if the order is a 'limit' order or 'market' order.
     * - 'limit' :
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     * - 'GTC' :
     * - 'GTT' :
     * - 'IOC' :
     * - 'FOK' :
     * @var string|null $timeInForce
     * @Type("string")
     * @SerializedName("timeInForce")
     */
    public $timeInForce = "GTC";
    /**
     * Specify if the order is to 'buy' or 'sell'.
     * - 'buy' :
     * - 'sell' :
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Specify price for order
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Specify quantity for order.  When **type** is limited, select one out of two: size or funds. Size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     * @var string|null $size
     * @Type("string")
     * @SerializedName("size")
     */
    public $size;
    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     * - 'DC' :
     * - 'CO' :
     * - 'CN' :
     * - 'CB' :
     * @var string|null $stp
     * @Type("string")
     * @SerializedName("stp")
     */
    public $stp;
    /**
     * Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
     * @var int|null $cancelAfter
     * @Type("int")
     * @SerializedName("cancelAfter")
     */
    public $cancelAfter = -1;
    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     * @var bool|null $postOnly
     * @Type("bool")
     * @SerializedName("postOnly")
     */
    public $postOnly = false;
    /**
     * [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
     * @var bool|null $hidden
     * @Type("bool")
     * @SerializedName("hidden")
     */
    public $hidden = false;
    /**
     * Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
     * @var bool|null $iceberg
     * @Type("bool")
     * @SerializedName("iceberg")
     */
    public $iceberg = false;
    /**
     * Maximum visible quantity in iceberg orders
     * @var string|null $visibleSize
     * @Type("string")
     * @SerializedName("visibleSize")
     */
    public $visibleSize;
    /**
     * Order tag, length cannot exceed 20 characters (ASCII)
     * @var string|null $tags
     * @Type("string")
     * @SerializedName("tags")
     */
    public $tags;
    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     * @var string|null $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * When **type** is market, select one out of two: size or funds
     * @var string|null $funds
     * @Type("string")
     * @SerializedName("funds")
     */
    public $funds;
    /**
     * The order will fail if it times out after the specified duration in milliseconds. Specifically, if clientTimestamp + allowMaxTimeWindow (in milliseconds) is less than the time the server receives the message, the order will fail.
     * @var int|null $allowMaxTimeWindow
     * @Type("int")
     * @SerializedName("allowMaxTimeWindow")
     */
    public $allowMaxTimeWindow;
    /**
     * Equal to KC-API-TIMESTAMP. Needs to be defined if iceberg is specified.
     * @var int|null $clientTimestamp
     * @Type("int")
     * @SerializedName("clientTimestamp")
     */
    public $clientTimestamp;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            BatchAddOrdersSyncOrderList::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `BatchAddOrdersSyncOrderList` class.
     * The builder pattern allows step-by-step construction of a `BatchAddOrdersSyncOrderList` object.
     * @return BatchAddOrdersSyncOrderListBuilder
     */
    public static function builder()
    {
        return new BatchAddOrdersSyncOrderListBuilder(new self());
    }

    /**
     * Creates a new instance of the `BatchAddOrdersSyncOrderList` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class BatchAddOrdersSyncOrderListBuilder
{
    /**
     * @var BatchAddOrdersSyncOrderList $obj
     */
    private $obj;

    public function __construct(BatchAddOrdersSyncOrderList $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * symbol
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * Specify if the order is a 'limit' order or 'market' order.
     * - 'limit' :
     * @param string $value
     * @return self
     */
    public function setType($value)
    {
        $this->obj->type = $value;
        return $this;
    }

    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     * - 'GTC' :
     * - 'GTT' :
     * - 'IOC' :
     * - 'FOK' :
     * @param string $value
     * @return self
     */
    public function setTimeInForce($value)
    {
        $this->obj->timeInForce = $value;
        return $this;
    }

    /**
     * Specify if the order is to 'buy' or 'sell'.
     * - 'buy' :
     * - 'sell' :
     * @param string $value
     * @return self
     */
    public function setSide($value)
    {
        $this->obj->side = $value;
        return $this;
    }

    /**
     * Specify price for order
     * @param string $value
     * @return self
     */
    public function setPrice($value)
    {
        $this->obj->price = $value;
        return $this;
    }

    /**
     * Specify quantity for order.  When **type** is limited, select one out of two: size or funds. Size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     * @param string $value
     * @return self
     */
    public function setSize($value)
    {
        $this->obj->size = $value;
        return $this;
    }

    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     * - 'DC' :
     * - 'CO' :
     * - 'CN' :
     * - 'CB' :
     * @param string $value
     * @return self
     */
    public function setStp($value)
    {
        $this->obj->stp = $value;
        return $this;
    }

    /**
     * Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
     * @param int $value
     * @return self
     */
    public function setCancelAfter($value)
    {
        $this->obj->cancelAfter = $value;
        return $this;
    }

    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     * @param bool $value
     * @return self
     */
    public function setPostOnly($value)
    {
        $this->obj->postOnly = $value;
        return $this;
    }

    /**
     * [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
     * @param bool $value
     * @return self
     */
    public function setHidden($value)
    {
        $this->obj->hidden = $value;
        return $this;
    }

    /**
     * Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
     * @param bool $value
     * @return self
     */
    public function setIceberg($value)
    {
        $this->obj->iceberg = $value;
        return $this;
    }

    /**
     * Maximum visible quantity in iceberg orders
     * @param string $value
     * @return self
     */
    public function setVisibleSize($value)
    {
        $this->obj->visibleSize = $value;
        return $this;
    }

    /**
     * Order tag, length cannot exceed 20 characters (ASCII)
     * @param string $value
     * @return self
     */
    public function setTags($value)
    {
        $this->obj->tags = $value;
        return $this;
    }

    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     * @param string $value
     * @return self
     */
    public function setRemark($value)
    {
        $this->obj->remark = $value;
        return $this;
    }

    /**
     * When **type** is market, select one out of two: size or funds
     * @param string $value
     * @return self
     */
    public function setFunds($value)
    {
        $this->obj->funds = $value;
        return $this;
    }

    /**
     * The order will fail if it times out after the specified duration in milliseconds. Specifically, if clientTimestamp + allowMaxTimeWindow (in milliseconds) is less than the time the server receives the message, the order will fail.
     * @param int $value
     * @return self
     */
    public function setAllowMaxTimeWindow($value)
    {
        $this->obj->allowMaxTimeWindow = $value;
        return $this;
    }

    /**
     * Equal to KC-API-TIMESTAMP. Needs to be defined if iceberg is specified.
     * @param int $value
     * @return self
     */
    public function setClientTimestamp($value)
    {
        $this->obj->clientTimestamp = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return BatchAddOrdersSyncOrderList
     */
    public function build()
    {
        return $this->obj;
    }
}
