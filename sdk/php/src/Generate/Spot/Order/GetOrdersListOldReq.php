<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetOrdersListOldReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Symbol
     * @var string|null $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Active or done (done as default); only list orders with a specific status.
     * - 'active' : Active order
     * - 'done' : Done orders
     * @var string|null $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status = "done";
    /**
     * Buy or Sell
     * - 'buy' : buy
     * - 'sell' : sell
     * @var string|null $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Order type
     * - 'limit' : limit
     * - 'market' : market
     * - 'limit_stop' : limit_stop
     * - 'market_stop' : market_stop
     * - 'oco_limit' : oco_limit
     * - 'oco_stop' : oco_stop
     * @var string|null $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * The type of trading: TRADE - Spot Trading (TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
     * - 'TRADE' : Spot Trading
     * - 'MARGIN_TRADE' : Cross Margin Trading
     * - 'MARGIN_ISOLATED_TRADE' : Isolated Margin Trading
     * @var string|null $tradeType
     * @Type("string")
     * @SerializedName("tradeType")
     */
    public $tradeType = "TRADE";
    /**
     * Start time (milliseconds)
     * @var int|null $startAt
     * @Type("int")
     * @SerializedName("startAt")
     */
    public $startAt;
    /**
     * End time (milliseconds)
     * @var int|null $endAt
     * @Type("int")
     * @SerializedName("endAt")
     */
    public $endAt;
    /**
     * Current request page.
     * @var int|null $currentPage
     * @Type("int")
     * @SerializedName("currentPage")
     */
    public $currentPage = 1;
    /**
     * Number of results per request. Minimum is 10, maximum is 500.
     * @var int|null $pageSize
     * @Type("int")
     * @SerializedName("pageSize")
     */
    public $pageSize = 50;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetOrdersListOldReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `GetOrdersListOldReq` class.
     * The builder pattern allows step-by-step construction of a `GetOrdersListOldReq` object.
     * @return GetOrdersListOldReqBuilder
     */
    public static function builder()
    {
        return new GetOrdersListOldReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `GetOrdersListOldReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class GetOrdersListOldReqBuilder
{
    /**
     * @var GetOrdersListOldReq $obj
     */
    private $obj;

    public function __construct(GetOrdersListOldReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Symbol
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * Active or done (done as default); only list orders with a specific status.
     * - 'active' : Active order
     * - 'done' : Done orders
     * @param string $value
     * @return self
     */
    public function setStatus($value)
    {
        $this->obj->status = $value;
        return $this;
    }

    /**
     * Buy or Sell
     * - 'buy' : buy
     * - 'sell' : sell
     * @param string $value
     * @return self
     */
    public function setSide($value)
    {
        $this->obj->side = $value;
        return $this;
    }

    /**
     * Order type
     * - 'limit' : limit
     * - 'market' : market
     * - 'limit_stop' : limit_stop
     * - 'market_stop' : market_stop
     * - 'oco_limit' : oco_limit
     * - 'oco_stop' : oco_stop
     * @param string $value
     * @return self
     */
    public function setType($value)
    {
        $this->obj->type = $value;
        return $this;
    }

    /**
     * The type of trading: TRADE - Spot Trading (TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
     * - 'TRADE' : Spot Trading
     * - 'MARGIN_TRADE' : Cross Margin Trading
     * - 'MARGIN_ISOLATED_TRADE' : Isolated Margin Trading
     * @param string $value
     * @return self
     */
    public function setTradeType($value)
    {
        $this->obj->tradeType = $value;
        return $this;
    }

    /**
     * Start time (milliseconds)
     * @param int $value
     * @return self
     */
    public function setStartAt($value)
    {
        $this->obj->startAt = $value;
        return $this;
    }

    /**
     * End time (milliseconds)
     * @param int $value
     * @return self
     */
    public function setEndAt($value)
    {
        $this->obj->endAt = $value;
        return $this;
    }

    /**
     * Current request page.
     * @param int $value
     * @return self
     */
    public function setCurrentPage($value)
    {
        $this->obj->currentPage = $value;
        return $this;
    }

    /**
     * Number of results per request. Minimum is 10, maximum is 500.
     * @param int $value
     * @return self
     */
    public function setPageSize($value)
    {
        $this->obj->pageSize = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return GetOrdersListOldReq
     */
    public function build()
    {
        return $this->obj;
    }
}
