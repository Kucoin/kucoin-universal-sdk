<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class AddOcoOrderReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * specify if the order is to 'buy' or 'sell'
     * - 'buy' :
     * - 'sell' :
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     * @var string|null $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * Specify price for order
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Specify quantity for order
     * @var string $size
     * @Type("string")
     * @SerializedName("size")
     */
    public $size;
    /**
     * trigger price.
     * @var string $stopPrice
     * @Type("string")
     * @SerializedName("stopPrice")
     */
    public $stopPrice;
    /**
     * The limit order price after take-profit and stop-loss are triggered.
     * @var string $limitPrice
     * @Type("string")
     * @SerializedName("limitPrice")
     */
    public $limitPrice;
    /**
     * Transaction Type, currently only supports TRADE (spot transactions), the default is TRADE
     * - 'TRADE' : Spot Trading
     * @var string|null $tradeType
     * @Type("string")
     * @SerializedName("tradeType")
     */
    public $tradeType;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize($json, AddOcoOrderReq::class, "json");
    }
    /**
     * Creates a new instance of the `AddOcoOrderReq` class.
     * The builder pattern allows step-by-step construction of a `AddOcoOrderReq` object.
     * @return AddOcoOrderReqBuilder
     */
    public static function builder()
    {
        return new AddOcoOrderReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `AddOcoOrderReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class AddOcoOrderReqBuilder
{
    /**
     * @var AddOcoOrderReq $obj
     */
    private $obj;

    public function __construct(AddOcoOrderReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * specify if the order is to 'buy' or 'sell'
     * - 'buy' :
     * - 'sell' :
     * @param string $value
     * @return self
     */
    public function setSide($value)
    {
        $this->obj->side = $value;
        return $this;
    }

    /**
     * symbol
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     * @param string $value
     * @return self
     */
    public function setRemark($value)
    {
        $this->obj->remark = $value;
        return $this;
    }

    /**
     * Specify price for order
     * @param string $value
     * @return self
     */
    public function setPrice($value)
    {
        $this->obj->price = $value;
        return $this;
    }

    /**
     * Specify quantity for order
     * @param string $value
     * @return self
     */
    public function setSize($value)
    {
        $this->obj->size = $value;
        return $this;
    }

    /**
     * trigger price.
     * @param string $value
     * @return self
     */
    public function setStopPrice($value)
    {
        $this->obj->stopPrice = $value;
        return $this;
    }

    /**
     * The limit order price after take-profit and stop-loss are triggered.
     * @param string $value
     * @return self
     */
    public function setLimitPrice($value)
    {
        $this->obj->limitPrice = $value;
        return $this;
    }

    /**
     * Transaction Type, currently only supports TRADE (spot transactions), the default is TRADE
     * - 'TRADE' : Spot Trading
     * @param string $value
     * @return self
     */
    public function setTradeType($value)
    {
        $this->obj->tradeType = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return AddOcoOrderReq
     */
    public function build()
    {
        return $this->obj;
    }
}
