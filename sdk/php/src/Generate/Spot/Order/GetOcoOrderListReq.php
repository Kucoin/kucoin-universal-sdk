<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetOcoOrderListReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * symbol
     * @var string|null $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Start time (milliseconds)
     * @var int|null $startAt
     * @Type("int")
     * @SerializedName("startAt")
     */
    public $startAt;
    /**
     * End time (milliseconds)
     * @var int|null $endAt
     * @Type("int")
     * @SerializedName("endAt")
     */
    public $endAt;
    /**
     * Specify orderId collection, up to 500 orders
     * @var string|null $orderIds
     * @Type("string")
     * @SerializedName("orderIds")
     */
    public $orderIds;
    /**
     * Size per page, minimum value 10, maximum value 500
     * @var int|null $pageSize
     * @Type("int")
     * @SerializedName("pageSize")
     */
    public $pageSize = 50;
    /**
     * Page number, minimum value 1
     * @var int|null $currentPage
     * @Type("int")
     * @SerializedName("currentPage")
     */
    public $currentPage = 1;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetOcoOrderListReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `GetOcoOrderListReq` class.
     * The builder pattern allows step-by-step construction of a `GetOcoOrderListReq` object.
     * @return GetOcoOrderListReqBuilder
     */
    public static function builder()
    {
        return new GetOcoOrderListReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `GetOcoOrderListReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class GetOcoOrderListReqBuilder
{
    /**
     * @var GetOcoOrderListReq $obj
     */
    private $obj;

    public function __construct(GetOcoOrderListReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * symbol
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * Start time (milliseconds)
     * @param int $value
     * @return self
     */
    public function setStartAt($value)
    {
        $this->obj->startAt = $value;
        return $this;
    }

    /**
     * End time (milliseconds)
     * @param int $value
     * @return self
     */
    public function setEndAt($value)
    {
        $this->obj->endAt = $value;
        return $this;
    }

    /**
     * Specify orderId collection, up to 500 orders
     * @param string $value
     * @return self
     */
    public function setOrderIds($value)
    {
        $this->obj->orderIds = $value;
        return $this;
    }

    /**
     * Size per page, minimum value 10, maximum value 500
     * @param int $value
     * @return self
     */
    public function setPageSize($value)
    {
        $this->obj->pageSize = $value;
        return $this;
    }

    /**
     * Page number, minimum value 1
     * @param int $value
     * @return self
     */
    public function setCurrentPage($value)
    {
        $this->obj->currentPage = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return GetOcoOrderListReq
     */
    public function build()
    {
        return $this->obj;
    }
}
