<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class AddOrderOldReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * specify if the order is to 'buy' or 'sell'
     * - 'buy' :
     * - 'sell' :
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * specify if the order is an 'limit' order or 'market' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price, you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
     * - 'limit' : limit order
     * - 'market' : market order
     * @var string|null $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type = "limit";
    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     * @var string|null $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     * - 'DC' :
     * - 'CO' :
     * - 'CN' :
     * - 'CB' :
     * @var string|null $stp
     * @Type("string")
     * @SerializedName("stp")
     */
    public $stp;
    /**
     * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
     * @var string|null $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     * @var string|null $size
     * @Type("string")
     * @SerializedName("size")
     */
    public $size;
    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     * - 'GTC' :
     * - 'GTT' :
     * - 'IOC' :
     * - 'FOK' :
     * @var string|null $timeInForce
     * @Type("string")
     * @SerializedName("timeInForce")
     */
    public $timeInForce = "GTC";
    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     * @var bool|null $postOnly
     * @Type("bool")
     * @SerializedName("postOnly")
     */
    public $postOnly = false;
    /**
     * Hidden or not (not shown in order book)
     * @var bool|null $hidden
     * @Type("bool")
     * @SerializedName("hidden")
     */
    public $hidden = false;
    /**
     * Whether or not only visible portions of orders are shown in iceberg orders
     * @var bool|null $iceberg
     * @Type("bool")
     * @SerializedName("iceberg")
     */
    public $iceberg = false;
    /**
     * Maximum visible quantity in iceberg orders
     * @var string|null $visibleSize
     * @Type("string")
     * @SerializedName("visibleSize")
     */
    public $visibleSize;
    /**
     * Cancel after n seconds，the order timing strategy is GTT
     * @var int|null $cancelAfter
     * @Type("int")
     * @SerializedName("cancelAfter")
     */
    public $cancelAfter;
    /**
     * When **type** is market, select one out of two: size or funds
     * @var string|null $funds
     * @Type("string")
     * @SerializedName("funds")
     */
    public $funds;
    /**
     * The type of trading : **TRADE**（Spot Trade）, **MARGIN_TRADE** (Margin Trade). Default is **TRADE**. **Note: To improve the system performance and to accelerate order placing and processing, KuCoin has added a new interface for order placing of margin. For traders still using the current interface, please move to the new one as soon as possible. The current one will no longer accept margin orders by May 1st, 2021 (UTC). At the time, KuCoin will notify users via the announcement, please pay attention to it.**
     * - 'TRADE' : Spot
     * - 'MARGIN_TRADE' : Margin
     * @var string|null $tradeType
     * @Type("string")
     * @SerializedName("tradeType")
     */
    public $tradeType = "TRADE";

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, AddOrderOldReq::class, "json");
    }
    /**
     * Creates a new instance of the `AddOrderOldReq` class.
     * The builder pattern allows step-by-step construction of a `AddOrderOldReq` object.
     * @return AddOrderOldReqBuilder
     */
    public static function builder()
    {
        return new AddOrderOldReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `AddOrderOldReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class AddOrderOldReqBuilder
{
    /**
     * @var AddOrderOldReq $obj
     */
    private $obj;

    public function __construct(AddOrderOldReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Client Order Id，The ClientOid field is a unique ID created by the user（we recommend using a UUID）, and can only contain numbers, letters, underscores （_）, and hyphens （-）. This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * specify if the order is to 'buy' or 'sell'
     * - 'buy' :
     * - 'sell' :
     * @param string $value
     * @return self
     */
    public function setSide($value)
    {
        $this->obj->side = $value;
        return $this;
    }

    /**
     * symbol
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * specify if the order is an 'limit' order or 'market' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price, you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
     * - 'limit' : limit order
     * - 'market' : market order
     * @param string $value
     * @return self
     */
    public function setType($value)
    {
        $this->obj->type = $value;
        return $this;
    }

    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     * @param string $value
     * @return self
     */
    public function setRemark($value)
    {
        $this->obj->remark = $value;
        return $this;
    }

    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     * - 'DC' :
     * - 'CO' :
     * - 'CN' :
     * - 'CB' :
     * @param string $value
     * @return self
     */
    public function setStp($value)
    {
        $this->obj->stp = $value;
        return $this;
    }

    /**
     * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
     * @param string $value
     * @return self
     */
    public function setPrice($value)
    {
        $this->obj->price = $value;
        return $this;
    }

    /**
     * Specify quantity for order  When **type** is limit, size refers to the amount of trading targets (the asset name written in front) for the trading pair. Teh Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     * @param string $value
     * @return self
     */
    public function setSize($value)
    {
        $this->obj->size = $value;
        return $this;
    }

    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     * - 'GTC' :
     * - 'GTT' :
     * - 'IOC' :
     * - 'FOK' :
     * @param string $value
     * @return self
     */
    public function setTimeInForce($value)
    {
        $this->obj->timeInForce = $value;
        return $this;
    }

    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     * @param bool $value
     * @return self
     */
    public function setPostOnly($value)
    {
        $this->obj->postOnly = $value;
        return $this;
    }

    /**
     * Hidden or not (not shown in order book)
     * @param bool $value
     * @return self
     */
    public function setHidden($value)
    {
        $this->obj->hidden = $value;
        return $this;
    }

    /**
     * Whether or not only visible portions of orders are shown in iceberg orders
     * @param bool $value
     * @return self
     */
    public function setIceberg($value)
    {
        $this->obj->iceberg = $value;
        return $this;
    }

    /**
     * Maximum visible quantity in iceberg orders
     * @param string $value
     * @return self
     */
    public function setVisibleSize($value)
    {
        $this->obj->visibleSize = $value;
        return $this;
    }

    /**
     * Cancel after n seconds，the order timing strategy is GTT
     * @param int $value
     * @return self
     */
    public function setCancelAfter($value)
    {
        $this->obj->cancelAfter = $value;
        return $this;
    }

    /**
     * When **type** is market, select one out of two: size or funds
     * @param string $value
     * @return self
     */
    public function setFunds($value)
    {
        $this->obj->funds = $value;
        return $this;
    }

    /**
     * The type of trading : **TRADE**（Spot Trade）, **MARGIN_TRADE** (Margin Trade). Default is **TRADE**. **Note: To improve the system performance and to accelerate order placing and processing, KuCoin has added a new interface for order placing of margin. For traders still using the current interface, please move to the new one as soon as possible. The current one will no longer accept margin orders by May 1st, 2021 (UTC). At the time, KuCoin will notify users via the announcement, please pay attention to it.**
     * - 'TRADE' : Spot
     * - 'MARGIN_TRADE' : Margin
     * @param string $value
     * @return self
     */
    public function setTradeType($value)
    {
        $this->obj->tradeType = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return AddOrderOldReq
     */
    public function build()
    {
        return $this->obj;
    }
}
