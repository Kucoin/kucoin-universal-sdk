<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetTradeHistoryOldItems implements Serializable
{
    /**
     * symbol
     * @var string|null $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     *
     * @var string|null $tradeId
     * @Type("string")
     * @SerializedName("tradeId")
     */
    public $tradeId;
    /**
     * The unique order id generated by the trading system
     * @var string|null $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * Counterparty order ID
     * @var string|null $counterOrderId
     * @Type("string")
     * @SerializedName("counterOrderId")
     */
    public $counterOrderId;
    /**
     * Buy or sell
     * @var string|null $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Liquidity type: taker or maker
     * @var string|null $liquidity
     * @Type("string")
     * @SerializedName("liquidity")
     */
    public $liquidity;
    /**
     *
     * @var bool|null $forceTaker
     * @Type("bool")
     * @SerializedName("forceTaker")
     */
    public $forceTaker;
    /**
     * Order Price
     * @var string|null $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Order Size
     * @var string|null $size
     * @Type("string")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Order Funds
     * @var string|null $funds
     * @Type("string")
     * @SerializedName("funds")
     */
    public $funds;
    /**
     * [Handling fees](https://www.kucoin.com/docs-new/api-5327739)
     * @var string|null $fee
     * @Type("string")
     * @SerializedName("fee")
     */
    public $fee;
    /**
     * Fee rate
     * @var string|null $feeRate
     * @Type("string")
     * @SerializedName("feeRate")
     */
    public $feeRate;
    /**
     * Currency used to calculate trading fee
     * @var string|null $feeCurrency
     * @Type("string")
     * @SerializedName("feeCurrency")
     */
    public $feeCurrency;
    /**
     * Take Profit and Stop Loss type, currently HFT does not support the Take Profit and Stop Loss type, so it is empty
     * @var string|null $stop
     * @Type("string")
     * @SerializedName("stop")
     */
    public $stop;
    /**
     * Trade type, redundancy param
     * @var string|null $tradeType
     * @Type("string")
     * @SerializedName("tradeType")
     */
    public $tradeType;
    /**
     * Specify if the order is a 'limit' order or 'market' order.
     * @var string|null $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     *
     * @var int|null $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetTradeHistoryOldItems::class,
            "json"
        );
    }
}
