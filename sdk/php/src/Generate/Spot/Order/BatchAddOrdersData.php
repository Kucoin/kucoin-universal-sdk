<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class BatchAddOrdersData implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * The unique order ID generated by the trading system, which can be used later for further actions such as canceling the order.
     * @var string|null $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * The user self-defined order ID.
     * @var string|null $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * Add order success/failure
     * @var bool $success
     * @Type("bool")
     * @SerializedName("success")
     */
    public $success;
    /**
     * Error message
     * @var string|null $failMsg
     * @Type("string")
     * @SerializedName("failMsg")
     */
    public $failMsg;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            BatchAddOrdersData::class,
            "json"
        );
    }
}
