<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class GetTradeHistoryReq implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * symbol
     * @var string|null $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * The unique order id generated by the trading system (If orderId is specified，please ignore the other query parameters)
     * @var string|null $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * specify if the order is to 'buy' or 'sell'
     * @var string|null $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * specify if the order is an 'limit' order or 'market' order.
     * @var string|null $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * The id of the last set of data from the previous batch of data. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId，which can be used as a query parameter to look up new data from the next page.
     * @var int|null $lastId
     * @Type("int")
     * @SerializedName("lastId")
     */
    public $lastId;
    /**
     * Default20，Max100
     * @var int|null $limit
     * @Type("int")
     * @SerializedName("limit")
     */
    public $limit = 20;
    /**
     * Start time (milisecond)
     * @var int|null $startAt
     * @Type("int")
     * @SerializedName("startAt")
     */
    public $startAt;
    /**
     * End time (milisecond)
     * @var int|null $endAt
     * @Type("int")
     * @SerializedName("endAt")
     */
    public $endAt;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetTradeHistoryReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `GetTradeHistoryReq` class.
     * The builder pattern allows step-by-step construction of a `GetTradeHistoryReq` object.
     * @return GetTradeHistoryReqBuilder
     */
    public static function builder()
    {
        return new GetTradeHistoryReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `GetTradeHistoryReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class GetTradeHistoryReqBuilder
{
    /**
     * @var GetTradeHistoryReq $obj
     */
    private $obj;

    public function __construct(GetTradeHistoryReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * @param string $value symbol
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * @param string $value The unique order id generated by the trading system (If orderId is specified，please ignore the other query parameters)
     * @return self
     */
    public function setOrderId($value)
    {
        $this->obj->orderId = $value;
        return $this;
    }

    /**
     * @param string $value specify if the order is to 'buy' or 'sell'
     * @return self
     */
    public function setSide($value)
    {
        $this->obj->side = $value;
        return $this;
    }

    /**
     * @param string $value specify if the order is an 'limit' order or 'market' order.
     * @return self
     */
    public function setType($value)
    {
        $this->obj->type = $value;
        return $this;
    }

    /**
     * @param int $value The id of the last set of data from the previous batch of data. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId，which can be used as a query parameter to look up new data from the next page.
     * @return self
     */
    public function setLastId($value)
    {
        $this->obj->lastId = $value;
        return $this;
    }

    /**
     * @param int $value Default20，Max100
     * @return self
     */
    public function setLimit($value)
    {
        $this->obj->limit = $value;
        return $this;
    }

    /**
     * @param int $value Start time (milisecond)
     * @return self
     */
    public function setStartAt($value)
    {
        $this->obj->startAt = $value;
        return $this;
    }

    /**
     * @param int $value End time (milisecond)
     * @return self
     */
    public function setEndAt($value)
    {
        $this->obj->endAt = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return GetTradeHistoryReq
     */
    public function build()
    {
        return $this->obj;
    }
}
