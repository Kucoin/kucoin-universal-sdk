<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class GetPrivateTokenInstanceServers implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Websocket domain URL. It is recommended to use a dynamic URL, as the URL may change.
     * @var string $endpoint
     * @Type("string")
     * @SerializedName("endpoint")
     */
    public $endpoint;
    /**
     * Whether to encrypt. Currently only supports wss, not ws
     * @var bool $encrypt
     * @Type("bool")
     * @SerializedName("encrypt")
     */
    public $encrypt;
    /**
     * Network Protocol
     * - 'websocket' : Websocket
     * @var string $protocol
     * @Type("string")
     * @SerializedName("protocol")
     */
    public $protocol;
    /**
     * Recommended ping interval (milliseconds)
     * @var int $pingInterval
     * @Type("int")
     * @SerializedName("pingInterval")
     */
    public $pingInterval;
    /**
     * Heartbeat timeout (milliseconds)
     * @var int $pingTimeout
     * @Type("int")
     * @SerializedName("pingTimeout")
     */
    public $pingTimeout;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetPrivateTokenInstanceServers::class,
            "json"
        );
    }
}
