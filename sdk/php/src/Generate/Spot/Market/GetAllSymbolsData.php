<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class GetAllSymbolsData implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Unique code of a symbol; it will not change after renaming
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Name of trading pairs, it will change after renaming
     * @var string $name
     * @Type("string")
     * @SerializedName("name")
     */
    public $name;
    /**
     * Base currency, e.g. BTC.
     * @var string $baseCurrency
     * @Type("string")
     * @SerializedName("baseCurrency")
     */
    public $baseCurrency;
    /**
     * Quote currency, e.g. USDT.
     * @var string $quoteCurrency
     * @Type("string")
     * @SerializedName("quoteCurrency")
     */
    public $quoteCurrency;
    /**
     * The currency of charged fees.
     * @var string $feeCurrency
     * @Type("string")
     * @SerializedName("feeCurrency")
     */
    public $feeCurrency;
    /**
     * The trading market.
     * @var string $market
     * @Type("string")
     * @SerializedName("market")
     */
    public $market;
    /**
     * The minimum order quantity required to place an order.
     * @var string $baseMinSize
     * @Type("string")
     * @SerializedName("baseMinSize")
     */
    public $baseMinSize;
    /**
     * The minimum order funds required to place a market order.
     * @var string $quoteMinSize
     * @Type("string")
     * @SerializedName("quoteMinSize")
     */
    public $quoteMinSize;
    /**
     * The maximum order size required to place an order.
     * @var string $baseMaxSize
     * @Type("string")
     * @SerializedName("baseMaxSize")
     */
    public $baseMaxSize;
    /**
     * The maximum order funds required to place a market order.
     * @var string $quoteMaxSize
     * @Type("string")
     * @SerializedName("quoteMaxSize")
     */
    public $quoteMaxSize;
    /**
     * Quantity increment: The quantity for an order must be a positive integer multiple of this increment. Here, the size refers to the quantity of the base currency for the order. For example, for the ETH-USDT trading pair, if the baseIncrement is 0.0000001, the order quantity can be 1.0000001 but not 1.00000001.
     * @var string $baseIncrement
     * @Type("string")
     * @SerializedName("baseIncrement")
     */
    public $baseIncrement;
    /**
     * Quote increment: The funds for a market order must be a positive integer multiple of this increment. The funds refer to the quote currency amount. For example, for the ETH-USDT trading pair, if the quoteIncrement is 0.000001, the amount of USDT for the order can be 3000.000001 but not 3000.0000001.
     * @var string $quoteIncrement
     * @Type("string")
     * @SerializedName("quoteIncrement")
     */
    public $quoteIncrement;
    /**
     * Price increment: The price of an order must be a positive integer multiple of this increment. For example, for the ETH-USDT trading pair, if the priceIncrement is 0.01, the order price can be 3000.01 but not 3000.001.  Specifies the min. order price as well as the price increment.This also applies to quote currency.
     * @var string $priceIncrement
     * @Type("string")
     * @SerializedName("priceIncrement")
     */
    public $priceIncrement;
    /**
     * Threshold for price protection
     * @var string $priceLimitRate
     * @Type("string")
     * @SerializedName("priceLimitRate")
     */
    public $priceLimitRate;
    /**
     * The minimum trading amounts
     * @var string $minFunds
     * @Type("string")
     * @SerializedName("minFunds")
     */
    public $minFunds;
    /**
     * Available for margin or not.
     * @var bool $isMarginEnabled
     * @Type("bool")
     * @SerializedName("isMarginEnabled")
     */
    public $isMarginEnabled;
    /**
     * Available for transaction or not.
     * @var bool $enableTrading
     * @Type("bool")
     * @SerializedName("enableTrading")
     */
    public $enableTrading;
    /**
     * [Fee Type](https://www.kucoin.com/vip/privilege)
     * @var int $feeCategory
     * @Type("int")
     * @SerializedName("feeCategory")
     */
    public $feeCategory;
    /**
     * The maker fee coefficient. The actual fee needs to be multiplied by this coefficient to get the final fee. Most currencies have a coefficient of 1. If set to 0, it means no fee
     * @var string $makerFeeCoefficient
     * @Type("string")
     * @SerializedName("makerFeeCoefficient")
     */
    public $makerFeeCoefficient;
    /**
     * The taker fee coefficient. The actual fee needs to be multiplied by this coefficient to get the final fee. Most currencies have a coefficient of 1. If set to 0, it means no fee
     * @var string $takerFeeCoefficient
     * @Type("string")
     * @SerializedName("takerFeeCoefficient")
     */
    public $takerFeeCoefficient;
    /**
     * Whether it is a [Special Treatment](https://www.kucoin.com/legal/special-treatment) symbol
     * @var bool $st
     * @Type("bool")
     * @SerializedName("st")
     */
    public $st;
    /**
     * The [call auction](https://www.kucoin.com/support/40999744334105) status returns true/false
     * @var bool $callauctionIsEnabled
     * @Type("bool")
     * @SerializedName("callauctionIsEnabled")
     */
    public $callauctionIsEnabled;
    /**
     * The lowest price declared in the call auction
     * @var string $callauctionPriceFloor
     * @Type("string")
     * @SerializedName("callauctionPriceFloor")
     */
    public $callauctionPriceFloor;
    /**
     * The highest bid price in the call auction
     * @var string $callauctionPriceCeiling
     * @Type("string")
     * @SerializedName("callauctionPriceCeiling")
     */
    public $callauctionPriceCeiling;
    /**
     * The first phase of the call auction starts at (Allow add orders, allow cancel orders)
     * @var int $callauctionFirstStageStartTime
     * @Type("int")
     * @SerializedName("callauctionFirstStageStartTime")
     */
    public $callauctionFirstStageStartTime;
    /**
     * The second phase of the call auction starts at (Allow add orders, don't allow cancel orders)
     * @var int $callauctionSecondStageStartTime
     * @Type("int")
     * @SerializedName("callauctionSecondStageStartTime")
     */
    public $callauctionSecondStageStartTime;
    /**
     * The third phase of the call auction starts at (Don't allow add orders, don't allow cancel orders)
     * @var int $callauctionThirdStageStartTime
     * @Type("int")
     * @SerializedName("callauctionThirdStageStartTime")
     */
    public $callauctionThirdStageStartTime;
    /**
     * Official opening time (end time of the third phase of call auction)
     * @var int $tradingStartTime
     * @Type("int")
     * @SerializedName("tradingStartTime")
     */
    public $tradingStartTime;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetAllSymbolsData::class,
            "json"
        );
    }
}
