<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class Get24hrStatsResp implements Response
{
    /**
     * timestamp
     * @var int $time
     * @Type("int")
     * @SerializedName("time")
     */
    public $time;
    /**
     * Symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Best bid price
     * @var string $buy
     * @Type("string")
     * @SerializedName("buy")
     */
    public $buy;
    /**
     * Best ask price
     * @var string $sell
     * @Type("string")
     * @SerializedName("sell")
     */
    public $sell;
    /**
     * 24h change rate
     * @var string $changeRate
     * @Type("string")
     * @SerializedName("changeRate")
     */
    public $changeRate;
    /**
     * 24h change price
     * @var string $changePrice
     * @Type("string")
     * @SerializedName("changePrice")
     */
    public $changePrice;
    /**
     * Highest price in 24h
     * @var string $high
     * @Type("string")
     * @SerializedName("high")
     */
    public $high;
    /**
     * Lowest price in 24h
     * @var string $low
     * @Type("string")
     * @SerializedName("low")
     */
    public $low;
    /**
     * 24h volume, executed based on base currency
     * @var string $vol
     * @Type("string")
     * @SerializedName("vol")
     */
    public $vol;
    /**
     * 24h traded amount
     * @var string $volValue
     * @Type("string")
     * @SerializedName("volValue")
     */
    public $volValue;
    /**
     * Last traded price
     * @var string $last
     * @Type("string")
     * @SerializedName("last")
     */
    public $last;
    /**
     * Average trading price in the last 24 hours
     * @var string $averagePrice
     * @Type("string")
     * @SerializedName("averagePrice")
     */
    public $averagePrice;
    /**
     * Basic Taker Fee
     * @var string $takerFeeRate
     * @Type("string")
     * @SerializedName("takerFeeRate")
     */
    public $takerFeeRate;
    /**
     * Basic Maker Fee
     * @var string $makerFeeRate
     * @Type("string")
     * @SerializedName("makerFeeRate")
     */
    public $makerFeeRate;
    /**
     * The taker fee coefficient. The actual fee needs to be multiplied by this coefficient to get the final fee. Most currencies have a coefficient of 1. If set to 0, it means no fee
     * @var string $takerCoefficient
     * @Type("string")
     * @SerializedName("takerCoefficient")
     */
    public $takerCoefficient;
    /**
     * The maker fee coefficient. The actual fee needs to be multiplied by this coefficient to get the final fee. Most currencies have a coefficient of 1. If set to 0, it means no fee
     * @var string $makerCoefficient
     * @Type("string")
     * @SerializedName("makerCoefficient")
     */
    public $makerCoefficient;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize($json, Get24hrStatsResp::class, "json");
    }
}
