<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetCurrencyChains implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Chain name of currency
     * @var string $chainName
     * @Type("string")
     * @SerializedName("chainName")
     */
    public $chainName;
    /**
     * Minimum withdrawal amount
     * @var string $withdrawalMinSize
     * @Type("string")
     * @SerializedName("withdrawalMinSize")
     */
    public $withdrawalMinSize;
    /**
     * Minimum deposit amount
     * @var string $depositMinSize
     * @Type("string")
     * @SerializedName("depositMinSize")
     */
    public $depositMinSize;
    /**
     * Withdraw fee rate
     * @var string $withdrawFeeRate
     * @Type("string")
     * @SerializedName("withdrawFeeRate")
     */
    public $withdrawFeeRate;
    /**
     * Minimum fees charged for withdrawal
     * @var string $withdrawalMinFee
     * @Type("string")
     * @SerializedName("withdrawalMinFee")
     */
    public $withdrawalMinFee;
    /**
     * Withdrawal support or not
     * @var bool $isWithdrawEnabled
     * @Type("bool")
     * @SerializedName("isWithdrawEnabled")
     */
    public $isWithdrawEnabled;
    /**
     * Deposit support or not
     * @var bool $isDepositEnabled
     * @Type("bool")
     * @SerializedName("isDepositEnabled")
     */
    public $isDepositEnabled;
    /**
     * Number of block confirmations
     * @var int $confirms
     * @Type("int")
     * @SerializedName("confirms")
     */
    public $confirms;
    /**
     * The number of blocks (confirmations) for advance on-chain verification
     * @var int $preConfirms
     * @Type("int")
     * @SerializedName("preConfirms")
     */
    public $preConfirms;
    /**
     * Contract address
     * @var string $contractAddress
     * @Type("string")
     * @SerializedName("contractAddress")
     */
    public $contractAddress;
    /**
     * Withdrawal precision bit, indicating the maximum supported length after the decimal point of the withdrawal amount
     * @var int $withdrawPrecision
     * @Type("int")
     * @SerializedName("withdrawPrecision")
     */
    public $withdrawPrecision;
    /**
     * Maximum amount of single withdrawal
     * @var float $maxWithdraw
     * @Type("float")
     * @SerializedName("maxWithdraw")
     */
    public $maxWithdraw;
    /**
     * Maximum amount of single deposit (only applicable to Lightning Network)
     * @var string $maxDeposit
     * @Type("string")
     * @SerializedName("maxDeposit")
     */
    public $maxDeposit;
    /**
     * Need for memo/tag or not
     * @var bool $needTag
     * @Type("bool")
     * @SerializedName("needTag")
     */
    public $needTag;
    /**
     * Chain id of currency
     * @var string $chainId
     * @Type("string")
     * @SerializedName("chainId")
     */
    public $chainId;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetCurrencyChains::class,
            "json"
        );
    }
}
