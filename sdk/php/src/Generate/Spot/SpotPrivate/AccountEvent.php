<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\SpotPrivate;
use JMS\Serializer\Serializer;
use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketMessageCallback;
use KuCoin\UniversalSDK\Model\WsMessage;

class AccountEvent implements Response
{
    /**
     * Account ID
     * @var string $accountId
     * @Type("string")
     * @SerializedName("accountId")
     */
    public $accountId;
    /**
     * Funds available to withdraw or trade
     * @var string $available
     * @Type("string")
     * @SerializedName("available")
     */
    public $available;
    /**
     * The change of available Funds
     * @var string $availableChange
     * @Type("string")
     * @SerializedName("availableChange")
     */
    public $availableChange;
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Funds on hold (not available for use)
     * @var string $hold
     * @Type("string")
     * @SerializedName("hold")
     */
    public $hold;
    /**
     * The change of hold funds
     * @var string $holdChange
     * @Type("string")
     * @SerializedName("holdChange")
     */
    public $holdChange;
    /**
     *
     * @var AccountRelationContext $relationContext
     * @Type("KuCoin\UniversalSDK\Generate\Spot\SpotPrivate\AccountRelationContext")
     * @SerializedName("relationContext")
     */
    public $relationContext;
    /**
     * Relation event
     * @var string $relationEvent
     * @Type("string")
     * @SerializedName("relationEvent")
     */
    public $relationEvent;
    /**
     * Relation event Id
     * @var string $relationEventId
     * @Type("string")
     * @SerializedName("relationEventId")
     */
    public $relationEventId;
    /**
     *
     * @var string $time
     * @Type("string")
     * @SerializedName("time")
     */
    public $time;
    /**
     * Total balance = available + hold
     * @var string $total
     * @Type("string")
     * @SerializedName("total")
     */
    public $total;

    private function __construct() {}

    /**
     * common response
     * @Exclude()
     * @var WsMessage $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }
    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, AccountEvent::class, "json");
    }

    /**
     * @param callable $callback function(string $topic, string $subject, AccountEvent $data): void
     */
    public static function createCallback(
        callable $callback
    ): AccountEventCallbackWrapper {
        return new AccountEventCallbackWrapper($callback);
    }
}

class AccountEventCallbackWrapper implements WebSocketMessageCallback
{
    /**
     * @var callable
     */
    private $callback;

    /**
     * @param callable $callback function(string $topic, string $subject, AccountEvent $data): void
     */
    public function __construct(callable $callback)
    {
        $this->callback = $callback;
    }

    public function onMessage(WsMessage $msg, Serializer $serializer)
    {
        $event = AccountEvent::jsonDeserialize(
            $serializer->serialize($msg->rawData, "json"),
            $serializer
        );
        $event->setCommonResponse($msg);
        call_user_func($this->callback, $msg->topic, $msg->subject, $event);
    }
}
