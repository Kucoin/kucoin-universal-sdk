<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\SpotPrivate;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketMessageCallback;
use KuCoin\UniversalSDK\Model\WsMessage;
use JMS\Serializer\Serializer;
use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;

class StopOrderEvent implements Response
{
    /**
     * Order created time (milliseconds)
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;
    /**
     * The unique order id generated by the trading system
     * @var string $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * Price
     * @var string $orderPrice
     * @Type("string")
     * @SerializedName("orderPrice")
     */
    public $orderPrice;
    /**
     * User-specified order type
     * @var string $orderType
     * @Type("string")
     * @SerializedName("orderType")
     */
    public $orderType;
    /**
     * buy or sell
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * User-specified order size
     * @var string $size
     * @Type("string")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Order type: loss: stop loss order, oco: oco order
     * @var string $stop
     * @Type("string")
     * @SerializedName("stop")
     */
    public $stop;
    /**
     * Stop Price
     * @var string $stopPrice
     * @Type("string")
     * @SerializedName("stopPrice")
     */
    public $stopPrice;
    /**
     * symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * The type of trading: TRADE (Spot), MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin).
     * @var string $tradeType
     * @Type("string")
     * @SerializedName("tradeType")
     */
    public $tradeType;
    /**
     * Push time (nanoseconds)
     * @var int $ts
     * @Type("int")
     * @SerializedName("ts")
     */
    public $ts;
    /**
     * Order Type
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;

    private function __construct() {}

    /**
     * common response
     * @Exclude()
     * @var WsMessage $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }
    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, StopOrderEvent::class, "json");
    }

    /**
     * @param callable $callback function(string $topic, string $subject, StopOrderEvent $data): void
     */
    public static function createCallback(
        callable $callback
    ): StopOrderEventCallbackWrapper {
        return new StopOrderEventCallbackWrapper($callback);
    }
}

class StopOrderEventCallbackWrapper implements WebSocketMessageCallback
{
    /**
     * @var callable
     */
    private $callback;

    /**
     * @param callable $callback function(string $topic, string $subject, StopOrderEvent $data): void
     */
    public function __construct(callable $callback)
    {
        $this->callback = $callback;
    }

    public function onMessage(WsMessage $msg, Serializer $serializer)
    {
        $event = StopOrderEvent::jsonDeserialize(
            $serializer->serialize($msg->rawData, "json"),
            $serializer
        );
        $event->setCommonResponse($msg);
        call_user_func($this->callback, $msg->topic, $msg->subject, $event);
    }
}
