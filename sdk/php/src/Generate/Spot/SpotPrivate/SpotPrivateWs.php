<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Spot\SpotPrivate;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketService;

interface SpotPrivateWs
{
    /**
     * Get Account Balance
     * You will receive this message when an account balance changes. The message contains the details of the change.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, AccountEvent $data): void
     */
    public function account(callable $callback): string;

    /**
     * Get Order(V1)
     * This topic will push all change events of your orders.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, OrderV1Event $data): void
     */
    public function orderV1(callable $callback): string;

    /**
     * Get Order(V2)
     * This topic will push all change events of your orders. Compared with v1, v2 adds an Order Status: \&quot;new\&quot;, there is no difference in push speed
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, OrderV2Event $data): void
     */
    public function orderV2(callable $callback): string;

    /**
     * Get Stop Order
     * This topic will push all change events of your stop orders.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, StopOrderEvent $data): void
     */
    public function stopOrder(callable $callback): string;

    /**
     * Unsubscribe from topics
     */
    public function unSubscribe(string $id);

    /**
     * Start websocket
     */
    public function start();

    /**
     * Stop websocket
     */
    public function stop();
}

class SpotPrivateWsImpl implements SpotPrivateWs
{
    /**@var WebSocketService $wsService*/
    private $wsService;

    public function __construct(WebSocketService $wsService)
    {
        $this->wsService = $wsService;
    }

    public function account(callable $callback): string
    {
        $topicPrefix = "/account/balance";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new AccountEventCallbackWrapper($callback)
        );
    }

    public function orderV1(callable $callback): string
    {
        $topicPrefix = "/spotMarket/tradeOrders";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new OrderV1EventCallbackWrapper($callback)
        );
    }

    public function orderV2(callable $callback): string
    {
        $topicPrefix = "/spotMarket/tradeOrdersV2";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new OrderV2EventCallbackWrapper($callback)
        );
    }

    public function stopOrder(callable $callback): string
    {
        $topicPrefix = "/spotMarket/advancedOrders";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new StopOrderEventCallbackWrapper($callback)
        );
    }

    public function unSubscribe(string $id)
    {
        return $this->wsService->unsubscribe($id);
    }

    public function start()
    {
        return $this->wsService->start();
    }

    public function stop()
    {
        return $this->wsService->stop();
    }
}
