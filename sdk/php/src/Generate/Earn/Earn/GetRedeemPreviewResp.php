<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Earn\Earn;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetRedeemPreviewResp implements Response
{
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Expected redemption amount
     * @var string $redeemAmount
     * @Type("string")
     * @SerializedName("redeemAmount")
     */
    public $redeemAmount;
    /**
     * Penalty interest amount, incurred for early redemption of fixed-term products
     * @var string $penaltyInterestAmount
     * @Type("string")
     * @SerializedName("penaltyInterestAmount")
     */
    public $penaltyInterestAmount;
    /**
     * Redemption waiting period (days)
     * @var int $redeemPeriod
     * @Type("int")
     * @SerializedName("redeemPeriod")
     */
    public $redeemPeriod;
    /**
     * Expected deliver time (milliseconds)
     * @var int $deliverTime
     * @Type("int")
     * @SerializedName("deliverTime")
     */
    public $deliverTime;
    /**
     * Whether manual redemption is possible
     * @var bool $manualRedeemable
     * @Type("bool")
     * @SerializedName("manualRedeemable")
     */
    public $manualRedeemable;
    /**
     * Whether the entire holding must be redeemed, required for early redemption of fixed-term products
     * @var bool $redeemAll
     * @Type("bool")
     * @SerializedName("redeemAll")
     */
    public $redeemAll;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetRedeemPreviewResp::class,
            "json"
        );
    }
}
