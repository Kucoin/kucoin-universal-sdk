<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Margin\MarginPublic;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketService;
use React\Promise\PromiseInterface;

interface MarginPublicWs
{
    /**
     * Index Price
     * Subscribe to this topic to get the index price for margin trading. The following ticker symbols are supported: List of currently supported symbols.
     * push frequency: once every 1s
     * @param callable $callback function(string $topic, string $subject, IndexPriceEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function indexPrice(
        array $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Mark Price
     * Subscribe to this topic to get the mark price for margin trading. The following ticker symbols are supported: List of currently supported symbols
     * push frequency: once every 1s
     * @param callable $callback function(string $topic, string $subject, MarkPriceEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function markPrice(
        array $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * Unsubscribe from topics
     */
    public function unSubscribe(string $id);

    /**
     * Start websocket
     */
    public function start();

    /**
     * Stop websocket
     */
    public function stop();
}

class MarginPublicWsImpl implements MarginPublicWs
{
    /**@var WebSocketService $wsService*/
    private $wsService;

    public function __construct(WebSocketService $wsService)
    {
        $this->wsService = $wsService;
    }

    public function indexPrice(
        array $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/indicator/index";

        $args = $symbol;

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new IndexPriceEventCallbackWrapper($callback)
        );
    }

    public function markPrice(
        array $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/indicator/markPrice";

        $args = $symbol;

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new MarkPriceEventCallbackWrapper($callback)
        );
    }

    public function unSubscribe(string $id)
    {
        return $this->wsService->unsubscribe($id);
    }

    public function start()
    {
        return $this->wsService->start();
    }

    public function stop()
    {
        return $this->wsService->stop();
    }
}
