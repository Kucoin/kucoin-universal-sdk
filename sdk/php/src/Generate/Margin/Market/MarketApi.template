
    /**
    * getCrossMarginSymbols
    * Get Symbols - Cross Margin
    * /api/v3/margin/symbols
    */
    public function testGetCrossMarginSymbols() {
        $builder = GetCrossMarginSymbolsReq::builder();
        $builder->setSymbol(?);
        $req = $builder->build();
        $resp = $this->api->getCrossMarginSymbols($req);
        self::assertNotNull($resp->timestamp);
        foreach($resp->items as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->name);
            self::assertNotNull($item->enableTrading);
            self::assertNotNull($item->market);
            self::assertNotNull($item->baseCurrency);
            self::assertNotNull($item->quoteCurrency);
            self::assertNotNull($item->baseIncrement);
            self::assertNotNull($item->baseMinSize);
            self::assertNotNull($item->quoteIncrement);
            self::assertNotNull($item->quoteMinSize);
            self::assertNotNull($item->baseMaxSize);
            self::assertNotNull($item->quoteMaxSize);
            self::assertNotNull($item->priceIncrement);
            self::assertNotNull($item->feeCurrency);
            self::assertNotNull($item->priceLimitRate);
            self::assertNotNull($item->minFunds);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getETFInfo
    * Get ETF Info
    * /api/v3/etf/info
    */
    public function testGetETFInfo() {
        $builder = GetETFInfoReq::builder();
        $builder->setCurrency(?);
        $req = $builder->build();
        $resp = $this->api->getETFInfo($req);
        foreach($resp->data as $item) {
            self::assertNotNull($item->currency);
            self::assertNotNull($item->netAsset);
            self::assertNotNull($item->targetLeverage);
            self::assertNotNull($item->actualLeverage);
            self::assertNotNull($item->issuedSize);
            self::assertNotNull($item->basket);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getMarkPriceDetail
    * Get Mark Price Detail
    * /api/v1/mark-price/{symbol}/current
    */
    public function testGetMarkPriceDetail() {
        $builder = GetMarkPriceDetailReq::builder();
        $builder->setSymbol(?);
        $req = $builder->build();
        $resp = $this->api->getMarkPriceDetail($req);
        self::assertNotNull($resp->symbol);
        self::assertNotNull($resp->timePoint);
        self::assertNotNull($resp->value);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getMarginConfig
    * Get Margin Config
    * /api/v1/margin/config
    */
    public function testGetMarginConfig() {
        $resp = $this->api->getMarginConfig();
        foreach($resp->currencyList as $item) {
        }

        self::assertNotNull($resp->maxLeverage);
        self::assertNotNull($resp->warningDebtRatio);
        self::assertNotNull($resp->liqDebtRatio);
        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getMarkPriceList
    * Get Mark Price List
    * /api/v3/mark-price/all-symbols
    */
    public function testGetMarkPriceList() {
        $resp = $this->api->getMarkPriceList();
        foreach($resp->data as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->timePoint);
            self::assertNotNull($item->value);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

    /**
    * getIsolatedMarginSymbols
    * Get Symbols - Isolated Margin
    * /api/v1/isolated/symbols
    */
    public function testGetIsolatedMarginSymbols() {
        $resp = $this->api->getIsolatedMarginSymbols();
        foreach($resp->data as $item) {
            self::assertNotNull($item->symbol);
            self::assertNotNull($item->symbolName);
            self::assertNotNull($item->baseCurrency);
            self::assertNotNull($item->quoteCurrency);
            self::assertNotNull($item->maxLeverage);
            self::assertNotNull($item->flDebtRatio);
            self::assertNotNull($item->tradeEnable);
            self::assertNotNull($item->autoRenewMaxDebtRatio);
            self::assertNotNull($item->baseBorrowEnable);
            self::assertNotNull($item->quoteBorrowEnable);
            self::assertNotNull($item->baseTransferInEnable);
            self::assertNotNull($item->quoteTransferInEnable);
            self::assertNotNull($item->baseBorrowCoefficient);
            self::assertNotNull($item->quoteBorrowCoefficient);
        }

        Logger::info($resp->jsonSerialize($this->serializer));
    }

