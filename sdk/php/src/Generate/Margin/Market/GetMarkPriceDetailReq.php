<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Margin\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetMarkPriceDetailReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [
        "symbol" => "symbol",
    ];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * symbol
     * @var string|null $symbol
     * @Type("string")
     * @SerializedName("symbol")
     * @Exclude()
     */
    public $symbol;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetMarkPriceDetailReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `GetMarkPriceDetailReq` class.
     * The builder pattern allows step-by-step construction of a `GetMarkPriceDetailReq` object.
     * @return GetMarkPriceDetailReqBuilder
     */
    public static function builder()
    {
        return new GetMarkPriceDetailReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `GetMarkPriceDetailReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class GetMarkPriceDetailReqBuilder
{
    /**
     * @var GetMarkPriceDetailReq $obj
     */
    private $obj;

    public function __construct(GetMarkPriceDetailReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * symbol
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return GetMarkPriceDetailReq
     */
    public function build()
    {
        return $this->obj;
    }
}
