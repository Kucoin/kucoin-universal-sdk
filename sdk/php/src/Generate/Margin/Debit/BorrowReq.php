<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Margin\Debit;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class BorrowReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Borrow amount
     * @var float $size
     * @Type("float")
     * @SerializedName("size")
     */
    public $size;
    /**
     * timeInForce: IOC, FOK
     * - 'IOC' :
     * - 'FOK' :
     * @var string $timeInForce
     * @Type("string")
     * @SerializedName("timeInForce")
     */
    public $timeInForce;
    /**
     * symbol, mandatory for isolated margin account
     * @var string|null $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * true-isolated, false-cross; default is false
     * @var bool|null $isIsolated
     * @Type("bool")
     * @SerializedName("isIsolated")
     */
    public $isIsolated = false;
    /**
     * true: high frequency borrowing, false: low frequency borrowing; default false
     * @var bool|null $isHf
     * @Type("bool")
     * @SerializedName("isHf")
     */
    public $isHf = false;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize($json, BorrowReq::class, "json");
    }
    /**
     * Creates a new instance of the `BorrowReq` class.
     * The builder pattern allows step-by-step construction of a `BorrowReq` object.
     * @return BorrowReqBuilder
     */
    public static function builder()
    {
        return new BorrowReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `BorrowReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class BorrowReqBuilder
{
    /**
     * @var BorrowReq $obj
     */
    private $obj;

    public function __construct(BorrowReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * currency
     * @param string $value
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * Borrow amount
     * @param float $value
     * @return self
     */
    public function setSize($value)
    {
        $this->obj->size = $value;
        return $this;
    }

    /**
     * timeInForce: IOC, FOK
     * - 'IOC' :
     * - 'FOK' :
     * @param string $value
     * @return self
     */
    public function setTimeInForce($value)
    {
        $this->obj->timeInForce = $value;
        return $this;
    }

    /**
     * symbol, mandatory for isolated margin account
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * true-isolated, false-cross; default is false
     * @param bool $value
     * @return self
     */
    public function setIsIsolated($value)
    {
        $this->obj->isIsolated = $value;
        return $this;
    }

    /**
     * true: high frequency borrowing, false: low frequency borrowing; default false
     * @param bool $value
     * @return self
     */
    public function setIsHf($value)
    {
        $this->obj->isHf = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return BorrowReq
     */
    public function build()
    {
        return $this->obj;
    }
}
