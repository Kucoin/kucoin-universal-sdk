<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Margin\MarginPrivate;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketService;
use React\Promise\PromiseInterface;

class MarginPrivateWsImpl implements MarginPrivateWs
{
    /**@var WebSocketService $wsService*/
    private $wsService;

    public function __construct(WebSocketService $wsService)
    {
        $this->wsService = $wsService;
    }

    public function crossMarginPosition(
        callable $onData,
        ?callable $onSuccess = null,
        ?callable $onError = null
    ): PromiseInterface {
        $topicPrefix = "/margin/position";

        $args = [];

        return $this->wsService
            ->subscribe(
                $topicPrefix,
                $args,
                CrossMarginPositionEvent::createCallback($onData)
            )
            ->then(
                function ($id) use ($onSuccess) {
                    if ($onSuccess) {
                        $onSuccess($id);
                    }
                    return $id;
                },
                function ($e) use ($onError) {
                    if ($onError) {
                        $onError($e);
                    }
                    throw $e;
                }
            );
    }

    public function isolatedMarginPosition(
        string $symbol,
        callable $onData,
        ?callable $onSuccess = null,
        ?callable $onError = null
    ): PromiseInterface {
        $topicPrefix = "/margin/isolatedPosition";

        $args = [$symbol];

        return $this->wsService
            ->subscribe(
                $topicPrefix,
                $args,
                IsolatedMarginPositionEvent::createCallback($onData)
            )
            ->then(
                function ($id) use ($onSuccess) {
                    if ($onSuccess) {
                        $onSuccess($id);
                    }
                    return $id;
                },
                function ($e) use ($onError) {
                    if ($onError) {
                        $onError($e);
                    }
                    throw $e;
                }
            );
    }

    public function unSubscribe(string $id): PromiseInterface
    {
        return $this->wsService->unsubscribe($id);
    }

    public function start(): PromiseInterface
    {
        return $this->wsService->start();
    }

    public function stop(): PromiseInterface
    {
        return $this->wsService->stop();
    }
}
