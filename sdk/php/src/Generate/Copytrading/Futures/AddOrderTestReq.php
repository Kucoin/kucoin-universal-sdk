<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Copytrading\Futures;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class AddOrderTestReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Unique order ID created by users to identify their orders. The maximum length cannot exceed 40, e.g. UUID only allows numbers, characters, underline(_), and separator (-).
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * Specify if the order is to 'buy' or 'sell'.
     * - 'buy' :
     * - 'sell' :
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Used to calculate the margin to be frozen for the order. If you are to close the position, this parameter is not required.
     * @var int $leverage
     * @Type("int")
     * @SerializedName("leverage")
     */
    public $leverage;
    /**
     * Specify if the order is a 'limit' order or 'market' order
     * - 'limit' :
     * - 'market' :
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type = "limit";
    /**
     * Either 'down' or 'up'.  If stop is used, parameter stopPrice and stopPriceType also need to be provided.
     * - 'down' : Triggers when the price reaches or goes below the stopPrice.
     * - 'up' : Triggers when the price reaches or goes above the stopPrice.
     * @var string|null $stop
     * @Type("string")
     * @SerializedName("stop")
     */
    public $stop;
    /**
     * Either 'TP' or 'MP' need to be defined if stop is specified.
     * - 'TP' : TP for trade price, The last trade price is the last price at which an order was filled. This price can be found in the latest match message.
     * - 'MP' : MP for mark price. The mark price can be obtained through relevant OPEN API for index services.
     * @var string|null $stopPriceType
     * @Type("string")
     * @SerializedName("stopPriceType")
     */
    public $stopPriceType;
    /**
     * Needs to be defined if stop is specified.
     * @var string|null $stopPrice
     * @Type("string")
     * @SerializedName("stopPrice")
     */
    public $stopPrice;
    /**
     * A mark to reduce the position size only. Set to false by default. Need to set the position size when reduceOnly is true. If set to true, only the orders reducing the position size will be executed. If the reduce-only order size exceeds the position size, the extra size will be canceled.
     * @var bool|null $reduceOnly
     * @Type("bool")
     * @SerializedName("reduceOnly")
     */
    public $reduceOnly = false;
    /**
     * A mark to close the position. Set to false by default. If closeOrder is set to true, the system will close the position and the position size will become 0. Side, Size and Leverage fields can be left empty and the system will determine the side and size automatically.
     * @var bool|null $closeOrder
     * @Type("bool")
     * @SerializedName("closeOrder")
     */
    public $closeOrder = false;
    /**
     * Margin mode: ISOLATED, default: ISOLATED
     * - 'ISOLATED' : Isolated Margin
     * @var string|null $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode = "ISOLATED";
    /**
     * Required for type is 'limit' order, indicating the operating price
     * @var string|null $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Order size (lot), must be a positive integer. The quantity unit of coin-swap contracts is size (lot), and other units are not supported.
     * @var int $size
     * @Type("int")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Optional for type is 'limit' order, [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading, default is GTC
     * - 'GTC' : order remains open on the order book until canceled. This is the default type if the field is left empty.
     * - 'IOC' : being matched or not, the remaining size of the order will be instantly canceled instead of entering the order book.
     * @var string|null $timeInForce
     * @Type("string")
     * @SerializedName("timeInForce")
     */
    public $timeInForce = "GTC";
    /**
     * Optional for type is 'limit' order, post only flag, invalid when timeInForce is IOC. When postOnly is true, not allowed to choose hidden or iceberg. The post-only flag ensures that the trader always pays the maker fee and provides liquidity to the order book. If any part of the order is going to pay taker fees, the order will be fully rejected.
     * @var bool|null $postOnly
     * @Type("bool")
     * @SerializedName("postOnly")
     */
    public $postOnly = false;
    /**
     * Optional for type is 'limit' order, orders not displaying in order book. When hidden is chosen, choosing postOnly is not allowed.
     * @var bool|null $hidden
     * @Type("bool")
     * @SerializedName("hidden")
     */
    public $hidden = false;
    /**
     * Optional for type is 'limit' order, Only visible portion of the order is displayed in the order book. When iceberg is chose, choosing postOnly is not allowed.
     * @var bool|null $iceberg
     * @Type("bool")
     * @SerializedName("iceberg")
     */
    public $iceberg = false;
    /**
     * Optional for type is 'limit' order, the maximum visible size of an iceberg order. Please place order in size (lots). The units of qty (base currency) and valueQty (value) are not supported. Need to be defined if iceberg is specified.
     * @var string|null $visibleSize
     * @Type("string")
     * @SerializedName("visibleSize")
     */
    public $visibleSize;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, AddOrderTestReq::class, "json");
    }
    /**
     * Creates a new instance of the `AddOrderTestReq` class.
     * The builder pattern allows step-by-step construction of a `AddOrderTestReq` object.
     * @return AddOrderTestReqBuilder
     */
    public static function builder()
    {
        return new AddOrderTestReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `AddOrderTestReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class AddOrderTestReqBuilder
{
    /**
     * @var AddOrderTestReq $obj
     */
    private $obj;

    public function __construct(AddOrderTestReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Unique order ID created by users to identify their orders. The maximum length cannot exceed 40, e.g. UUID only allows numbers, characters, underline(_), and separator (-).
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * Specify if the order is to 'buy' or 'sell'.
     * - 'buy' :
     * - 'sell' :
     * @param string $value
     * @return self
     */
    public function setSide($value)
    {
        $this->obj->side = $value;
        return $this;
    }

    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @param string $value
     * @return self
     */
    public function setSymbol($value)
    {
        $this->obj->symbol = $value;
        return $this;
    }

    /**
     * Used to calculate the margin to be frozen for the order. If you are to close the position, this parameter is not required.
     * @param int $value
     * @return self
     */
    public function setLeverage($value)
    {
        $this->obj->leverage = $value;
        return $this;
    }

    /**
     * Specify if the order is a 'limit' order or 'market' order
     * - 'limit' :
     * - 'market' :
     * @param string $value
     * @return self
     */
    public function setType($value)
    {
        $this->obj->type = $value;
        return $this;
    }

    /**
     * Either 'down' or 'up'.  If stop is used, parameter stopPrice and stopPriceType also need to be provided.
     * - 'down' : Triggers when the price reaches or goes below the stopPrice.
     * - 'up' : Triggers when the price reaches or goes above the stopPrice.
     * @param string $value
     * @return self
     */
    public function setStop($value)
    {
        $this->obj->stop = $value;
        return $this;
    }

    /**
     * Either 'TP' or 'MP' need to be defined if stop is specified.
     * - 'TP' : TP for trade price, The last trade price is the last price at which an order was filled. This price can be found in the latest match message.
     * - 'MP' : MP for mark price. The mark price can be obtained through relevant OPEN API for index services.
     * @param string $value
     * @return self
     */
    public function setStopPriceType($value)
    {
        $this->obj->stopPriceType = $value;
        return $this;
    }

    /**
     * Needs to be defined if stop is specified.
     * @param string $value
     * @return self
     */
    public function setStopPrice($value)
    {
        $this->obj->stopPrice = $value;
        return $this;
    }

    /**
     * A mark to reduce the position size only. Set to false by default. Need to set the position size when reduceOnly is true. If set to true, only the orders reducing the position size will be executed. If the reduce-only order size exceeds the position size, the extra size will be canceled.
     * @param bool $value
     * @return self
     */
    public function setReduceOnly($value)
    {
        $this->obj->reduceOnly = $value;
        return $this;
    }

    /**
     * A mark to close the position. Set to false by default. If closeOrder is set to true, the system will close the position and the position size will become 0. Side, Size and Leverage fields can be left empty and the system will determine the side and size automatically.
     * @param bool $value
     * @return self
     */
    public function setCloseOrder($value)
    {
        $this->obj->closeOrder = $value;
        return $this;
    }

    /**
     * Margin mode: ISOLATED, default: ISOLATED
     * - 'ISOLATED' : Isolated Margin
     * @param string $value
     * @return self
     */
    public function setMarginMode($value)
    {
        $this->obj->marginMode = $value;
        return $this;
    }

    /**
     * Required for type is 'limit' order, indicating the operating price
     * @param string $value
     * @return self
     */
    public function setPrice($value)
    {
        $this->obj->price = $value;
        return $this;
    }

    /**
     * Order size (lot), must be a positive integer. The quantity unit of coin-swap contracts is size (lot), and other units are not supported.
     * @param int $value
     * @return self
     */
    public function setSize($value)
    {
        $this->obj->size = $value;
        return $this;
    }

    /**
     * Optional for type is 'limit' order, [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading, default is GTC
     * - 'GTC' : order remains open on the order book until canceled. This is the default type if the field is left empty.
     * - 'IOC' : being matched or not, the remaining size of the order will be instantly canceled instead of entering the order book.
     * @param string $value
     * @return self
     */
    public function setTimeInForce($value)
    {
        $this->obj->timeInForce = $value;
        return $this;
    }

    /**
     * Optional for type is 'limit' order, post only flag, invalid when timeInForce is IOC. When postOnly is true, not allowed to choose hidden or iceberg. The post-only flag ensures that the trader always pays the maker fee and provides liquidity to the order book. If any part of the order is going to pay taker fees, the order will be fully rejected.
     * @param bool $value
     * @return self
     */
    public function setPostOnly($value)
    {
        $this->obj->postOnly = $value;
        return $this;
    }

    /**
     * Optional for type is 'limit' order, orders not displaying in order book. When hidden is chosen, choosing postOnly is not allowed.
     * @param bool $value
     * @return self
     */
    public function setHidden($value)
    {
        $this->obj->hidden = $value;
        return $this;
    }

    /**
     * Optional for type is 'limit' order, Only visible portion of the order is displayed in the order book. When iceberg is chose, choosing postOnly is not allowed.
     * @param bool $value
     * @return self
     */
    public function setIceberg($value)
    {
        $this->obj->iceberg = $value;
        return $this;
    }

    /**
     * Optional for type is 'limit' order, the maximum visible size of an iceberg order. Please place order in size (lots). The units of qty (base currency) and valueQty (value) are not supported. Need to be defined if iceberg is specified.
     * @param string $value
     * @return self
     */
    public function setVisibleSize($value)
    {
        $this->obj->visibleSize = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return AddOrderTestReq
     */
    public function build()
    {
        return $this->obj;
    }
}
