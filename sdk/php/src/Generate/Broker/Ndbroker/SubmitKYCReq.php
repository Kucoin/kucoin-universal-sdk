<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Broker\Ndbroker;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class SubmitKYCReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * client uid
     * @var string $clientUid
     * @Type("string")
     * @SerializedName("clientUid")
     */
    public $clientUid;
    /**
     * first Name
     * @var string $firstName
     * @Type("string")
     * @SerializedName("firstName")
     */
    public $firstName;
    /**
     * last Name
     * @var string $lastName
     * @Type("string")
     * @SerializedName("lastName")
     */
    public $lastName;
    /**
     * ISO country code
     * @var string $issueCountry
     * @Type("string")
     * @SerializedName("issueCountry")
     */
    public $issueCountry;
    /**
     * Birth Date
     * @var string $birthDate
     * @Type("string")
     * @SerializedName("birthDate")
     */
    public $birthDate;
    /**
     * Identity type
     * - 'idcard' : id card
     * - 'drivinglicense' : driving license
     * - 'passport' : passport
     * - 'bvn' : bvn
     * @var string $identityType
     * @Type("string")
     * @SerializedName("identityType")
     */
    public $identityType;
    /**
     * Identity Number
     * @var string $identityNumber
     * @Type("string")
     * @SerializedName("identityNumber")
     */
    public $identityNumber;
    /**
     * expire Date. If there is no expiration date, please fill in: 2099-01-01
     * @var string $expireDate
     * @Type("string")
     * @SerializedName("expireDate")
     */
    public $expireDate;
    /**
     * **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     * @var string $frontPhoto
     * @Type("string")
     * @SerializedName("frontPhoto")
     */
    public $frontPhoto;
    /**
     * **Optional when identityType=passport/bvn,** Back photo of ID, same as above
     * @var string $backendPhoto
     * @Type("string")
     * @SerializedName("backendPhoto")
     */
    public $backendPhoto;
    /**
     * Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     * @var string $facePhoto
     * @Type("string")
     * @SerializedName("facePhoto")
     */
    public $facePhoto;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize($json, SubmitKYCReq::class, "json");
    }
    /**
     * Creates a new instance of the `SubmitKYCReq` class.
     * The builder pattern allows step-by-step construction of a `SubmitKYCReq` object.
     * @return SubmitKYCReqBuilder
     */
    public static function builder()
    {
        return new SubmitKYCReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `SubmitKYCReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class SubmitKYCReqBuilder
{
    /**
     * @var SubmitKYCReq $obj
     */
    private $obj;

    public function __construct(SubmitKYCReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * client uid
     * @param string $value
     * @return self
     */
    public function setClientUid($value)
    {
        $this->obj->clientUid = $value;
        return $this;
    }

    /**
     * first Name
     * @param string $value
     * @return self
     */
    public function setFirstName($value)
    {
        $this->obj->firstName = $value;
        return $this;
    }

    /**
     * last Name
     * @param string $value
     * @return self
     */
    public function setLastName($value)
    {
        $this->obj->lastName = $value;
        return $this;
    }

    /**
     * ISO country code
     * @param string $value
     * @return self
     */
    public function setIssueCountry($value)
    {
        $this->obj->issueCountry = $value;
        return $this;
    }

    /**
     * Birth Date
     * @param string $value
     * @return self
     */
    public function setBirthDate($value)
    {
        $this->obj->birthDate = $value;
        return $this;
    }

    /**
     * Identity type
     * - 'idcard' : id card
     * - 'drivinglicense' : driving license
     * - 'passport' : passport
     * - 'bvn' : bvn
     * @param string $value
     * @return self
     */
    public function setIdentityType($value)
    {
        $this->obj->identityType = $value;
        return $this;
    }

    /**
     * Identity Number
     * @param string $value
     * @return self
     */
    public function setIdentityNumber($value)
    {
        $this->obj->identityNumber = $value;
        return $this;
    }

    /**
     * expire Date. If there is no expiration date, please fill in: 2099-01-01
     * @param string $value
     * @return self
     */
    public function setExpireDate($value)
    {
        $this->obj->expireDate = $value;
        return $this;
    }

    /**
     * **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     * @param string $value
     * @return self
     */
    public function setFrontPhoto($value)
    {
        $this->obj->frontPhoto = $value;
        return $this;
    }

    /**
     * **Optional when identityType=passport/bvn,** Back photo of ID, same as above
     * @param string $value
     * @return self
     */
    public function setBackendPhoto($value)
    {
        $this->obj->backendPhoto = $value;
        return $this;
    }

    /**
     * Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     * @param string $value
     * @return self
     */
    public function setFacePhoto($value)
    {
        $this->obj->facePhoto = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return SubmitKYCReq
     */
    public function build()
    {
        return $this->obj;
    }
}
