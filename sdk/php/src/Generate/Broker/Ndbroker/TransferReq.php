<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Broker\Ndbroker;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class TransferReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Transfer Amount (must be a positive integer in the currency's precision)
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
     * - 'OUT' :
     * - 'IN' :
     * @var string $direction
     * @Type("string")
     * @SerializedName("direction")
     */
    public $direction;
    /**
     * Broker account types: MAIN (Funding account), TRADE (Spot trading account)
     * - 'MAIN' :
     * - 'TRADE' :
     * @var string $accountType
     * @Type("string")
     * @SerializedName("accountType")
     */
    public $accountType;
    /**
     * Broker sub-account UID, must be the Broker sub-account created by the current Broker user.
     * @var string $specialUid
     * @Type("string")
     * @SerializedName("specialUid")
     */
    public $specialUid;
    /**
     * Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
     * - 'MAIN' :
     * - 'TRADE' :
     * @var string $specialAccountType
     * @Type("string")
     * @SerializedName("specialAccountType")
     */
    public $specialAccountType;
    /**
     * Client Order ID, the unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize($json, TransferReq::class, "json");
    }
    /**
     * Creates a new instance of the `TransferReq` class.
     * The builder pattern allows step-by-step construction of a `TransferReq` object.
     * @return TransferReqBuilder
     */
    public static function builder()
    {
        return new TransferReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `TransferReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class TransferReqBuilder
{
    /**
     * @var TransferReq $obj
     */
    private $obj;

    public function __construct(TransferReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Currency
     * @param string $value
     * @return self
     */
    public function setCurrency($value)
    {
        $this->obj->currency = $value;
        return $this;
    }

    /**
     * Transfer Amount (must be a positive integer in the currency's precision)
     * @param string $value
     * @return self
     */
    public function setAmount($value)
    {
        $this->obj->amount = $value;
        return $this;
    }

    /**
     * Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
     * - 'OUT' :
     * - 'IN' :
     * @param string $value
     * @return self
     */
    public function setDirection($value)
    {
        $this->obj->direction = $value;
        return $this;
    }

    /**
     * Broker account types: MAIN (Funding account), TRADE (Spot trading account)
     * - 'MAIN' :
     * - 'TRADE' :
     * @param string $value
     * @return self
     */
    public function setAccountType($value)
    {
        $this->obj->accountType = $value;
        return $this;
    }

    /**
     * Broker sub-account UID, must be the Broker sub-account created by the current Broker user.
     * @param string $value
     * @return self
     */
    public function setSpecialUid($value)
    {
        $this->obj->specialUid = $value;
        return $this;
    }

    /**
     * Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
     * - 'MAIN' :
     * - 'TRADE' :
     * @param string $value
     * @return self
     */
    public function setSpecialAccountType($value)
    {
        $this->obj->specialAccountType = $value;
        return $this;
    }

    /**
     * Client Order ID, the unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
     * @param string $value
     * @return self
     */
    public function setClientOid($value)
    {
        $this->obj->clientOid = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return TransferReq
     */
    public function build()
    {
        return $this->obj;
    }
}
