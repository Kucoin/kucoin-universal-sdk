<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Broker\Ndbroker;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetTransferHistoryResp implements Response
{
    /**
     * Transfer Order ID
     * @var string $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * Currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Transfer Amount
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * UID of the user transferring out
     * @var int $fromUid
     * @Type("int")
     * @SerializedName("fromUid")
     */
    public $fromUid;
    /**
     * From Account Type: Account Type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
     * - 'MAIN' :
     * - 'TRADE' :
     * - 'CONTRACT' :
     * - 'MARGIN' :
     * - 'ISOLATED' :
     * @var string $fromAccountType
     * @Type("string")
     * @SerializedName("fromAccountType")
     */
    public $fromAccountType;
    /**
     * Trading pair (required if the account type is ISOLATED), e.g., BTC-USDT
     * @var string $fromAccountTag
     * @Type("string")
     * @SerializedName("fromAccountTag")
     */
    public $fromAccountTag;
    /**
     * UID of the user transferring in
     * @var int $toUid
     * @Type("int")
     * @SerializedName("toUid")
     */
    public $toUid;
    /**
     * Account Type: Account Type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED
     * - 'MAIN' :
     * - 'TRADE' :
     * - 'CONTRACT' :
     * - 'MARGIN' :
     * - 'ISOLATED' :
     * @var string $toAccountType
     * @Type("string")
     * @SerializedName("toAccountType")
     */
    public $toAccountType;
    /**
     * To Trading pair (required if the account type is ISOLATED), e.g., BTC-USDT
     * @var string $toAccountTag
     * @Type("string")
     * @SerializedName("toAccountTag")
     */
    public $toAccountTag;
    /**
     * Status: PROCESSING (processing), SUCCESS (successful), FAILURE (failed)
     * - 'PROCESSING' :
     * - 'SUCCESS' :
     * - 'FAILURE' :
     * @var string $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status;
    /**
     * Failure Reason
     * @var string $reason
     * @Type("string")
     * @SerializedName("reason")
     */
    public $reason;
    /**
     * Creation Time (Unix timestamp in milliseconds)
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetTransferHistoryResp::class,
            "json"
        );
    }
}
