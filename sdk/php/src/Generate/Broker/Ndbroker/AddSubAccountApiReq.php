<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Broker\Ndbroker;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class AddSubAccountApiReq implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Sub-account UID
     * @var string $uid
     * @Type("string")
     * @SerializedName("uid")
     */
    public $uid;
    /**
     * API passphrase
     * @var string $passphrase
     * @Type("string")
     * @SerializedName("passphrase")
     */
    public $passphrase;
    /**
     * IP whitelist list, supports up to 20 IPs
     * @var string[] $ipWhitelist
     * @Type("array<string>")
     * @SerializedName("ipWhitelist")
     */
    public $ipWhitelist;
    /**
     * Permission group list (only General, Spot and Futures permissions can be set, such as \"General, Trade\").
     * - 'general' :
     * - 'spot' :
     * - 'futures' :
     * @var string[] $permissions
     * @Type("array<string>")
     * @SerializedName("permissions")
     */
    public $permissions;
    /**
     * apikey remarks (length 4~32)
     * @var string $label
     * @Type("string")
     * @SerializedName("label")
     */
    public $label;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            AddSubAccountApiReq::class,
            "json"
        );
    }
    /**
     * Creates a new instance of the `AddSubAccountApiReq` class.
     * The builder pattern allows step-by-step construction of a `AddSubAccountApiReq` object.
     * @return AddSubAccountApiReqBuilder
     */
    public static function builder()
    {
        return new AddSubAccountApiReqBuilder(new self());
    }

    /**
     * Creates a new instance of the `AddSubAccountApiReq` class with the given data.
     * Ensure that the keys in data match the target field names in the documentation,
     * rather than the variable names in the class.
     * @return self
     */
    public static function create(array $data)
    {
        $obj = new self();
        foreach ($data as $key => $value) {
            if (property_exists($obj, $key)) {
                $obj->$key = $value;
            }
        }
        return $obj;
    }
}

class AddSubAccountApiReqBuilder
{
    /**
     * @var AddSubAccountApiReq $obj
     */
    private $obj;

    public function __construct(AddSubAccountApiReq $obj)
    {
        $this->obj = $obj;
    }
    /**
     * Sub-account UID
     * @param string $value
     * @return self
     */
    public function setUid($value)
    {
        $this->obj->uid = $value;
        return $this;
    }

    /**
     * API passphrase
     * @param string $value
     * @return self
     */
    public function setPassphrase($value)
    {
        $this->obj->passphrase = $value;
        return $this;
    }

    /**
     * IP whitelist list, supports up to 20 IPs
     * @param string[] $value
     * @return self
     */
    public function setIpWhitelist($value)
    {
        $this->obj->ipWhitelist = $value;
        return $this;
    }

    /**
     * Permission group list (only General, Spot and Futures permissions can be set, such as \"General, Trade\").
     * - 'general' :
     * - 'spot' :
     * - 'futures' :
     * @param string[] $value
     * @return self
     */
    public function setPermissions($value)
    {
        $this->obj->permissions = $value;
        return $this;
    }

    /**
     * apikey remarks (length 4~32)
     * @param string $value
     * @return self
     */
    public function setLabel($value)
    {
        $this->obj->label = $value;
        return $this;
    }

    /**
     * Get the final object.
     * @return AddSubAccountApiReq
     */
    public function build()
    {
        return $this->obj;
    }
}
