<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Broker\Ndbroker;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class GetDepositListData implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * deposit uid
     * @var float $uid
     * @Type("float")
     * @SerializedName("uid")
     */
    public $uid;
    /**
     * hash
     * @var string $hash
     * @Type("string")
     * @SerializedName("hash")
     */
    public $hash;
    /**
     * Deposit address
     * @var string $address
     * @Type("string")
     * @SerializedName("address")
     */
    public $address;
    /**
     * Address remark. If thereâ€™s no remark, it is empty. When you withdraw from other platforms to KuCoin, you need to fill in memo(tag). Be careful: If you do not fill in memo(tag), your deposit may not be available.
     * @var string $memo
     * @Type("string")
     * @SerializedName("memo")
     */
    public $memo;
    /**
     * Deposit amount
     * @var string $amount
     * @Type("string")
     * @SerializedName("amount")
     */
    public $amount;
    /**
     * Fees charged for deposit
     * @var string $fee
     * @Type("string")
     * @SerializedName("fee")
     */
    public $fee;
    /**
     * currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Internal deposit or not
     * @var bool $isInner
     * @Type("bool")
     * @SerializedName("isInner")
     */
    public $isInner;
    /**
     * Wallet Txid
     * @var string $walletTxId
     * @Type("string")
     * @SerializedName("walletTxId")
     */
    public $walletTxId;
    /**
     * Status. Available value: PROCESSING, SUCCESS, FAILURE
     * - 'PROCESSING' :
     * - 'SUCCESS' :
     * - 'FAILURE' :
     * @var string $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status;
    /**
     * Remark
     * @var string $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * Chain name of currency
     * @var string $chain
     * @Type("string")
     * @SerializedName("chain")
     */
    public $chain;
    /**
     * Database record creation time
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;
    /**
     * Update time of the database record
     * @var int $updatedAt
     * @Type("int")
     * @SerializedName("updatedAt")
     */
    public $updatedAt;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetDepositListData::class,
            "json"
        );
    }
}
