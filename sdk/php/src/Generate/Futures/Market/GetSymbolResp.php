<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetSymbolResp implements Response
{
    /**
     * Symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Contract group
     * @var string $rootSymbol
     * @Type("string")
     * @SerializedName("rootSymbol")
     */
    public $rootSymbol;
    /**
     * Type of contract
     * - 'FFWCSX' : Standardized swap contracts, standard financial futures on swaps, expiration swap funding rates
     * - 'FFICSX' : Futures Contract
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * First Open Date (milliseconds)
     * @var int $firstOpenDate
     * @Type("int")
     * @SerializedName("firstOpenDate")
     */
    public $firstOpenDate;
    /**
     * Expiration date (milliseconds) Null means it will never expire
     * @var int $expireDate
     * @Type("int")
     * @SerializedName("expireDate")
     */
    public $expireDate;
    /**
     * Settlement date (milliseconds) Null indicates that automatic settlement is not supported
     * @var int $settleDate
     * @Type("int")
     * @SerializedName("settleDate")
     */
    public $settleDate;
    /**
     * Base currency
     * @var string $baseCurrency
     * @Type("string")
     * @SerializedName("baseCurrency")
     */
    public $baseCurrency;
    /**
     * Quote currency
     * @var string $quoteCurrency
     * @Type("string")
     * @SerializedName("quoteCurrency")
     */
    public $quoteCurrency;
    /**
     * Currency used to clear and settle the trades
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;
    /**
     * Maximum order quantity
     * @var int $maxOrderQty
     * @Type("int")
     * @SerializedName("maxOrderQty")
     */
    public $maxOrderQty;
    /**
     * Maximum order price
     * @var float $maxPrice
     * @Type("float")
     * @SerializedName("maxPrice")
     */
    public $maxPrice;
    /**
     * Minimum lot size
     * @var int $lotSize
     * @Type("int")
     * @SerializedName("lotSize")
     */
    public $lotSize;
    /**
     * Minimum price changes
     * @var float $tickSize
     * @Type("float")
     * @SerializedName("tickSize")
     */
    public $tickSize;
    /**
     * Index price of tick size
     * @var float $indexPriceTickSize
     * @Type("float")
     * @SerializedName("indexPriceTickSize")
     */
    public $indexPriceTickSize;
    /**
     * The basic unit of the contract API is lots. For the number of coins in each lot, please refer to the param multiplier. For example, for XBTUSDTM, multiplier=0.001, which corresponds to the value of each XBTUSDTM contract being 0.001 BTC. There is also a special case. All coin-swap contracts, such as each XBTUSDM contract, correspond to 1 USD.
     * @var float $multiplier
     * @Type("float")
     * @SerializedName("multiplier")
     */
    public $multiplier;
    /**
     * Initial margin requirement
     * @var float $initialMargin
     * @Type("float")
     * @SerializedName("initialMargin")
     */
    public $initialMargin;
    /**
     * Maintenance margin requirement
     * @var float $maintainMargin
     * @Type("float")
     * @SerializedName("maintainMargin")
     */
    public $maintainMargin;
    /**
     * Maximum risk limit (unit: XBT)
     * @var int $maxRiskLimit
     * @Type("int")
     * @SerializedName("maxRiskLimit")
     */
    public $maxRiskLimit;
    /**
     * Minimum risk limit (unit: XBT)
     * @var int $minRiskLimit
     * @Type("int")
     * @SerializedName("minRiskLimit")
     */
    public $minRiskLimit;
    /**
     * Risk limit increment value (unit: XBT)
     * @var int $riskStep
     * @Type("int")
     * @SerializedName("riskStep")
     */
    public $riskStep;
    /**
     * Maker fee rate
     * @var float $makerFeeRate
     * @Type("float")
     * @SerializedName("makerFeeRate")
     */
    public $makerFeeRate;
    /**
     * Taker fee rate
     * @var float $takerFeeRate
     * @Type("float")
     * @SerializedName("takerFeeRate")
     */
    public $takerFeeRate;
    /**
     * Deprecated param
     * @var float $takerFixFee
     * @Type("float")
     * @SerializedName("takerFixFee")
     */
    public $takerFixFee;
    /**
     * Deprecated param
     * @var float $makerFixFee
     * @Type("float")
     * @SerializedName("makerFixFee")
     */
    public $makerFixFee;
    /**
     * Settlement fee
     * @var float $settlementFee
     * @Type("float")
     * @SerializedName("settlementFee")
     */
    public $settlementFee;
    /**
     * Enabled ADL or not
     * @var bool $isDeleverage
     * @Type("bool")
     * @SerializedName("isDeleverage")
     */
    public $isDeleverage;
    /**
     * Deprecated param
     * @var bool $isQuanto
     * @Type("bool")
     * @SerializedName("isQuanto")
     */
    public $isQuanto;
    /**
     * Whether it is a reverse contract
     * @var bool $isInverse
     * @Type("bool")
     * @SerializedName("isInverse")
     */
    public $isInverse;
    /**
     * Marking method
     * - 'FairPrice' : FairPrice
     * @var string $markMethod
     * @Type("string")
     * @SerializedName("markMethod")
     */
    public $markMethod;
    /**
     * Fair price marking method; the Futures contract is null
     * - 'FundingRate' : FundingRate
     * @var string $fairMethod
     * @Type("string")
     * @SerializedName("fairMethod")
     */
    public $fairMethod;
    /**
     * Ticker symbol of the base currency
     * @var string $fundingBaseSymbol
     * @Type("string")
     * @SerializedName("fundingBaseSymbol")
     */
    public $fundingBaseSymbol;
    /**
     * Ticker symbol of the quote currency
     * @var string $fundingQuoteSymbol
     * @Type("string")
     * @SerializedName("fundingQuoteSymbol")
     */
    public $fundingQuoteSymbol;
    /**
     * Funding rate symbol
     * @var string $fundingRateSymbol
     * @Type("string")
     * @SerializedName("fundingRateSymbol")
     */
    public $fundingRateSymbol;
    /**
     * Index symbol
     * @var string $indexSymbol
     * @Type("string")
     * @SerializedName("indexSymbol")
     */
    public $indexSymbol;
    /**
     * Settlement symbol
     * @var string $settlementSymbol
     * @Type("string")
     * @SerializedName("settlementSymbol")
     */
    public $settlementSymbol;
    /**
     * Contract status
     * - 'Init' : Initial
     * - 'Open' : Online
     * - 'BeingSettled' : Settling
     * - 'Settled' : Settled
     * - 'Paused' : Suspended
     * - 'Closed' : Offline
     * - 'CancelOnly' : Orders can only be canceled
     * @var string $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status;
    /**
     * Funding fee rate
     * @var float $fundingFeeRate
     * @Type("float")
     * @SerializedName("fundingFeeRate")
     */
    public $fundingFeeRate;
    /**
     * Predicted funding fee rate
     * @var float $predictedFundingFeeRate
     * @Type("float")
     * @SerializedName("predictedFundingFeeRate")
     */
    public $predictedFundingFeeRate;
    /**
     * Funding interval (milliseconds)
     * @var int $fundingRateGranularity
     * @Type("int")
     * @SerializedName("fundingRateGranularity")
     */
    public $fundingRateGranularity;
    /**
     * Open interest (unit: lots)
     * @var string $openInterest
     * @Type("string")
     * @SerializedName("openInterest")
     */
    public $openInterest;
    /**
     * 24-hour turnover
     * @var float $turnoverOf24h
     * @Type("float")
     * @SerializedName("turnoverOf24h")
     */
    public $turnoverOf24h;
    /**
     * 24-hour volume
     * @var float $volumeOf24h
     * @Type("float")
     * @SerializedName("volumeOf24h")
     */
    public $volumeOf24h;
    /**
     * Mark price
     * @var float $markPrice
     * @Type("float")
     * @SerializedName("markPrice")
     */
    public $markPrice;
    /**
     * Index price
     * @var float $indexPrice
     * @Type("float")
     * @SerializedName("indexPrice")
     */
    public $indexPrice;
    /**
     * Last trade price
     * @var float $lastTradePrice
     * @Type("float")
     * @SerializedName("lastTradePrice")
     */
    public $lastTradePrice;
    /**
     * Next funding rate time (milliseconds)
     * @var int $nextFundingRateTime
     * @Type("int")
     * @SerializedName("nextFundingRateTime")
     */
    public $nextFundingRateTime;
    /**
     * Maximum leverage
     * @var int $maxLeverage
     * @Type("int")
     * @SerializedName("maxLeverage")
     */
    public $maxLeverage;
    /**
     * The contract index price source exchange
     * @var string[] $sourceExchanges
     * @Type("array<string>")
     * @SerializedName("sourceExchanges")
     */
    public $sourceExchanges;
    /**
     * Premium index symbol (1 minute)
     * @var string $premiumsSymbol1M
     * @Type("string")
     * @SerializedName("premiumsSymbol1M")
     */
    public $premiumsSymbol1M;
    /**
     * Premium index symbol (8 hours)
     * @var string $premiumsSymbol8H
     * @Type("string")
     * @SerializedName("premiumsSymbol8H")
     */
    public $premiumsSymbol8H;
    /**
     * Base currency interest rate symbol (1 minute)
     * @var string $fundingBaseSymbol1M
     * @Type("string")
     * @SerializedName("fundingBaseSymbol1M")
     */
    public $fundingBaseSymbol1M;
    /**
     * Quote currency interest rate symbol (1 minute)
     * @var string $fundingQuoteSymbol1M
     * @Type("string")
     * @SerializedName("fundingQuoteSymbol1M")
     */
    public $fundingQuoteSymbol1M;
    /**
     * 24-hour lowest price
     * @var float $lowPrice
     * @Type("float")
     * @SerializedName("lowPrice")
     */
    public $lowPrice;
    /**
     * 24-hour highest price
     * @var float $highPrice
     * @Type("float")
     * @SerializedName("highPrice")
     */
    public $highPrice;
    /**
     * 24-hour % price change
     * @var float $priceChgPct
     * @Type("float")
     * @SerializedName("priceChgPct")
     */
    public $priceChgPct;
    /**
     * 24-hour price change
     * @var float $priceChg
     * @Type("float")
     * @SerializedName("priceChg")
     */
    public $priceChg;
    /**
     *
     * @var float $k
     * @Type("float")
     * @SerializedName("k")
     */
    public $k;
    /**
     *
     * @var float $m
     * @Type("float")
     * @SerializedName("m")
     */
    public $m;
    /**
     *
     * @var float $f
     * @Type("float")
     * @SerializedName("f")
     */
    public $f;
    /**
     *
     * @var float $mmrLimit
     * @Type("float")
     * @SerializedName("mmrLimit")
     */
    public $mmrLimit;
    /**
     *
     * @var float $mmrLevConstant
     * @Type("float")
     * @SerializedName("mmrLevConstant")
     */
    public $mmrLevConstant;
    /**
     * Whether support Cross Margin
     * @var bool $supportCross
     * @Type("bool")
     * @SerializedName("supportCross")
     */
    public $supportCross;
    /**
     * The current maximum buying price allowed
     * @var float $buyLimit
     * @Type("float")
     * @SerializedName("buyLimit")
     */
    public $buyLimit;
    /**
     * The current minimum selling price allowed
     * @var float $sellLimit
     * @Type("float")
     * @SerializedName("sellLimit")
     */
    public $sellLimit;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, GetSymbolResp::class, "json");
    }
}
