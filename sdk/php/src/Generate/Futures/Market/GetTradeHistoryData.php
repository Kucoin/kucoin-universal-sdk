<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetTradeHistoryData implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Sequence number
     * @var int $sequence
     * @Type("int")
     * @SerializedName("sequence")
     */
    public $sequence;
    /**
     * Deprecated param
     * @var int $contractId
     * @Type("int")
     * @SerializedName("contractId")
     */
    public $contractId;
    /**
     * Transaction ID
     * @var string $tradeId
     * @Type("string")
     * @SerializedName("tradeId")
     */
    public $tradeId;
    /**
     * Maker order ID
     * @var string $makerOrderId
     * @Type("string")
     * @SerializedName("makerOrderId")
     */
    public $makerOrderId;
    /**
     * Taker order ID
     * @var string $takerOrderId
     * @Type("string")
     * @SerializedName("takerOrderId")
     */
    public $takerOrderId;
    /**
     * Filled timestamp (nanosecond)
     * @var int $ts
     * @Type("int")
     * @SerializedName("ts")
     */
    public $ts;
    /**
     * Filled amount
     * @var int $size
     * @Type("int")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Filled price
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Filled side; the trade side indicates the taker order side. A taker order is the order that was matched with orders opened on the order book.
     * - 'buy' : buy
     * - 'sell' : sell
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetTradeHistoryData::class,
            "json"
        );
    }
}
