<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Market;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetTickerResp implements Response
{
    /**
     * Sequence number, used to judge whether the messages pushed by Websocket are continuous.
     * @var int $sequence
     * @Type("int")
     * @SerializedName("sequence")
     */
    public $sequence;
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Filled side; the trade side indicates the taker order side. A taker order is the order that was matched with orders opened on the order book.
     * - 'buy' : buy
     * - 'sell' : sell
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Filled quantity
     * @var int $size
     * @Type("int")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Transaction ID
     * @var string $tradeId
     * @Type("string")
     * @SerializedName("tradeId")
     */
    public $tradeId;
    /**
     * Filled price
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Best bid price
     * @var string $bestBidPrice
     * @Type("string")
     * @SerializedName("bestBidPrice")
     */
    public $bestBidPrice;
    /**
     * Best bid size
     * @var int $bestBidSize
     * @Type("int")
     * @SerializedName("bestBidSize")
     */
    public $bestBidSize;
    /**
     * Best ask price
     * @var string $bestAskPrice
     * @Type("string")
     * @SerializedName("bestAskPrice")
     */
    public $bestAskPrice;
    /**
     * Best ask size
     * @var int $bestAskSize
     * @Type("int")
     * @SerializedName("bestAskSize")
     */
    public $bestAskSize;
    /**
     * Filled time (nanoseconds)
     * @var int $ts
     * @Type("int")
     * @SerializedName("ts")
     */
    public $ts;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize($json, GetTickerResp::class, "json");
    }
}
