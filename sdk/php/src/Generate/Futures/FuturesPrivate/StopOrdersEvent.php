<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPrivate;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketMessageCallback;
use KuCoin\UniversalSDK\Model\WsMessage;
use JMS\Serializer\Serializer;

class StopOrdersEvent implements Response
{
    /**
     *
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;
    /**
     * Margin Mode
     * @var string $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode;
    /**
     * The unique order id generated by the trading system
     * @var string $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * Order Price
     * @var string $orderPrice
     * @Type("string")
     * @SerializedName("orderPrice")
     */
    public $orderPrice;
    /**
     * User-specified order type
     * @var string $orderType
     * @Type("string")
     * @SerializedName("orderType")
     */
    public $orderType;
    /**
     * buy or sell
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * User-specified order size
     * @var int $size
     * @Type("int")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Either 'down' or 'up'
     * @var string $stop
     * @Type("string")
     * @SerializedName("stop")
     */
    public $stop;
    /**
     * Stop Price
     * @var string $stopPrice
     * @Type("string")
     * @SerializedName("stopPrice")
     */
    public $stopPrice;
    /**
     *
     * @var string $stopPriceType
     * @Type("string")
     * @SerializedName("stopPriceType")
     */
    public $stopPriceType;
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-221752070)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     *
     * @var int $ts
     * @Type("int")
     * @SerializedName("ts")
     */
    public $ts;
    /**
     * Order Type
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;

    private function __construct() {}

    /**
     * common response
     * @Exclude()
     * @var WsMessage $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }
    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, StopOrdersEvent::class, "json");
    }
}

class StopOrdersEventCallbackWrapper implements WebSocketMessageCallback
{
    /**
     * @var callable
     */
    private $callback;

    /**
     * @param callable $callback function(string $topic, string $subject, StopOrdersEvent $data): void
     */
    public function __construct(callable $callback)
    {
        $this->callback = $callback;
    }

    public function onMessage(WsMessage $msg, Serializer $serializer)
    {
        $event = StopOrdersEvent::jsonDeserialize($msg->rawData, $serializer);
        $event->setCommonResponse($msg);
        $this->callback($msg->topic, $msg->subject, $event);
    }
}
