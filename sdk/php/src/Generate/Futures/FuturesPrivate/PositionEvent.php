<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPrivate;
use JMS\Serializer\Serializer;
use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketMessageCallback;
use KuCoin\UniversalSDK\Model\WsMessage;

class PositionEvent implements Response
{
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-221752070)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Whether it is cross margin.
     * @var bool $crossMode
     * @Type("bool")
     * @SerializedName("crossMode")
     */
    public $crossMode;
    /**
     * ADL ranking percentile
     * @var float $delevPercentage
     * @Type("float")
     * @SerializedName("delevPercentage")
     */
    public $delevPercentage;
    /**
     * Open time
     * @var int $openingTimestamp
     * @Type("int")
     * @SerializedName("openingTimestamp")
     */
    public $openingTimestamp;
    /**
     * Current timestamp
     * @var int $currentTimestamp
     * @Type("int")
     * @SerializedName("currentTimestamp")
     */
    public $currentTimestamp;
    /**
     * Current position quantity
     * @var int $currentQty
     * @Type("int")
     * @SerializedName("currentQty")
     */
    public $currentQty;
    /**
     * Current position value
     * @var float $currentCost
     * @Type("float")
     * @SerializedName("currentCost")
     */
    public $currentCost;
    /**
     * Current commission
     * @var float $currentComm
     * @Type("float")
     * @SerializedName("currentComm")
     */
    public $currentComm;
    /**
     * Unrealized value
     * @var float $unrealisedCost
     * @Type("float")
     * @SerializedName("unrealisedCost")
     */
    public $unrealisedCost;
    /**
     * Accumulated realized gross profit value
     * @var float $realisedGrossCost
     * @Type("float")
     * @SerializedName("realisedGrossCost")
     */
    public $realisedGrossCost;
    /**
     * Current realized position value
     * @var float $realisedCost
     * @Type("float")
     * @SerializedName("realisedCost")
     */
    public $realisedCost;
    /**
     * Opened position or not
     * @var bool $isOpen
     * @Type("bool")
     * @SerializedName("isOpen")
     */
    public $isOpen;
    /**
     * Mark price
     * @var float $markPrice
     * @Type("float")
     * @SerializedName("markPrice")
     */
    public $markPrice;
    /**
     * Mark Value
     * @var float $markValue
     * @Type("float")
     * @SerializedName("markValue")
     */
    public $markValue;
    /**
     * Position value
     * @var float $posCost
     * @Type("float")
     * @SerializedName("posCost")
     */
    public $posCost;
    /**
     * Inital margin Cross = opening value/cross leverage; isolated = accumulation of initial margin for each transaction
     * @var float $posInit
     * @Type("float")
     * @SerializedName("posInit")
     */
    public $posInit;
    /**
     * Bankruptcy cost Cross = mark value * imr; Isolated = position margin (accumulation of initial margin, additional margin, generated funding fees, etc.)
     * @var float $posMargin
     * @Type("float")
     * @SerializedName("posMargin")
     */
    public $posMargin;
    /**
     * Accumulated realized gross profit value
     * @var float $realisedGrossPnl
     * @Type("float")
     * @SerializedName("realisedGrossPnl")
     */
    public $realisedGrossPnl;
    /**
     * Realized profit and loss
     * @var float $realisedPnl
     * @Type("float")
     * @SerializedName("realisedPnl")
     */
    public $realisedPnl;
    /**
     * Unrealized profit and loss
     * @var float $unrealisedPnl
     * @Type("float")
     * @SerializedName("unrealisedPnl")
     */
    public $unrealisedPnl;
    /**
     * Profit-loss ratio of the position
     * @var float $unrealisedPnlPcnt
     * @Type("float")
     * @SerializedName("unrealisedPnlPcnt")
     */
    public $unrealisedPnlPcnt;
    /**
     * Rate of return on investment
     * @var float $unrealisedRoePcnt
     * @Type("float")
     * @SerializedName("unrealisedRoePcnt")
     */
    public $unrealisedRoePcnt;
    /**
     * Average entry price
     * @var float $avgEntryPrice
     * @Type("float")
     * @SerializedName("avgEntryPrice")
     */
    public $avgEntryPrice;
    /**
     * Liquidation price: For Cross Margin, you can refer to the liquidationPrice, and the liquidation is based on the risk rate.
     * @var float $liquidationPrice
     * @Type("float")
     * @SerializedName("liquidationPrice")
     */
    public $liquidationPrice;
    /**
     * Bankruptcy price: For Cross Margin, you can refer to the bankruptPrice, and the liquidation is based on the risk rate.
     * @var float $bankruptPrice
     * @Type("float")
     * @SerializedName("bankruptPrice")
     */
    public $bankruptPrice;
    /**
     * Currency used to clear and settle the trades
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;
    /**
     * Margin Mode: CROSS, ISOLATED
     * @var string $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode;
    /**
     * Position Side
     * @var string $positionSide
     * @Type("string")
     * @SerializedName("positionSide")
     */
    public $positionSide;
    /**
     * Leverage
     * @var float $leverage
     * @Type("float")
     * @SerializedName("leverage")
     */
    public $leverage;
    /**
     * Auto deposit margin or not **Only applicable to Isolated Margin**
     * @var bool|null $autoDeposit
     * @Type("bool")
     * @SerializedName("autoDeposit")
     */
    public $autoDeposit;
    /**
     * Maintenance margin requirement
     * @var float|null $maintMarginReq
     * @Type("float")
     * @SerializedName("maintMarginReq")
     */
    public $maintMarginReq;
    /**
     * Risk limit **Only applicable to Isolated Margin**
     * @var int|null $riskLimit
     * @Type("int")
     * @SerializedName("riskLimit")
     */
    public $riskLimit;
    /**
     * Leverage of the order **Only applicable to Isolated Margin**
     * @var float|null $realLeverage
     * @Type("float")
     * @SerializedName("realLeverage")
     */
    public $realLeverage;
    /**
     * Added margin **Only applicable to Isolated Margin**
     * @var float|null $posCross
     * @Type("float")
     * @SerializedName("posCross")
     */
    public $posCross;
    /**
     * Bankruptcy cost **Only applicable to Isolated Margin**
     * @var float|null $posComm
     * @Type("float")
     * @SerializedName("posComm")
     */
    public $posComm;
    /**
     * Funding fees paid out **Only applicable to Isolated Margin**
     * @var float|null $posLoss
     * @Type("float")
     * @SerializedName("posLoss")
     */
    public $posLoss;
    /**
     * The current remaining unsettled funding fee for the position **Only applicable to Isolated Margin**
     * @var float|null $posFunding
     * @Type("float")
     * @SerializedName("posFunding")
     */
    public $posFunding;
    /**
     * Maintenance margin
     * @var float|null $posMaint
     * @Type("float")
     * @SerializedName("posMaint")
     */
    public $posMaint;
    /**
     * Position margin **Only applicable to Isolated Margin**
     * @var float|null $maintMargin
     * @Type("float")
     * @SerializedName("maintMargin")
     */
    public $maintMargin;
    /**
     * Funding time
     * @var int|null $fundingTime
     * @Type("int")
     * @SerializedName("fundingTime")
     */
    public $fundingTime;
    /**
     * Position size
     * @var int|null $qty
     * @Type("int")
     * @SerializedName("qty")
     */
    public $qty;
    /**
     * Funding rate
     * @var float|null $fundingRate
     * @Type("float")
     * @SerializedName("fundingRate")
     */
    public $fundingRate;
    /**
     * Funding fees
     * @var float|null $fundingFee
     * @Type("float")
     * @SerializedName("fundingFee")
     */
    public $fundingFee;
    /**
     * Funding Fee Settlement Time (nanoseconds)
     * @var int|null $ts
     * @Type("int")
     * @SerializedName("ts")
     */
    public $ts;
    /**
     * Adjustment isolated margin risk limit level successful or not
     * @var bool|null $success
     * @Type("bool")
     * @SerializedName("success")
     */
    public $success;
    /**
     * Adjustment isolated margin risk limit level failure reason
     * @var string|null $msg
     * @Type("string")
     * @SerializedName("msg")
     */
    public $msg;

    private function __construct() {}

    /**
     * common response
     * @Exclude()
     * @var WsMessage $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }
    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, PositionEvent::class, "json");
    }

    /**
     * @param callable $callback function(string $topic, string $subject, PositionEvent $data): void
     */
    public static function createCallback(
        callable $callback
    ): PositionEventCallbackWrapper {
        return new PositionEventCallbackWrapper($callback);
    }
}

class PositionEventCallbackWrapper implements WebSocketMessageCallback
{
    /**
     * @var callable
     */
    private $callback;

    /**
     * @param callable $callback function(string $topic, string $subject, PositionEvent $data): void
     */
    public function __construct(callable $callback)
    {
        $this->callback = $callback;
    }

    public function onMessage(WsMessage $msg, Serializer $serializer)
    {
        $event = PositionEvent::jsonDeserialize(
            $serializer->serialize($msg->rawData, "json"),
            $serializer
        );
        $event->setCommonResponse($msg);
        call_user_func($this->callback, $msg->topic, $msg->subject, $event);
    }
}
