<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPrivate;
use JMS\Serializer\Serializer;
use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketMessageCallback;
use KuCoin\UniversalSDK\Model\WsMessage;

class BalanceEvent implements Response
{
    /**
     * Margin of the cross margin position
     * @var string $crossPosMargin
     * @Type("string")
     * @SerializedName("crossPosMargin")
     */
    public $crossPosMargin;
    /**
     * Margin of the isolated margin order
     * @var string $isolatedOrderMargin
     * @Type("string")
     * @SerializedName("isolatedOrderMargin")
     */
    public $isolatedOrderMargin;
    /**
     * Frozen Balance
     * @var string $holdBalance
     * @Type("string")
     * @SerializedName("holdBalance")
     */
    public $holdBalance;
    /**
     * Equity
     * @var string $equity
     * @Type("string")
     * @SerializedName("equity")
     */
    public $equity;
    /**
     * Version. When holding a cross margin position, the available balance may change with fluctuations in the mark price, leading to discrepancies in the available balance for the same version number.
     * @var string $version
     * @Type("string")
     * @SerializedName("version")
     */
    public $version;
    /**
     * Available Balance
     * @var string $availableBalance
     * @Type("string")
     * @SerializedName("availableBalance")
     */
    public $availableBalance;
    /**
     * Margin of the isolated margin position, including isolated margin funding fees
     * @var string $isolatedPosMargin
     * @Type("string")
     * @SerializedName("isolatedPosMargin")
     */
    public $isolatedPosMargin;
    /**
     * Wallet Balance
     * @var string $walletBalance
     * @Type("string")
     * @SerializedName("walletBalance")
     */
    public $walletBalance;
    /**
     * Isolated margin funding fee
     * @var string $isolatedFundingFeeMargin
     * @Type("string")
     * @SerializedName("isolatedFundingFeeMargin")
     */
    public $isolatedFundingFeeMargin;
    /**
     * Unrealized PNL in cross margin mode
     * @var string $crossUnPnl
     * @Type("string")
     * @SerializedName("crossUnPnl")
     */
    public $crossUnPnl;
    /**
     * Total margin under cross margin mode
     * @var string $totalCrossMargin
     * @Type("string")
     * @SerializedName("totalCrossMargin")
     */
    public $totalCrossMargin;
    /**
     * Currency Symbol
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;
    /**
     * Unrealized PNL in isolated margin mode
     * @var string $isolatedUnPnl
     * @Type("string")
     * @SerializedName("isolatedUnPnl")
     */
    public $isolatedUnPnl;
    /**
     * Margin of the cross margin order
     * @var string $crossOrderMargin
     * @Type("string")
     * @SerializedName("crossOrderMargin")
     */
    public $crossOrderMargin;
    /**
     * Last modified time
     * @var string $timestamp
     * @Type("string")
     * @SerializedName("timestamp")
     */
    public $timestamp;

    private function __construct() {}

    /**
     * common response
     * @Exclude()
     * @var WsMessage $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }
    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, BalanceEvent::class, "json");
    }

    /**
     * @param callable $callback function(string $topic, string $subject, BalanceEvent $data): void
     */
    public static function createCallback(
        callable $callback
    ): BalanceEventCallbackWrapper {
        return new BalanceEventCallbackWrapper($callback);
    }
}

class BalanceEventCallbackWrapper implements WebSocketMessageCallback
{
    /**
     * @var callable
     */
    private $callback;

    /**
     * @param callable $callback function(string $topic, string $subject, BalanceEvent $data): void
     */
    public function __construct(callable $callback)
    {
        $this->callback = $callback;
    }

    public function onMessage(WsMessage $msg, Serializer $serializer)
    {
        $event = BalanceEvent::jsonDeserialize(
            $serializer->serialize($msg->rawData, "json"),
            $serializer
        );
        $event->setCommonResponse($msg);
        call_user_func($this->callback, $msg->topic, $msg->subject, $event);
    }
}
