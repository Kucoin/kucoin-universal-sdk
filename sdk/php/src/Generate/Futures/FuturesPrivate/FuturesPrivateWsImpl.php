<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPrivate;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketService;
use React\Promise\PromiseInterface;

class FuturesPrivateWsImpl implements FuturesPrivateWs
{
    /**@var WebSocketService $wsService*/
    private $wsService;

    public function __construct(WebSocketService $wsService)
    {
        $this->wsService = $wsService;
    }

    public function allOrder(callable $callback): PromiseInterface
    {
        $topicPrefix = "/contractMarket/tradeOrders";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new AllOrderEventCallbackWrapper($callback)
        );
    }

    public function allPosition(callable $callback): PromiseInterface
    {
        $topicPrefix = "/contract/positionAll";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new AllPositionEventCallbackWrapper($callback)
        );
    }

    public function balance(callable $callback): PromiseInterface
    {
        $topicPrefix = "/contractAccount/wallet";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new BalanceEventCallbackWrapper($callback)
        );
    }

    public function crossLeverage(callable $callback): PromiseInterface
    {
        $topicPrefix = "/contract/crossLeverage";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new CrossLeverageEventCallbackWrapper($callback)
        );
    }

    public function marginMode(callable $callback): PromiseInterface
    {
        $topicPrefix = "/contract/marginMode";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new MarginModeEventCallbackWrapper($callback)
        );
    }

    public function order(string $symbol, callable $callback): PromiseInterface
    {
        $topicPrefix = "/contractMarket/tradeOrders";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new OrderEventCallbackWrapper($callback)
        );
    }

    public function position(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contract/position";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new PositionEventCallbackWrapper($callback)
        );
    }

    public function stopOrders(callable $callback): PromiseInterface
    {
        $topicPrefix = "/contractMarket/advancedOrders";

        $args = [];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new StopOrdersEventCallbackWrapper($callback)
        );
    }

    public function unSubscribe(string $id): PromiseInterface
    {
        return $this->wsService->unsubscribe($id);
    }

    public function start(): PromiseInterface
    {
        return $this->wsService->start();
    }

    public function stop(): PromiseInterface
    {
        return $this->wsService->stop();
    }
}
