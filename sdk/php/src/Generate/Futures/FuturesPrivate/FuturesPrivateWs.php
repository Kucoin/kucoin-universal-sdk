<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPrivate;
use React\Promise\PromiseInterface;

interface FuturesPrivateWs
{
    /**
     * All Order change pushes.
     * Push order changes for all symbol
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, AllOrderEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function allOrder(callable $callback): PromiseInterface;

    /**
     * All symbol position change events push
     * Subscribe to this topic to get real-time pushes on all symbols’ position change events
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, AllPositionEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function allPosition(callable $callback): PromiseInterface;

    /**
     * the balance change push
     * Subscribe to this topic to get real-time balance change pushes
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, BalanceEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function balance(callable $callback): PromiseInterface;

    /**
     * the leverage change push
     * Subscribe to this topic to get real-time pushes on leverage changes of contracts that are in cross margin mode
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, CrossLeverageEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function crossLeverage(callable $callback): PromiseInterface;

    /**
     * the margin mode change
     * Subscribe to this topic to get real-time pushes on symbols’ margin mode change events
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, MarginModeEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function marginMode(callable $callback): PromiseInterface;

    /**
     * Order change pushes.
     * Push order changes for the specified symbol
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, OrderEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function order(string $symbol, callable $callback): PromiseInterface;

    /**
     * the position change events push
     * Subscribe this topic to get real-time pushes on symbols’ position change events
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, PositionEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function position(
        string $symbol,
        callable $callback
    ): PromiseInterface;

    /**
     * stop order change pushes.
     * Subscribe to this topic to get real-time pushes on stop order changes.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, StopOrdersEvent $data): void
     * @return PromiseInterface<string> A promise that resolves to the subscription ID or rejects with an error.
     */
    public function stopOrders(callable $callback): PromiseInterface;

    /**
     * Unsubscribe from topics
     */
    public function unSubscribe(string $id): PromiseInterface;

    /**
     * Start websocket
     */
    public function start(): PromiseInterface;

    /**
     * Stop websocket
     */
    public function stop(): PromiseInterface;
}
