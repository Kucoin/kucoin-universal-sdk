<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Positions;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetCrossMarginRiskLimitData implements Serializable
{
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Maximum amount of open position(Unit is **lots**)
     * @var int $maxOpenSize
     * @Type("int")
     * @SerializedName("maxOpenSize")
     */
    public $maxOpenSize;
    /**
     * Maximum value of open position(Unit is **quoteCcy**)
     * @var string $maxOpenValue
     * @Type("string")
     * @SerializedName("maxOpenValue")
     */
    public $maxOpenValue;
    /**
     * Margin amount used for max position calculation.
     * @var string $totalMargin
     * @Type("string")
     * @SerializedName("totalMargin")
     */
    public $totalMargin;
    /**
     * Price used for max position calculation. Defaults to latest transaction price
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Leverage used for max position calculation.
     * @var string $leverage
     * @Type("string")
     * @SerializedName("leverage")
     */
    public $leverage;
    /**
     * Maintenance Margin Rate
     * @var string $mmr
     * @Type("string")
     * @SerializedName("mmr")
     */
    public $mmr;
    /**
     * Initial Margin Rate
     * @var string $imr
     * @Type("string")
     * @SerializedName("imr")
     */
    public $imr;
    /**
     * Margin Currency
     * @var string $currency
     * @Type("string")
     * @SerializedName("currency")
     */
    public $currency;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetCrossMarginRiskLimitData::class,
            "json"
        );
    }
}
