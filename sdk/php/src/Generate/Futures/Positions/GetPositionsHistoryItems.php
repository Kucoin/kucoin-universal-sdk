<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Positions;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetPositionsHistoryItems implements Serializable
{
    /**
     * Close ID
     * @var string $closeId
     * @Type("string")
     * @SerializedName("closeId")
     */
    public $closeId;
    /**
     * User ID
     * @var string $userId
     * @Type("string")
     * @SerializedName("userId")
     */
    public $userId;
    /**
     * Symbol of the contract, Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Currency used to settle trades
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;
    /**
     * Leverage applied to the order
     * @var string $leverage
     * @Type("string")
     * @SerializedName("leverage")
     */
    public $leverage;
    /**
     * Type of closure
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * Net profit and loss (after deducting fees and funding costs)
     * @var string $pnl
     * @Type("string")
     * @SerializedName("pnl")
     */
    public $pnl;
    /**
     * Accumulated realised gross profit value
     * @var string $realisedGrossCost
     * @Type("string")
     * @SerializedName("realisedGrossCost")
     */
    public $realisedGrossCost;
    /**
     * Accumulated realised profit withdrawn from the position
     * @var string $withdrawPnl
     * @Type("string")
     * @SerializedName("withdrawPnl")
     */
    public $withdrawPnl;
    /**
     * Accumulated trading fees
     * @var string $tradeFee
     * @Type("string")
     * @SerializedName("tradeFee")
     */
    public $tradeFee;
    /**
     * Accumulated funding fees
     * @var string $fundingFee
     * @Type("string")
     * @SerializedName("fundingFee")
     */
    public $fundingFee;
    /**
     * Time when the position was opened
     * @var int $openTime
     * @Type("int")
     * @SerializedName("openTime")
     */
    public $openTime;
    /**
     * Time when the position was closed (default sorted in descending order)
     * @var int $closeTime
     * @Type("int")
     * @SerializedName("closeTime")
     */
    public $closeTime;
    /**
     * Opening price of the position
     * @var string $openPrice
     * @Type("string")
     * @SerializedName("openPrice")
     */
    public $openPrice;
    /**
     * Closing price of the position
     * @var string $closePrice
     * @Type("string")
     * @SerializedName("closePrice")
     */
    public $closePrice;
    /**
     * Margin Mode: CROSSï¼ŒISOLATED
     * - 'CROSS' : cross margin
     * - 'ISOLATED' : isolated margin
     * @var string $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode;
    /**
     *
     * @var string $realisedGrossCostNew
     * @Type("string")
     * @SerializedName("realisedGrossCostNew")
     */
    public $realisedGrossCostNew;
    /**
     * Tax
     * @var string $tax
     * @Type("string")
     * @SerializedName("tax")
     */
    public $tax;
    /**
     *
     * @var string|null $roe
     * @Type("string")
     * @SerializedName("roe")
     */
    public $roe;
    /**
     *
     * @var string $liquidAmount
     * @Type("string")
     * @SerializedName("liquidAmount")
     */
    public $liquidAmount;
    /**
     *
     * @var string $liquidPrice
     * @Type("string")
     * @SerializedName("liquidPrice")
     */
    public $liquidPrice;
    /**
     * Position side
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetPositionsHistoryItems::class,
            "json"
        );
    }
}
