<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Positions;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class AddIsolatedMarginResp implements Response
{
    /**
     * Position ID
     * @var string $id
     * @Type("string")
     * @SerializedName("id")
     */
    public $id;
    /**
     * Symbol of the contract, Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Auto deposit margin or not
     * @var bool $autoDeposit
     * @Type("bool")
     * @SerializedName("autoDeposit")
     */
    public $autoDeposit;
    /**
     * Maintenance margin requirement
     * @var float $maintMarginReq
     * @Type("float")
     * @SerializedName("maintMarginReq")
     */
    public $maintMarginReq;
    /**
     * Risk limit
     * @var int $riskLimit
     * @Type("int")
     * @SerializedName("riskLimit")
     */
    public $riskLimit;
    /**
     * Leverage o the order
     * @var float $realLeverage
     * @Type("float")
     * @SerializedName("realLeverage")
     */
    public $realLeverage;
    /**
     * Cross mode or not
     * @var bool $crossMode
     * @Type("bool")
     * @SerializedName("crossMode")
     */
    public $crossMode;
    /**
     * ADL ranking percentile
     * @var float $delevPercentage
     * @Type("float")
     * @SerializedName("delevPercentage")
     */
    public $delevPercentage;
    /**
     * Open time
     * @var int $openingTimestamp
     * @Type("int")
     * @SerializedName("openingTimestamp")
     */
    public $openingTimestamp;
    /**
     * Current timestamp
     * @var int $currentTimestamp
     * @Type("int")
     * @SerializedName("currentTimestamp")
     */
    public $currentTimestamp;
    /**
     * Current postion quantity
     * @var int $currentQty
     * @Type("int")
     * @SerializedName("currentQty")
     */
    public $currentQty;
    /**
     * Current postion value
     * @var float $currentCost
     * @Type("float")
     * @SerializedName("currentCost")
     */
    public $currentCost;
    /**
     * Current commission
     * @var float $currentComm
     * @Type("float")
     * @SerializedName("currentComm")
     */
    public $currentComm;
    /**
     * Unrealised value
     * @var float $unrealisedCost
     * @Type("float")
     * @SerializedName("unrealisedCost")
     */
    public $unrealisedCost;
    /**
     * Accumulated realised gross profit value
     * @var float $realisedGrossCost
     * @Type("float")
     * @SerializedName("realisedGrossCost")
     */
    public $realisedGrossCost;
    /**
     * Current realised position value
     * @var float $realisedCost
     * @Type("float")
     * @SerializedName("realisedCost")
     */
    public $realisedCost;
    /**
     * Opened position or not
     * @var bool $isOpen
     * @Type("bool")
     * @SerializedName("isOpen")
     */
    public $isOpen;
    /**
     * Mark price
     * @var float $markPrice
     * @Type("float")
     * @SerializedName("markPrice")
     */
    public $markPrice;
    /**
     * Mark value
     * @var float $markValue
     * @Type("float")
     * @SerializedName("markValue")
     */
    public $markValue;
    /**
     * Position value
     * @var float $posCost
     * @Type("float")
     * @SerializedName("posCost")
     */
    public $posCost;
    /**
     * added margin
     * @var float $posCross
     * @Type("float")
     * @SerializedName("posCross")
     */
    public $posCross;
    /**
     * Leverage margin
     * @var float $posInit
     * @Type("float")
     * @SerializedName("posInit")
     */
    public $posInit;
    /**
     * Bankruptcy cost
     * @var float $posComm
     * @Type("float")
     * @SerializedName("posComm")
     */
    public $posComm;
    /**
     * Funding fees paid out
     * @var float $posLoss
     * @Type("float")
     * @SerializedName("posLoss")
     */
    public $posLoss;
    /**
     * Position margin
     * @var float $posMargin
     * @Type("float")
     * @SerializedName("posMargin")
     */
    public $posMargin;
    /**
     * Maintenance margin
     * @var float $posMaint
     * @Type("float")
     * @SerializedName("posMaint")
     */
    public $posMaint;
    /**
     * Position margin
     * @var float $maintMargin
     * @Type("float")
     * @SerializedName("maintMargin")
     */
    public $maintMargin;
    /**
     * Accumulated realised gross profit value
     * @var float $realisedGrossPnl
     * @Type("float")
     * @SerializedName("realisedGrossPnl")
     */
    public $realisedGrossPnl;
    /**
     * Realised profit and loss
     * @var float $realisedPnl
     * @Type("float")
     * @SerializedName("realisedPnl")
     */
    public $realisedPnl;
    /**
     * Unrealised profit and loss
     * @var float $unrealisedPnl
     * @Type("float")
     * @SerializedName("unrealisedPnl")
     */
    public $unrealisedPnl;
    /**
     * Profit-loss ratio of the position
     * @var float $unrealisedPnlPcnt
     * @Type("float")
     * @SerializedName("unrealisedPnlPcnt")
     */
    public $unrealisedPnlPcnt;
    /**
     * Rate of return on investment
     * @var float $unrealisedRoePcnt
     * @Type("float")
     * @SerializedName("unrealisedRoePcnt")
     */
    public $unrealisedRoePcnt;
    /**
     * Average entry price
     * @var float $avgEntryPrice
     * @Type("float")
     * @SerializedName("avgEntryPrice")
     */
    public $avgEntryPrice;
    /**
     * Liquidation price
     * @var float $liquidationPrice
     * @Type("float")
     * @SerializedName("liquidationPrice")
     */
    public $liquidationPrice;
    /**
     * Bankruptcy price
     * @var float $bankruptPrice
     * @Type("float")
     * @SerializedName("bankruptPrice")
     */
    public $bankruptPrice;
    /**
     * userId
     * @var int $userId
     * @Type("int")
     * @SerializedName("userId")
     */
    public $userId;
    /**
     * Currency used to clear and settle the trades
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            AddIsolatedMarginResp::class,
            "json"
        );
    }
}
