<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetOrderByOrderIdResp implements Response
{
    /**
     * Order ID
     * @var string $id
     * @Type("string")
     * @SerializedName("id")
     */
    public $id;
    /**
     * Symbol of the contract, Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Order type, market order or limit order
     * @var string $type
     * @Type("string")
     * @SerializedName("type")
     */
    public $type;
    /**
     * Transaction side
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Order price
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Order quantity
     * @var int $size
     * @Type("int")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Order value
     * @var string $value
     * @Type("string")
     * @SerializedName("value")
     */
    public $value;
    /**
     * Executed size of funds
     * @var string $dealValue
     * @Type("string")
     * @SerializedName("dealValue")
     */
    public $dealValue;
    /**
     * Executed quantity
     * @var int $dealSize
     * @Type("int")
     * @SerializedName("dealSize")
     */
    public $dealSize;
    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into these strategies: CN, CO, CB. Not supported DC at the moment.
     * @var string $stp
     * @Type("string")
     * @SerializedName("stp")
     */
    public $stp;
    /**
     * Stop order type (stop limit or stop market)
     * @var string $stop
     * @Type("string")
     * @SerializedName("stop")
     */
    public $stop;
    /**
     * Trigger price type of stop orders
     * @var string $stopPriceType
     * @Type("string")
     * @SerializedName("stopPriceType")
     */
    public $stopPriceType;
    /**
     * Mark to show whether the stop order is triggered
     * @var bool $stopTriggered
     * @Type("bool")
     * @SerializedName("stopTriggered")
     */
    public $stopTriggered;
    /**
     * Trigger price of stop orders
     * @var float $stopPrice
     * @Type("float")
     * @SerializedName("stopPrice")
     */
    public $stopPrice;
    /**
     * Time in force policy type
     * @var string $timeInForce
     * @Type("string")
     * @SerializedName("timeInForce")
     */
    public $timeInForce;
    /**
     * Mark of post only
     * @var bool $postOnly
     * @Type("bool")
     * @SerializedName("postOnly")
     */
    public $postOnly;
    /**
     * Mark of the hidden order
     * @var bool $hidden
     * @Type("bool")
     * @SerializedName("hidden")
     */
    public $hidden;
    /**
     * Mark of the iceberg order
     * @var bool $iceberg
     * @Type("bool")
     * @SerializedName("iceberg")
     */
    public $iceberg;
    /**
     * Leverage of the order
     * @var string $leverage
     * @Type("string")
     * @SerializedName("leverage")
     */
    public $leverage;
    /**
     * A mark to forcely hold the funds for an order
     * @var bool $forceHold
     * @Type("bool")
     * @SerializedName("forceHold")
     */
    public $forceHold;
    /**
     * A mark to close the position
     * @var bool $closeOrder
     * @Type("bool")
     * @SerializedName("closeOrder")
     */
    public $closeOrder;
    /**
     * Visible size of the iceberg order
     * @var int $visibleSize
     * @Type("int")
     * @SerializedName("visibleSize")
     */
    public $visibleSize;
    /**
     * Unique order id created by users to identify their orders
     * @var string $clientOid
     * @Type("string")
     * @SerializedName("clientOid")
     */
    public $clientOid;
    /**
     * Remark
     * @var string $remark
     * @Type("string")
     * @SerializedName("remark")
     */
    public $remark;
    /**
     * tag order source
     * @var string $tags
     * @Type("string")
     * @SerializedName("tags")
     */
    public $tags;
    /**
     * Mark of the active orders
     * @var bool $isActive
     * @Type("bool")
     * @SerializedName("isActive")
     */
    public $isActive;
    /**
     * Mark of the canceled orders
     * @var bool $cancelExist
     * @Type("bool")
     * @SerializedName("cancelExist")
     */
    public $cancelExist;
    /**
     * Time the order created
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;
    /**
     * last update time
     * @var int $updatedAt
     * @Type("int")
     * @SerializedName("updatedAt")
     */
    public $updatedAt;
    /**
     * Order Endtime
     * @var int|null $endAt
     * @Type("int")
     * @SerializedName("endAt")
     */
    public $endAt;
    /**
     * Order create time in nanosecond
     * @var int $orderTime
     * @Type("int")
     * @SerializedName("orderTime")
     */
    public $orderTime;
    /**
     * settlement currency
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;
    /**
     * Margin mode: ISOLATED (isolated), CROSS (cross margin).
     * @var string $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode;
    /**
     * Average transaction price, forward contract average transaction price = sum (transaction value) / sum (transaction quantity), reverse contract average transaction price = sum (transaction quantity) / sum (transaction value). Transaction quantity = lots * multiplier
     * @var string $avgDealPrice
     * @Type("string")
     * @SerializedName("avgDealPrice")
     */
    public $avgDealPrice;
    /**
     * Value of the executed orders
     * @var int $filledSize
     * @Type("int")
     * @SerializedName("filledSize")
     */
    public $filledSize;
    /**
     * Executed order quantity
     * @var string $filledValue
     * @Type("string")
     * @SerializedName("filledValue")
     */
    public $filledValue;
    /**
     * order status: “open” or “done”
     * @var string $status
     * @Type("string")
     * @SerializedName("status")
     */
    public $status;
    /**
     * A mark to reduce the position size only
     * @var bool $reduceOnly
     * @Type("bool")
     * @SerializedName("reduceOnly")
     */
    public $reduceOnly;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetOrderByOrderIdResp::class,
            "json"
        );
    }
}
