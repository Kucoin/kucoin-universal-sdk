<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Order;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Request;

class GetTradeHistoryItems implements Request
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Trade ID
     * @var string $tradeId
     * @Type("string")
     * @SerializedName("tradeId")
     */
    public $tradeId;
    /**
     * Order ID
     * @var string $orderId
     * @Type("string")
     * @SerializedName("orderId")
     */
    public $orderId;
    /**
     * Transaction side
     * - 'buy' : buy
     * - 'sell' : sell
     * @var string $side
     * @Type("string")
     * @SerializedName("side")
     */
    public $side;
    /**
     * Liquidity-taker or -maker
     * - 'taker' : taker
     * - 'maker' : maker
     * @var string $liquidity
     * @Type("string")
     * @SerializedName("liquidity")
     */
    public $liquidity;
    /**
     * Whether to force processing as a taker
     * @var bool $forceTaker
     * @Type("bool")
     * @SerializedName("forceTaker")
     */
    public $forceTaker;
    /**
     * Filled price
     * @var string $price
     * @Type("string")
     * @SerializedName("price")
     */
    public $price;
    /**
     * Filled amount
     * @var int $size
     * @Type("int")
     * @SerializedName("size")
     */
    public $size;
    /**
     * Order value
     * @var string $value
     * @Type("string")
     * @SerializedName("value")
     */
    public $value;
    /**
     * Opening transaction fee
     * @var string $openFeePay
     * @Type("string")
     * @SerializedName("openFeePay")
     */
    public $openFeePay;
    /**
     * Closing transaction fee
     * @var string $closeFeePay
     * @Type("string")
     * @SerializedName("closeFeePay")
     */
    public $closeFeePay;
    /**
     * A mark to the stop order type
     * @var string $stop
     * @Type("string")
     * @SerializedName("stop")
     */
    public $stop;
    /**
     * Fee Rate
     * @var string $feeRate
     * @Type("string")
     * @SerializedName("feeRate")
     */
    public $feeRate;
    /**
     * Fixed fees (Deprecated field, no actual use of the value field)
     * @var string $fixFee
     * @Type("string")
     * @SerializedName("fixFee")
     */
    public $fixFee;
    /**
     * Charging currency
     * @var string $feeCurrency
     * @Type("string")
     * @SerializedName("feeCurrency")
     */
    public $feeCurrency;
    /**
     * Trade time in nanoseconds
     * @var int $tradeTime
     * @Type("int")
     * @SerializedName("tradeTime")
     */
    public $tradeTime;
    /**
     * Deprecated field, no actual use of the value field
     * @var string $subTradeType
     * @Type("string")
     * @SerializedName("subTradeType")
     */
    public $subTradeType;
    /**
     * Margin mode: ISOLATED (isolated), CROSS (cross margin).
     * - 'ISOLATED' : Isolated margin
     * - 'CROSS' : Cross margin
     * @var string $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode;
    /**
     * Settle currency
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;
    /**
     * Order type
     * - 'limit' : limit order
     * - 'market' : market order
     * - 'limit_stop' : stop limit order
     * - 'market_stop' : stop market order
     * @var string $displayType
     * @Type("string")
     * @SerializedName("displayType")
     */
    public $displayType;
    /**
     * Trading fee
     * @var string $fee
     * @Type("string")
     * @SerializedName("fee")
     */
    public $fee;
    /**
     * Order type
     * - 'market' : market
     * - 'limit' : limit
     * @var string $orderType
     * @Type("string")
     * @SerializedName("orderType")
     */
    public $orderType;
    /**
     * Trade type (trade, liquid, adl or settlement)
     * - 'trade' : trade
     * - 'liquid' : liquid
     * - 'adl' : adl
     * - 'settlement' : settlement
     * @var string $tradeType
     * @Type("string")
     * @SerializedName("tradeType")
     */
    public $tradeType;
    /**
     * Order creation time
     * @var int $createdAt
     * @Type("int")
     * @SerializedName("createdAt")
     */
    public $createdAt;
    /**
     * Opening tax fee (Only KYC users in some regions have this parameter)
     * @var string $openFeeTaxPay
     * @Type("string")
     * @SerializedName("openFeeTaxPay")
     */
    public $openFeeTaxPay;
    /**
     * Close tax fee (Only KYC users in some regions have this parameter)
     * @var string $closeFeeTaxPay
     * @Type("string")
     * @SerializedName("closeFeeTaxPay")
     */
    public $closeFeeTaxPay;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize(
            $json,
            GetTradeHistoryItems::class,
            "json"
        );
    }
}
