<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPublic;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketService;
use React\Promise\PromiseInterface;

class FuturesPublicWsImpl implements FuturesPublicWs
{
    /**@var WebSocketService $wsService*/
    private $wsService;

    public function __construct(WebSocketService $wsService)
    {
        $this->wsService = $wsService;
    }

    public function announcement(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contract/announcement";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            AnnouncementEvent::createCallback($callback)
        );
    }

    public function execution(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/execution";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            ExecutionEvent::createCallback($callback)
        );
    }

    public function instrument(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contract/instrument";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            InstrumentEvent::createCallback($callback)
        );
    }

    public function klines(
        string $symbol,
        string $type,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/limitCandle";

        $args = [implode("_", [$symbol, $type])];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            KlinesEvent::createCallback($callback)
        );
    }

    public function orderbookIncrement(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/level2";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            OrderbookIncrementEvent::createCallback($callback)
        );
    }

    public function orderbookLevel50(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/level2Depth50";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            OrderbookLevel50Event::createCallback($callback)
        );
    }

    public function orderbookLevel5(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/level2Depth5";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            OrderbookLevel5Event::createCallback($callback)
        );
    }

    public function symbolSnapshot(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/snapshot";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            SymbolSnapshotEvent::createCallback($callback)
        );
    }

    public function tickerV1(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/ticker";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            TickerV1Event::createCallback($callback)
        );
    }

    public function tickerV2(
        string $symbol,
        callable $callback
    ): PromiseInterface {
        $topicPrefix = "/contractMarket/tickerV2";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            TickerV2Event::createCallback($callback)
        );
    }

    public function unSubscribe(string $id): PromiseInterface
    {
        return $this->wsService->unsubscribe($id);
    }

    public function start(): PromiseInterface
    {
        return $this->wsService->start();
    }

    public function stop(): PromiseInterface
    {
        return $this->wsService->stop();
    }
}
