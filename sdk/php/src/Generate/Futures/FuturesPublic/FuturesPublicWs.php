<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPublic;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketService;

interface FuturesPublicWs
{
    /**
     * announcement
     * Subscribe this topic to get Funding Fee Settlement.
     * push frequency: Settlement is made every 8 hours, real-time push
     * @param callable $callback function(string $topic, string $subject, AnnouncementEvent $data): void
     */
    public function announcement(string $symbol, callable $callback): string;

    /**
     * Match execution data.
     * For each order executed, the system will send you the match messages in the format as following.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, ExecutionEvent $data): void
     */
    public function execution(string $symbol, callable $callback): string;

    /**
     * instrument
     * Subscribe this topic to get the mark Price, index Price or funding fee Rate
     * push frequency: mark.index.price 1s, funding.rate 1min
     * @param callable $callback function(string $topic, string $subject, InstrumentEvent $data): void
     */
    public function instrument(string $symbol, callable $callback): string;

    /**
     * Klines
     * Subscribe to this topic to get K-Line data.
     * push frequency: 1s
     * @param callable $callback function(string $topic, string $subject, KlinesEvent $data): void
     */
    public function klines(
        string $symbol,
        string $type,
        callable $callback
    ): string;

    /**
     * Orderbook - Increment
     * The system will return the increment change orderbook data (all depth). If there is no change in the market, data will not be pushed.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, OrderbookIncrementEvent $data): void
     */
    public function orderbookIncrement(
        string $symbol,
        callable $callback
    ): string;

    /**
     * Orderbook - Level50
     * The depth50 market data.
     * push frequency: 100ms
     * @param callable $callback function(string $topic, string $subject, OrderbookLevel50Event $data): void
     */
    public function orderbookLevel50(
        string $symbol,
        callable $callback
    ): string;

    /**
     * Orderbook - Level5
     * The system will return the 5 best ask/bid orders data. If there is no change in the market, data will not be pushed
     * push frequency: 100ms
     * @param callable $callback function(string $topic, string $subject, OrderbookLevel5Event $data): void
     */
    public function orderbookLevel5(string $symbol, callable $callback): string;

    /**
     * Symbol Snapshot
     * Get symbol snapshot.
     * push frequency: 5000ms
     * @param callable $callback function(string $topic, string $subject, SymbolSnapshotEvent $data): void
     */
    public function symbolSnapshot(string $symbol, callable $callback): string;

    /**
     * Get Ticker(not recommended)
     * Subscribe to this topic to get real-time pushes on BBO changes. It is not recommended to use this topic any more. For real-time ticker information, please subscribe /contractMarket/tickerV2:{symbol}.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, TickerV1Event $data): void
     */
    public function tickerV1(string $symbol, callable $callback): string;

    /**
     * Get Ticker V2
     * Subscribe to this topic to get real-time pushes of BBO changes. After subscription, when there are changes in the order book (not necessarily ask1/bid1 changes), the system will push the real-time ticker symbol information to you.
     * push frequency: real-time
     * @param callable $callback function(string $topic, string $subject, TickerV2Event $data): void
     */
    public function tickerV2(string $symbol, callable $callback): string;

    /**
     * Unsubscribe from topics
     */
    public function unSubscribe(string $id);

    /**
     * Start websocket
     */
    public function start();

    /**
     * Stop websocket
     */
    public function stop();
}

class FuturesPublicWsImpl implements FuturesPublicWs
{
    /**@var WebSocketService $wsService*/
    private $wsService;

    public function __construct(WebSocketService $wsService)
    {
        $this->wsService = $wsService;
    }

    public function announcement(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contract/announcement";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new AnnouncementEventCallbackWrapper($callback)
        );
    }

    public function execution(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contractMarket/execution";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new ExecutionEventCallbackWrapper($callback)
        );
    }

    public function instrument(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contract/instrument";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new InstrumentEventCallbackWrapper($callback)
        );
    }

    public function klines(
        string $symbol,
        string $type,
        callable $callback
    ): string {
        $topicPrefix = "/contractMarket/limitCandle";

        $args = [implode("_", [$symbol, $type])];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new KlinesEventCallbackWrapper($callback)
        );
    }

    public function orderbookIncrement(
        string $symbol,
        callable $callback
    ): string {
        $topicPrefix = "/contractMarket/level2";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new OrderbookIncrementEventCallbackWrapper($callback)
        );
    }

    public function orderbookLevel50(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contractMarket/level2Depth50";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new OrderbookLevel50EventCallbackWrapper($callback)
        );
    }

    public function orderbookLevel5(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contractMarket/level2Depth5";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new OrderbookLevel5EventCallbackWrapper($callback)
        );
    }

    public function symbolSnapshot(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contractMarket/snapshot";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new SymbolSnapshotEventCallbackWrapper($callback)
        );
    }

    public function tickerV1(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contractMarket/ticker";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new TickerV1EventCallbackWrapper($callback)
        );
    }

    public function tickerV2(string $symbol, callable $callback): string
    {
        $topicPrefix = "/contractMarket/tickerV2";

        $args = [$symbol];

        return $this->wsService->subscribe(
            $topicPrefix,
            $args,
            new TickerV2EventCallbackWrapper($callback)
        );
    }

    public function unSubscribe(string $id)
    {
        return $this->wsService->unsubscribe($id);
    }

    public function start()
    {
        return $this->wsService->start();
    }

    public function stop()
    {
        return $this->wsService->stop();
    }
}
