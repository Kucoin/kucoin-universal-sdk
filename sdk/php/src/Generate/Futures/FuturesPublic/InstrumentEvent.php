<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\FuturesPublic;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Internal\Interfaces\WebSocketMessageCallback;
use KuCoin\UniversalSDK\Model\WsMessage;
use JMS\Serializer\Serializer;

class InstrumentEvent implements Response
{
    /**
     * Granularity (predicted funding rate: 1-min granularity: 60000; Funding rate: 8-hours granularity: 28800000.)
     * @var int $granularity
     * @Type("int")
     * @SerializedName("granularity")
     */
    public $granularity;
    /**
     *
     * @var float|null $fundingRate
     * @Type("float")
     * @SerializedName("fundingRate")
     */
    public $fundingRate;
    /**
     *
     * @var int $timestamp
     * @Type("int")
     * @SerializedName("timestamp")
     */
    public $timestamp;
    /**
     *
     * @var float|null $markPrice
     * @Type("float")
     * @SerializedName("markPrice")
     */
    public $markPrice;
    /**
     *
     * @var float|null $indexPrice
     * @Type("float")
     * @SerializedName("indexPrice")
     */
    public $indexPrice;

    private function __construct() {}

    /**
     * common response
     * @Exclude()
     * @var WsMessage $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }
    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        return $serializer->deserialize($json, InstrumentEvent::class, "json");
    }

    /**
     * @param callable $callback function(string $topic, string $subject, InstrumentEvent $data): void
     */
    public static function createCallback(
        callable $callback
    ): InstrumentEventCallbackWrapper {
        return new InstrumentEventCallbackWrapper($callback);
    }
}

class InstrumentEventCallbackWrapper implements WebSocketMessageCallback
{
    /**
     * @var callable
     */
    private $callback;

    /**
     * @param callable $callback function(string $topic, string $subject, InstrumentEvent $data): void
     */
    public function __construct(callable $callback)
    {
        $this->callback = $callback;
    }

    public function onMessage(WsMessage $msg, Serializer $serializer)
    {
        $event = InstrumentEvent::jsonDeserialize($msg->rawData, $serializer);
        $event->setCommonResponse($msg);
        $this->callback($msg->topic, $msg->subject, $event);
    }
}
