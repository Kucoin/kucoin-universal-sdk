<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Fundingfees;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Response;
use KuCoin\UniversalSDK\Model\RestResponse;

class GetCurrentFundingRateResp implements Response
{
    /**
     * Funding Rate Symbol
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Granularity (milliseconds)
     * @var int $granularity
     * @Type("int")
     * @SerializedName("granularity")
     */
    public $granularity;
    /**
     * The funding rate settlement time point of the previous cycle (milliseconds) Before going live, the system will pre-generate the first funding rate record to ensure the billing cycle can start immediately after the contract is launched.  The timePoint field represents the time the funding rate data was generated, not the actual time it takes effect or is settled.  The first actual settlement will occur at the designated settlement time (00:00 / 08:00 / 14:00) after the contract goes live.
     * @var int $timePoint
     * @Type("int")
     * @SerializedName("timePoint")
     */
    public $timePoint;
    /**
     * Current cycle funding rate
     * @var float $value
     * @Type("float")
     * @SerializedName("value")
     */
    public $value;
    /**
     * Predicted funding rate
     * @var float $predictedValue
     * @Type("float")
     * @SerializedName("predictedValue")
     */
    public $predictedValue;
    /**
     * Maximum Funding Rate
     * @var float $fundingRateCap
     * @Type("float")
     * @SerializedName("fundingRateCap")
     */
    public $fundingRateCap;
    /**
     * Minimum Funding Rate
     * @var float $fundingRateFloor
     * @Type("float")
     * @SerializedName("fundingRateFloor")
     */
    public $fundingRateFloor;
    /**
     * Indicates whether the current funding fee is charged within this cycle
     * - 1 : Indicates that funding will be charged in the current cycle
     * - 0 : Indicates a cross-cycle expense record that is not charged in the current cycle.
     * @var int $period
     * @Type("int")
     * @SerializedName("period")
     */
    public $period;
    /**
     * Indicates the next funding fee settlement time point, which can be used to synchronize periodic settlement timing.
     * @var int $fundingTime
     * @Type("int")
     * @SerializedName("fundingTime")
     */
    public $fundingTime;

    /**
     * common response
     * @Exclude()
     * @var RestResponse $commonResponse
     */
    public $commonResponse;

    public function setCommonResponse($response): void
    {
        $this->commonResponse = $response;
    }

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json === null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetCurrentFundingRateResp::class,
            "json"
        );
    }
}
