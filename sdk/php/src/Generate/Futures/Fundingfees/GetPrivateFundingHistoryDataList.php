<?php
// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

namespace KuCoin\UniversalSDK\Generate\Futures\Fundingfees;

use JMS\Serializer\Annotation\Exclude;
use JMS\Serializer\Annotation\SerializedName;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Serializer;
use KuCoin\UniversalSDK\Internal\Interfaces\Serializable;

class GetPrivateFundingHistoryDataList implements Serializable
{
    /**
     * @var string[] $pathVarMapping
     * @Exclude()
     */
    public static $pathVarMapping = [];

    public function pathVarMapping()
    {
        return self::$pathVarMapping;
    }
    /**
     * ID
     * @var int $id
     * @Type("int")
     * @SerializedName("id")
     */
    public $id;
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     * @var string $symbol
     * @Type("string")
     * @SerializedName("symbol")
     */
    public $symbol;
    /**
     * Time point (milliseconds)
     * @var int $timePoint
     * @Type("int")
     * @SerializedName("timePoint")
     */
    public $timePoint;
    /**
     * Funding rate
     * @var float $fundingRate
     * @Type("float")
     * @SerializedName("fundingRate")
     */
    public $fundingRate;
    /**
     * Mark price
     * @var float $markPrice
     * @Type("float")
     * @SerializedName("markPrice")
     */
    public $markPrice;
    /**
     * Position size
     * @var int $positionQty
     * @Type("int")
     * @SerializedName("positionQty")
     */
    public $positionQty;
    /**
     * Position value at settlement period
     * @var float $positionCost
     * @Type("float")
     * @SerializedName("positionCost")
     */
    public $positionCost;
    /**
     * Settled funding fees A positive number means that the user received the funding fee, and vice versa.
     * @var float $funding
     * @Type("float")
     * @SerializedName("funding")
     */
    public $funding;
    /**
     * Settlement currency
     * @var string $settleCurrency
     * @Type("string")
     * @SerializedName("settleCurrency")
     */
    public $settleCurrency;
    /**
     * Context
     * @var string $context
     * @Type("string")
     * @SerializedName("context")
     */
    public $context;
    /**
     * Margin mode: ISOLATED (isolated), CROSS (cross margin).
     * - 'ISOLATED' : isolated margin
     * - 'CROSS' : cross margin
     * @var string $marginMode
     * @Type("string")
     * @SerializedName("marginMode")
     */
    public $marginMode;

    private function __construct() {}

    /**
     * @param Serializer $serializer
     * @return string
     */
    public function jsonSerialize($serializer)
    {
        return $serializer->serialize($this, "json");
    }

    /**
     * @param string $json
     * @param Serializer $serializer
     * @return self
     */
    public static function jsonDeserialize($json, $serializer)
    {
        if ($json == null) {
            return new self();
        }
        return $serializer->deserialize(
            $json,
            GetPrivateFundingHistoryDataList::class,
            "json"
        );
    }
}
