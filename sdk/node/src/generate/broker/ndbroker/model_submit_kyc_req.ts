// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class SubmitKYCReq implements Serializable {
    /**
     * client uid
     */
    clientUid: string;

    /**
     * first Name
     */
    firstName: string;

    /**
     * last Name
     */
    lastName: string;

    /**
     * ISO country code
     */
    issueCountry: string;

    /**
     * Birth Date
     */
    birthDate: string;

    /**
     * Identity type
     */
    identityType: SubmitKYCReq.IdentityTypeEnum;

    /**
     * Identity Number
     */
    identityNumber: string;

    /**
     * expire Date. If there is no expiration date, please fill in: 2099-01-01
     */
    expireDate: string;

    /**
     * **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     */
    frontPhoto: string;

    /**
     * **Optional when identityType=passport/bvn,** Back photo of ID, same as above
     */
    backendPhoto: string;

    /**
     * Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     */
    facePhoto: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.clientUid = null;
        // @ts-ignore
        this.firstName = null;
        // @ts-ignore
        this.lastName = null;
        // @ts-ignore
        this.issueCountry = null;
        // @ts-ignore
        this.birthDate = null;
        // @ts-ignore
        this.identityType = null;
        // @ts-ignore
        this.identityNumber = null;
        // @ts-ignore
        this.expireDate = null;
        // @ts-ignore
        this.frontPhoto = null;
        // @ts-ignore
        this.backendPhoto = null;
        // @ts-ignore
        this.facePhoto = null;
    }
    /**
     * Creates a new instance of the `SubmitKYCReq` class.
     * The builder pattern allows step-by-step construction of a `SubmitKYCReq` object.
     */
    static builder(): SubmitKYCReqBuilder {
        return new SubmitKYCReqBuilder(new SubmitKYCReq());
    }

    /**
     * Creates a new instance of the `SubmitKYCReq` class with the given data.
     */
    static create(data: {
        /**
         * client uid
         */
        clientUid: string;
        /**
         * first Name
         */
        firstName: string;
        /**
         * last Name
         */
        lastName: string;
        /**
         * ISO country code
         */
        issueCountry: string;
        /**
         * Birth Date
         */
        birthDate: string;
        /**
         * Identity type
         */
        identityType: SubmitKYCReq.IdentityTypeEnum;
        /**
         * Identity Number
         */
        identityNumber: string;
        /**
         * expire Date. If there is no expiration date, please fill in: 2099-01-01
         */
        expireDate: string;
        /**
         * **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
         */
        frontPhoto: string;
        /**
         * **Optional when identityType=passport/bvn,** Back photo of ID, same as above
         */
        backendPhoto: string;
        /**
         * Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
         */
        facePhoto: string;
    }): SubmitKYCReq {
        let obj = new SubmitKYCReq();
        obj.clientUid = data.clientUid;
        obj.firstName = data.firstName;
        obj.lastName = data.lastName;
        obj.issueCountry = data.issueCountry;
        obj.birthDate = data.birthDate;
        obj.identityType = data.identityType;
        obj.identityNumber = data.identityNumber;
        obj.expireDate = data.expireDate;
        obj.frontPhoto = data.frontPhoto;
        obj.backendPhoto = data.backendPhoto;
        obj.facePhoto = data.facePhoto;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): SubmitKYCReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): SubmitKYCReq {
        return plainToClassFromExist(new SubmitKYCReq(), jsonObject);
    }
}

export namespace SubmitKYCReq {
    export enum IdentityTypeEnum {
        /**
         * id card
         */
        IDCARD = <any>'idcard',
        /**
         * driving license
         */
        DRIVINGLICENSE = <any>'drivinglicense',
        /**
         * passport
         */
        PASSPORT = <any>'passport',
        /**
         * bvn
         */
        BVN = <any>'bvn',
    }
}

export class SubmitKYCReqBuilder {
    constructor(readonly obj: SubmitKYCReq) {
        this.obj = obj;
    }
    /**
     * client uid
     */
    setClientUid(value: string): SubmitKYCReqBuilder {
        this.obj.clientUid = value;
        return this;
    }

    /**
     * first Name
     */
    setFirstName(value: string): SubmitKYCReqBuilder {
        this.obj.firstName = value;
        return this;
    }

    /**
     * last Name
     */
    setLastName(value: string): SubmitKYCReqBuilder {
        this.obj.lastName = value;
        return this;
    }

    /**
     * ISO country code
     */
    setIssueCountry(value: string): SubmitKYCReqBuilder {
        this.obj.issueCountry = value;
        return this;
    }

    /**
     * Birth Date
     */
    setBirthDate(value: string): SubmitKYCReqBuilder {
        this.obj.birthDate = value;
        return this;
    }

    /**
     * Identity type
     */
    setIdentityType(value: SubmitKYCReq.IdentityTypeEnum): SubmitKYCReqBuilder {
        this.obj.identityType = value;
        return this;
    }

    /**
     * Identity Number
     */
    setIdentityNumber(value: string): SubmitKYCReqBuilder {
        this.obj.identityNumber = value;
        return this;
    }

    /**
     * expire Date. If there is no expiration date, please fill in: 2099-01-01
     */
    setExpireDate(value: string): SubmitKYCReqBuilder {
        this.obj.expireDate = value;
        return this;
    }

    /**
     * **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     */
    setFrontPhoto(value: string): SubmitKYCReqBuilder {
        this.obj.frontPhoto = value;
        return this;
    }

    /**
     * **Optional when identityType=passport/bvn,** Back photo of ID, same as above
     */
    setBackendPhoto(value: string): SubmitKYCReqBuilder {
        this.obj.backendPhoto = value;
        return this;
    }

    /**
     * Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
     */
    setFacePhoto(value: string): SubmitKYCReqBuilder {
        this.obj.facePhoto = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): SubmitKYCReq {
        return this.obj;
    }
}
