// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class TransferReq implements Serializable {
    /**
     * Currency
     */
    currency: string;

    /**
     * Transfer Amount (must be a positive integer in the currency\'s precision)
     */
    amount: string;

    /**
     * Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
     */
    direction: TransferReq.DirectionEnum;

    /**
     * Broker account types: MAIN (Funding account), TRADE (Spot trading account)
     */
    accountType: TransferReq.AccountTypeEnum;

    /**
     * Broker sub-account UID, must be the Broker sub-account created by the current Broker user.
     */
    specialUid: string;

    /**
     * Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
     */
    specialAccountType: TransferReq.SpecialAccountTypeEnum;

    /**
     * Client Order ID, the unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
     */
    clientOid: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.currency = null;
        // @ts-ignore
        this.amount = null;
        // @ts-ignore
        this.direction = null;
        // @ts-ignore
        this.accountType = null;
        // @ts-ignore
        this.specialUid = null;
        // @ts-ignore
        this.specialAccountType = null;
        // @ts-ignore
        this.clientOid = null;
    }
    /**
     * Creates a new instance of the `TransferReq` class.
     * The builder pattern allows step-by-step construction of a `TransferReq` object.
     */
    static builder(): TransferReqBuilder {
        return new TransferReqBuilder(new TransferReq());
    }

    /**
     * Creates a new instance of the `TransferReq` class with the given data.
     */
    static create(data: {
        /**
         * Currency
         */
        currency: string;
        /**
         * Transfer Amount (must be a positive integer in the currency\'s precision)
         */
        amount: string;
        /**
         * Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
         */
        direction: TransferReq.DirectionEnum;
        /**
         * Broker account types: MAIN (Funding account), TRADE (Spot trading account)
         */
        accountType: TransferReq.AccountTypeEnum;
        /**
         * Broker sub-account UID, must be the Broker sub-account created by the current Broker user.
         */
        specialUid: string;
        /**
         * Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
         */
        specialAccountType: TransferReq.SpecialAccountTypeEnum;
        /**
         * Client Order ID, the unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
         */
        clientOid: string;
    }): TransferReq {
        let obj = new TransferReq();
        obj.currency = data.currency;
        obj.amount = data.amount;
        obj.direction = data.direction;
        obj.accountType = data.accountType;
        obj.specialUid = data.specialUid;
        obj.specialAccountType = data.specialAccountType;
        obj.clientOid = data.clientOid;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): TransferReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): TransferReq {
        return plainToClassFromExist(new TransferReq(), jsonObject);
    }
}

export namespace TransferReq {
    export enum DirectionEnum {
        /**
         *
         */
        OUT = <any>'OUT',
        /**
         *
         */
        IN = <any>'IN',
    }
    export enum AccountTypeEnum {
        /**
         *
         */
        MAIN = <any>'MAIN',
        /**
         *
         */
        TRADE = <any>'TRADE',
    }
    export enum SpecialAccountTypeEnum {
        /**
         *
         */
        MAIN = <any>'MAIN',
        /**
         *
         */
        TRADE = <any>'TRADE',
    }
}

export class TransferReqBuilder {
    constructor(readonly obj: TransferReq) {
        this.obj = obj;
    }
    /**
     * Currency
     */
    setCurrency(value: string): TransferReqBuilder {
        this.obj.currency = value;
        return this;
    }

    /**
     * Transfer Amount (must be a positive integer in the currency\'s precision)
     */
    setAmount(value: string): TransferReqBuilder {
        this.obj.amount = value;
        return this;
    }

    /**
     * Fund transfer direction: OUT (Broker account is transferred to Broker sub-account), IN (Broker sub-account is transferred to Broker account)
     */
    setDirection(value: TransferReq.DirectionEnum): TransferReqBuilder {
        this.obj.direction = value;
        return this;
    }

    /**
     * Broker account types: MAIN (Funding account), TRADE (Spot trading account)
     */
    setAccountType(value: TransferReq.AccountTypeEnum): TransferReqBuilder {
        this.obj.accountType = value;
        return this;
    }

    /**
     * Broker sub-account UID, must be the Broker sub-account created by the current Broker user.
     */
    setSpecialUid(value: string): TransferReqBuilder {
        this.obj.specialUid = value;
        return this;
    }

    /**
     * Broker sub-account types: MAIN (Funding account), TRADE (Spot trading account)
     */
    setSpecialAccountType(value: TransferReq.SpecialAccountTypeEnum): TransferReqBuilder {
        this.obj.specialAccountType = value;
        return this;
    }

    /**
     * Client Order ID, the unique identifier created by the client. It is recommended to use UUID. The maximum length is 128 bits.
     */
    setClientOid(value: string): TransferReqBuilder {
        this.obj.clientOid = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): TransferReq {
        return this.obj;
    }
}
