// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { RestResponse } from '@model/common';
import { Response } from '@internal/interfaces/serializable';

export class GetPositionDetailsResp implements Response<RestResponse> {
    /**
     * Position ID
     */
    id: string;

    /**
     * Symbol of the contract, Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     */
    symbol: string;

    /**
     * Whether it is cross margin.
     */
    crossMode: boolean;

    /**
     * ADL ranking percentile
     */
    delevPercentage: number;

    /**
     * First opening time
     */
    openingTimestamp: number;

    /**
     * Current timestamp
     */
    currentTimestamp: number;

    /**
     * Current postion quantity
     */
    currentQty: number;

    /**
     * Current postion value
     */
    currentCost: number;

    /**
     * Current commission
     */
    currentComm: number;

    /**
     * Unrealised value
     */
    unrealisedCost: number;

    /**
     * Accumulated realised gross profit value
     */
    realisedGrossCost: number;

    /**
     * Current realised position value
     */
    realisedCost: number;

    /**
     * Opened position or not
     */
    isOpen: boolean;

    /**
     * Mark price
     */
    markPrice: number;

    /**
     * Mark Value
     */
    markValue: number;

    /**
     * Position value
     */
    posCost: number;

    /**
     * Inital margin Cross = opening value/cross leverage; isolated = accumulation of initial margin for each transaction
     */
    posInit: number;

    /**
     * Bankruptcy cost Cross = mark value * imr; Isolated = position margin (accumulation of initial margin, additional margin, generated funding fees, etc.)
     */
    posMargin: number;

    /**
     * Accumulated realised gross profit value
     */
    realisedGrossPnl: number;

    /**
     * Realised profit and loss
     */
    realisedPnl: number;

    /**
     * Unrealised profit and loss
     */
    unrealisedPnl: number;

    /**
     * Profit-loss ratio of the position
     */
    unrealisedPnlPcnt: number;

    /**
     * Rate of return on investment
     */
    unrealisedRoePcnt: number;

    /**
     * Average entry price
     */
    avgEntryPrice: number;

    /**
     * Liquidation price For Cross Margin, you can refer to the liquidationPrice, and the liquidation is based on the risk rate.
     */
    liquidationPrice: number;

    /**
     * Bankruptcy price For Cross Margin, you can refer to the bankruptPrice, and the liquidation is based on the risk rate.
     */
    bankruptPrice: number;

    /**
     * Currency used to clear and settle the trades
     */
    settleCurrency: string;

    /**
     * Reverse contract or not
     */
    isInverse: boolean;

    /**
     * Margin Mode: CROSSï¼ŒISOLATED
     */
    marginMode: GetPositionDetailsResp.MarginModeEnum;

    /**
     * Position Side
     */
    positionSide: GetPositionDetailsResp.PositionSideEnum;

    /**
     * Leverage
     */
    leverage: number;

    /**
     * Auto deposit margin or not **Only applicable to Isolated Margin**
     */
    autoDeposit?: boolean;

    /**
     * Maintenance margin requirement
     */
    maintMarginReq?: number;

    /**
     * Risk limit **Only applicable to Isolated Margin**
     */
    riskLimit?: number;

    /**
     * Leverage of the order **Only applicable to Isolated Margin**
     */
    realLeverage?: number;

    /**
     * added margin **Only applicable to Isolated Margin**
     */
    posCross?: number;

    /**
     * Additional margin calls (automatic, manual, adjusted risk limits) **Only applicable to Isolated Margin**
     */
    posCrossMargin?: number;

    /**
     * Bankruptcy cost **Only applicable to Isolated Margin**
     */
    posComm?: number;

    /**
     * Part of bankruptcy cost (positioning, add margin) **Only applicable to Isolated Margin**
     */
    posCommCommon?: number;

    /**
     * Funding fees paid out **Only applicable to Isolated Margin**
     */
    posLoss?: number;

    /**
     * The current remaining unsettled funding fee for the position **Only applicable to Isolated Margin**
     */
    posFunding?: number;

    /**
     * Maintenance margin
     */
    posMaint?: number;

    /**
     * Position margin **Only applicable to Isolated Margin**
     */
    maintMargin?: number;

    /**
     * Maintenance margin rate **Only applicable to Isolated Margin**
     */
    maintainMargin?: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.id = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.crossMode = null;
        // @ts-ignore
        this.delevPercentage = null;
        // @ts-ignore
        this.openingTimestamp = null;
        // @ts-ignore
        this.currentTimestamp = null;
        // @ts-ignore
        this.currentQty = null;
        // @ts-ignore
        this.currentCost = null;
        // @ts-ignore
        this.currentComm = null;
        // @ts-ignore
        this.unrealisedCost = null;
        // @ts-ignore
        this.realisedGrossCost = null;
        // @ts-ignore
        this.realisedCost = null;
        // @ts-ignore
        this.isOpen = null;
        // @ts-ignore
        this.markPrice = null;
        // @ts-ignore
        this.markValue = null;
        // @ts-ignore
        this.posCost = null;
        // @ts-ignore
        this.posInit = null;
        // @ts-ignore
        this.posMargin = null;
        // @ts-ignore
        this.realisedGrossPnl = null;
        // @ts-ignore
        this.realisedPnl = null;
        // @ts-ignore
        this.unrealisedPnl = null;
        // @ts-ignore
        this.unrealisedPnlPcnt = null;
        // @ts-ignore
        this.unrealisedRoePcnt = null;
        // @ts-ignore
        this.avgEntryPrice = null;
        // @ts-ignore
        this.liquidationPrice = null;
        // @ts-ignore
        this.bankruptPrice = null;
        // @ts-ignore
        this.settleCurrency = null;
        // @ts-ignore
        this.isInverse = null;
        // @ts-ignore
        this.marginMode = null;
        // @ts-ignore
        this.positionSide = null;
        // @ts-ignore
        this.leverage = null;
    }
    /**
     * common response
     */
    @Exclude()
    commonResponse?: RestResponse;

    setCommonResponse(response: RestResponse): void {
        this.commonResponse = response;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetPositionDetailsResp {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetPositionDetailsResp {
        return plainToClassFromExist(new GetPositionDetailsResp(), jsonObject);
    }
}

export namespace GetPositionDetailsResp {
    export enum MarginModeEnum {
        /**
         * cross margin
         */
        CROSS = <any>'CROSS',
        /**
         * isolated margin
         */
        ISOLATED = <any>'ISOLATED',
    }
    export enum PositionSideEnum {
        /**
         * One-way position
         */
        BOTH = <any>'BOTH',
    }
}
