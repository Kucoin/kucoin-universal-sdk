// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetPositionsHistoryItems implements Serializable {
    /**
     * Close ID
     */
    closeId: string;

    /**
     * User ID
     */
    userId: string;

    /**
     * Symbol of the contract, Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     */
    symbol: string;

    /**
     * Currency used to settle trades
     */
    settleCurrency: string;

    /**
     * Leverage applied to the order
     */
    leverage: string;

    /**
     * Type of closure
     */
    type: string;

    /**
     * Net profit and loss (after deducting fees and funding costs)
     */
    pnl: string;

    /**
     * Accumulated realised gross profit value
     */
    realisedGrossCost: string;

    /**
     * Accumulated realised profit withdrawn from the position
     */
    withdrawPnl: string;

    /**
     * Accumulated trading fees
     */
    tradeFee: string;

    /**
     * Accumulated funding fees
     */
    fundingFee: string;

    /**
     * Time when the position was opened
     */
    openTime: number;

    /**
     * Time when the position was closed (default sorted in descending order)
     */
    closeTime: number;

    /**
     * Opening price of the position
     */
    openPrice: string;

    /**
     * Closing price of the position
     */
    closePrice: string;

    /**
     * Margin Mode: CROSSï¼ŒISOLATED
     */
    marginMode: GetPositionsHistoryItems.MarginModeEnum;

    /**
     *
     */
    realisedGrossCostNew: string;

    /**
     * Tax
     */
    tax: string;

    /**
     *
     */
    roe?: string;

    /**
     *
     */
    liquidAmount: string;

    /**
     *
     */
    liquidPrice: string;

    /**
     * Position side
     */
    side: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.closeId = null;
        // @ts-ignore
        this.userId = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.settleCurrency = null;
        // @ts-ignore
        this.leverage = null;
        // @ts-ignore
        this.type = null;
        // @ts-ignore
        this.pnl = null;
        // @ts-ignore
        this.realisedGrossCost = null;
        // @ts-ignore
        this.withdrawPnl = null;
        // @ts-ignore
        this.tradeFee = null;
        // @ts-ignore
        this.fundingFee = null;
        // @ts-ignore
        this.openTime = null;
        // @ts-ignore
        this.closeTime = null;
        // @ts-ignore
        this.openPrice = null;
        // @ts-ignore
        this.closePrice = null;
        // @ts-ignore
        this.marginMode = null;
        // @ts-ignore
        this.realisedGrossCostNew = null;
        // @ts-ignore
        this.tax = null;
        // @ts-ignore
        this.liquidAmount = null;
        // @ts-ignore
        this.liquidPrice = null;
        // @ts-ignore
        this.side = null;
    }
    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetPositionsHistoryItems {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetPositionsHistoryItems {
        return plainToClassFromExist(new GetPositionsHistoryItems(), jsonObject);
    }
}

export namespace GetPositionsHistoryItems {
    export enum MarginModeEnum {
        /**
         * cross margin
         */
        CROSS = <any>'CROSS',
        /**
         * isolated margin
         */
        ISOLATED = <any>'ISOLATED',
    }
}
