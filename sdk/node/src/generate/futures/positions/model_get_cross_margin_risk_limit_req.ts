// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetCrossMarginRiskLimitReq implements Serializable {
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220), (You may add up to 50 symbols. Use a halfwidth comma to each IP)
     */
    symbol?: string;

    /**
     * The position opening amount, in the contract\'s settlement currency. Defaults to 10,000 in margin currency for max position calculation. For USDT/USDC, it\'s 10,000 USD; for others, it\'s 10,000 divided by the token\'s USDT price.
     */
    totalMargin?: string;

    /**
     * Calculates the max position size at the specified leverage. Defaults to the symbol’s max cross leverage.
     */
    leverage?: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetCrossMarginRiskLimitReq` class.
     * The builder pattern allows step-by-step construction of a `GetCrossMarginRiskLimitReq` object.
     */
    static builder(): GetCrossMarginRiskLimitReqBuilder {
        return new GetCrossMarginRiskLimitReqBuilder(new GetCrossMarginRiskLimitReq());
    }

    /**
     * Creates a new instance of the `GetCrossMarginRiskLimitReq` class with the given data.
     */
    static create(data: {
        /**
         * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220), (You may add up to 50 symbols. Use a halfwidth comma to each IP)
         */
        symbol?: string;
        /**
         * The position opening amount, in the contract\'s settlement currency. Defaults to 10,000 in margin currency for max position calculation. For USDT/USDC, it\'s 10,000 USD; for others, it\'s 10,000 divided by the token\'s USDT price.
         */
        totalMargin?: string;
        /**
         * Calculates the max position size at the specified leverage. Defaults to the symbol’s max cross leverage.
         */
        leverage?: number;
    }): GetCrossMarginRiskLimitReq {
        let obj = new GetCrossMarginRiskLimitReq();
        obj.symbol = data.symbol;
        obj.totalMargin = data.totalMargin;
        obj.leverage = data.leverage;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetCrossMarginRiskLimitReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetCrossMarginRiskLimitReq {
        return plainToClassFromExist(new GetCrossMarginRiskLimitReq(), jsonObject);
    }
}

export class GetCrossMarginRiskLimitReqBuilder {
    constructor(readonly obj: GetCrossMarginRiskLimitReq) {
        this.obj = obj;
    }
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220), (You may add up to 50 symbols. Use a halfwidth comma to each IP)
     */
    setSymbol(value: string): GetCrossMarginRiskLimitReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * The position opening amount, in the contract\'s settlement currency. Defaults to 10,000 in margin currency for max position calculation. For USDT/USDC, it\'s 10,000 USD; for others, it\'s 10,000 divided by the token\'s USDT price.
     */
    setTotalMargin(value: string): GetCrossMarginRiskLimitReqBuilder {
        this.obj.totalMargin = value;
        return this;
    }

    /**
     * Calculates the max position size at the specified leverage. Defaults to the symbol’s max cross leverage.
     */
    setLeverage(value: number): GetCrossMarginRiskLimitReqBuilder {
        this.obj.leverage = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetCrossMarginRiskLimitReq {
        return this.obj;
    }
}
