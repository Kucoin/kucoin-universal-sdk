// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { RestResponse } from '@model/common';
import { Response } from '@internal/interfaces/serializable';

export class GetTickerResp implements Response<RestResponse> {
    /**
     * Sequence number, used to judge whether the messages pushed by Websocket are continuous.
     */
    sequence: number;

    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     */
    symbol: string;

    /**
     * Filled side; the trade side indicates the taker order side. A taker order is the order that was matched with orders opened on the order book.
     */
    side: GetTickerResp.SideEnum;

    /**
     * Filled quantity
     */
    size: number;

    /**
     * Transaction ID
     */
    tradeId: string;

    /**
     * Filled price
     */
    price: string;

    /**
     * Best bid price
     */
    bestBidPrice: string;

    /**
     * Best bid size
     */
    bestBidSize: number;

    /**
     * Best ask price
     */
    bestAskPrice: string;

    /**
     * Best ask size
     */
    bestAskSize: number;

    /**
     * Filled time (nanoseconds)
     */
    ts: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.sequence = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.size = null;
        // @ts-ignore
        this.tradeId = null;
        // @ts-ignore
        this.price = null;
        // @ts-ignore
        this.bestBidPrice = null;
        // @ts-ignore
        this.bestBidSize = null;
        // @ts-ignore
        this.bestAskPrice = null;
        // @ts-ignore
        this.bestAskSize = null;
        // @ts-ignore
        this.ts = null;
    }
    /**
     * common response
     */
    @Exclude()
    commonResponse?: RestResponse;

    setCommonResponse(response: RestResponse): void {
        this.commonResponse = response;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetTickerResp {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetTickerResp {
        return plainToClassFromExist(new GetTickerResp(), jsonObject);
    }
}

export namespace GetTickerResp {
    export enum SideEnum {
        /**
         * buy
         */
        BUY = <any>'buy',
        /**
         * sell
         */
        SELL = <any>'sell',
    }
}
