// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { RestResponse } from '@model/common';
import { Response } from '@internal/interfaces/serializable';

export class GetSymbolResp implements Response<RestResponse> {
    /**
     * Symbol
     */
    symbol: string;

    /**
     * Contract group
     */
    rootSymbol: string;

    /**
     * Type of contract
     */
    type: GetSymbolResp.TypeEnum;

    /**
     * First Open Date (milliseconds)
     */
    firstOpenDate: number;

    /**
     * Expiration date (milliseconds) Null means it will never expire
     */
    expireDate: number;

    /**
     * Settlement date (milliseconds) Null indicates that automatic settlement is not supported
     */
    settleDate: number;

    /**
     * Base currency
     */
    baseCurrency: string;

    /**
     * Quote currency
     */
    quoteCurrency: string;

    /**
     * Currency used to clear and settle the trades
     */
    settleCurrency: string;

    /**
     * Maximum order quantity
     */
    maxOrderQty: number;

    /**
     * Maximum order price
     */
    maxPrice: number;

    /**
     * Minimum lot size
     */
    lotSize: number;

    /**
     * Minimum price changes
     */
    tickSize: number;

    /**
     * Index price of tick size
     */
    indexPriceTickSize: number;

    /**
     * The basic unit of the contract API is lots. For the number of coins in each lot, please refer to the param multiplier. For example, for XBTUSDTM, multiplier=0.001, which corresponds to the value of each XBTUSDTM contract being 0.001 BTC. There is also a special case. All coin-swap contracts, such as each XBTUSDM contract, correspond to 1 USD.
     */
    multiplier: number;

    /**
     * Initial margin requirement
     */
    initialMargin: number;

    /**
     * Maintenance margin requirement
     */
    maintainMargin: number;

    /**
     * Maximum risk limit (unit: XBT)
     */
    maxRiskLimit: number;

    /**
     * Minimum risk limit (unit: XBT)
     */
    minRiskLimit: number;

    /**
     * Risk limit increment value (unit: XBT)
     */
    riskStep: number;

    /**
     * Maker fee rate
     */
    makerFeeRate: number;

    /**
     * Taker fee rate
     */
    takerFeeRate: number;

    /**
     * Deprecated param
     */
    takerFixFee: number;

    /**
     * Deprecated param
     */
    makerFixFee: number;

    /**
     * Settlement fee
     */
    settlementFee: number;

    /**
     * Enabled ADL or not
     */
    isDeleverage: boolean;

    /**
     * Deprecated param
     */
    isQuanto: boolean;

    /**
     * Whether it is a reverse contract
     */
    isInverse: boolean;

    /**
     * Marking method
     */
    markMethod: GetSymbolResp.MarkMethodEnum;

    /**
     * Fair price marking method; the Futures contract is null
     */
    fairMethod: GetSymbolResp.FairMethodEnum;

    /**
     * Ticker symbol of the base currency
     */
    fundingBaseSymbol: string;

    /**
     * Ticker symbol of the quote currency
     */
    fundingQuoteSymbol: string;

    /**
     * Funding rate symbol
     */
    fundingRateSymbol: string;

    /**
     * Index symbol
     */
    indexSymbol: string;

    /**
     * Settlement symbol
     */
    settlementSymbol: string;

    /**
     * Contract status
     */
    status: GetSymbolResp.StatusEnum;

    /**
     * Funding fee rate
     */
    fundingFeeRate: number;

    /**
     * Predicted funding fee rate
     */
    predictedFundingFeeRate: number;

    /**
     * Funding interval (milliseconds)
     */
    fundingRateGranularity: number;

    /**
     * Open interest (unit: lots)
     */
    openInterest: string;

    /**
     * 24-hour turnover
     */
    turnoverOf24h: number;

    /**
     * 24-hour volume
     */
    volumeOf24h: number;

    /**
     * Mark price
     */
    markPrice: number;

    /**
     * Index price
     */
    indexPrice: number;

    /**
     * Last trade price
     */
    lastTradePrice: number;

    /**
     * Next funding rate time (milliseconds)
     */
    nextFundingRateTime: number;

    /**
     * Maximum leverage
     */
    maxLeverage: number;

    /**
     * The contract index price source exchange
     */
    sourceExchanges: Array<string>;

    /**
     * Premium index symbol (1 minute)
     */
    premiumsSymbol1M: string;

    /**
     * Premium index symbol (8 hours)
     */
    premiumsSymbol8H: string;

    /**
     * Base currency interest rate symbol (1 minute)
     */
    fundingBaseSymbol1M: string;

    /**
     * Quote currency interest rate symbol (1 minute)
     */
    fundingQuoteSymbol1M: string;

    /**
     * 24-hour lowest price
     */
    lowPrice: number;

    /**
     * 24-hour highest price
     */
    highPrice: number;

    /**
     * 24-hour % price change
     */
    priceChgPct: number;

    /**
     * 24-hour price change
     */
    priceChg: number;

    /**
     *
     */
    k: number;

    /**
     *
     */
    m: number;

    /**
     *
     */
    f: number;

    /**
     *
     */
    mmrLimit: number;

    /**
     *
     */
    mmrLevConstant: number;

    /**
     * Whether support Cross Margin
     */
    supportCross: boolean;

    /**
     * The current maximum allowed buying price
     */
    buyLimit: number;

    /**
     * The current minimum allowed selling price
     */
    sellLimit: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.rootSymbol = null;
        // @ts-ignore
        this.type = null;
        // @ts-ignore
        this.firstOpenDate = null;
        // @ts-ignore
        this.expireDate = null;
        // @ts-ignore
        this.settleDate = null;
        // @ts-ignore
        this.baseCurrency = null;
        // @ts-ignore
        this.quoteCurrency = null;
        // @ts-ignore
        this.settleCurrency = null;
        // @ts-ignore
        this.maxOrderQty = null;
        // @ts-ignore
        this.maxPrice = null;
        // @ts-ignore
        this.lotSize = null;
        // @ts-ignore
        this.tickSize = null;
        // @ts-ignore
        this.indexPriceTickSize = null;
        // @ts-ignore
        this.multiplier = null;
        // @ts-ignore
        this.initialMargin = null;
        // @ts-ignore
        this.maintainMargin = null;
        // @ts-ignore
        this.maxRiskLimit = null;
        // @ts-ignore
        this.minRiskLimit = null;
        // @ts-ignore
        this.riskStep = null;
        // @ts-ignore
        this.makerFeeRate = null;
        // @ts-ignore
        this.takerFeeRate = null;
        // @ts-ignore
        this.takerFixFee = null;
        // @ts-ignore
        this.makerFixFee = null;
        // @ts-ignore
        this.settlementFee = null;
        // @ts-ignore
        this.isDeleverage = null;
        // @ts-ignore
        this.isQuanto = null;
        // @ts-ignore
        this.isInverse = null;
        // @ts-ignore
        this.markMethod = null;
        // @ts-ignore
        this.fairMethod = null;
        // @ts-ignore
        this.fundingBaseSymbol = null;
        // @ts-ignore
        this.fundingQuoteSymbol = null;
        // @ts-ignore
        this.fundingRateSymbol = null;
        // @ts-ignore
        this.indexSymbol = null;
        // @ts-ignore
        this.settlementSymbol = null;
        // @ts-ignore
        this.status = null;
        // @ts-ignore
        this.fundingFeeRate = null;
        // @ts-ignore
        this.predictedFundingFeeRate = null;
        // @ts-ignore
        this.fundingRateGranularity = null;
        // @ts-ignore
        this.openInterest = null;
        // @ts-ignore
        this.turnoverOf24h = null;
        // @ts-ignore
        this.volumeOf24h = null;
        // @ts-ignore
        this.markPrice = null;
        // @ts-ignore
        this.indexPrice = null;
        // @ts-ignore
        this.lastTradePrice = null;
        // @ts-ignore
        this.nextFundingRateTime = null;
        // @ts-ignore
        this.maxLeverage = null;
        // @ts-ignore
        this.sourceExchanges = null;
        // @ts-ignore
        this.premiumsSymbol1M = null;
        // @ts-ignore
        this.premiumsSymbol8H = null;
        // @ts-ignore
        this.fundingBaseSymbol1M = null;
        // @ts-ignore
        this.fundingQuoteSymbol1M = null;
        // @ts-ignore
        this.lowPrice = null;
        // @ts-ignore
        this.highPrice = null;
        // @ts-ignore
        this.priceChgPct = null;
        // @ts-ignore
        this.priceChg = null;
        // @ts-ignore
        this.k = null;
        // @ts-ignore
        this.m = null;
        // @ts-ignore
        this.f = null;
        // @ts-ignore
        this.mmrLimit = null;
        // @ts-ignore
        this.mmrLevConstant = null;
        // @ts-ignore
        this.supportCross = null;
        // @ts-ignore
        this.buyLimit = null;
        // @ts-ignore
        this.sellLimit = null;
    }
    /**
     * common response
     */
    @Exclude()
    commonResponse?: RestResponse;

    setCommonResponse(response: RestResponse): void {
        this.commonResponse = response;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetSymbolResp {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetSymbolResp {
        return plainToClassFromExist(new GetSymbolResp(), jsonObject);
    }
}

export namespace GetSymbolResp {
    export enum TypeEnum {
        /**
         * Standardized swap contracts, standard financial futures on swaps, expiration swap funding rates
         */
        FFWCSX = <any>'FFWCSX',
        /**
         * Futures Contract
         */
        FFICSX = <any>'FFICSX',
    }
    export enum MarkMethodEnum {
        /**
         * FairPrice
         */
        FAIRPRICE = <any>'FairPrice',
    }
    export enum FairMethodEnum {
        /**
         * FundingRate
         */
        FUNDINGRATE = <any>'FundingRate',
    }
    export enum StatusEnum {
        /**
         * Initial
         */
        INIT = <any>'Init',
        /**
         * Online
         */
        OPEN = <any>'Open',
        /**
         * Settling
         */
        BEINGSETTLED = <any>'BeingSettled',
        /**
         * Settled
         */
        SETTLED = <any>'Settled',
        /**
         * Suspended
         */
        PAUSED = <any>'Paused',
        /**
         * Offline
         */
        CLOSED = <any>'Closed',
        /**
         * Orders can only be canceled
         */
        CANCELONLY = <any>'CancelOnly',
    }
}
