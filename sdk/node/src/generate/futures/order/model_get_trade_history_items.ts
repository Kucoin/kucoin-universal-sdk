// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetTradeHistoryItems implements Serializable {
    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     */
    symbol: string;

    /**
     * Trade ID
     */
    tradeId: string;

    /**
     * Order ID
     */
    orderId: string;

    /**
     * Transaction side
     */
    side: GetTradeHistoryItems.SideEnum;

    /**
     * Liquidity-taker or -maker
     */
    liquidity: GetTradeHistoryItems.LiquidityEnum;

    /**
     * Whether to force processing as a taker
     */
    forceTaker: boolean;

    /**
     * Filled price
     */
    price: string;

    /**
     * Filled amount
     */
    size: number;

    /**
     * Order value
     */
    value: string;

    /**
     * Opening transaction fee
     */
    openFeePay: string;

    /**
     * Closing transaction fee
     */
    closeFeePay: string;

    /**
     * A mark to the stop order type
     */
    stop: string;

    /**
     * Fee Rate
     */
    feeRate: string;

    /**
     * Fixed fees (Deprecated field, no actual use of the value field)
     */
    fixFee: string;

    /**
     * Charging currency
     */
    feeCurrency: string;

    /**
     * Trade time in nanoseconds
     */
    tradeTime: number;

    /**
     * Deprecated field, no actual use of the value field
     */
    subTradeType: string;

    /**
     * Margin mode: ISOLATED (isolated), CROSS (cross margin).
     */
    marginMode: GetTradeHistoryItems.MarginModeEnum;

    /**
     * Settle currency
     */
    settleCurrency: string;

    /**
     * Order type
     */
    displayType: GetTradeHistoryItems.DisplayTypeEnum;

    /**
     * Trading fee
     */
    fee: string;

    /**
     * Order type
     */
    orderType: GetTradeHistoryItems.OrderTypeEnum;

    /**
     * Trade type (trade, liquid, adl or settlement)
     */
    tradeType: GetTradeHistoryItems.TradeTypeEnum;

    /**
     * Order creation time
     */
    createdAt: number;

    /**
     * Opening tax fee (Only kyc users in some regions have this parameter)
     */
    openFeeTaxPay: string;

    /**
     * Close tax fee (Only kyc users in some regions have this parameter)
     */
    closeFeeTaxPay: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.tradeId = null;
        // @ts-ignore
        this.orderId = null;
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.liquidity = null;
        // @ts-ignore
        this.forceTaker = null;
        // @ts-ignore
        this.price = null;
        // @ts-ignore
        this.size = null;
        // @ts-ignore
        this.value = null;
        // @ts-ignore
        this.openFeePay = null;
        // @ts-ignore
        this.closeFeePay = null;
        // @ts-ignore
        this.stop = null;
        // @ts-ignore
        this.feeRate = null;
        // @ts-ignore
        this.fixFee = null;
        // @ts-ignore
        this.feeCurrency = null;
        // @ts-ignore
        this.tradeTime = null;
        // @ts-ignore
        this.subTradeType = null;
        // @ts-ignore
        this.marginMode = null;
        // @ts-ignore
        this.settleCurrency = null;
        // @ts-ignore
        this.displayType = null;
        // @ts-ignore
        this.fee = null;
        // @ts-ignore
        this.orderType = null;
        // @ts-ignore
        this.tradeType = null;
        // @ts-ignore
        this.createdAt = null;
        // @ts-ignore
        this.openFeeTaxPay = null;
        // @ts-ignore
        this.closeFeeTaxPay = null;
    }
    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetTradeHistoryItems {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetTradeHistoryItems {
        return plainToClassFromExist(new GetTradeHistoryItems(), jsonObject);
    }
}

export namespace GetTradeHistoryItems {
    export enum SideEnum {
        /**
         * buy
         */
        BUY = <any>'buy',
        /**
         * sell
         */
        SELL = <any>'sell',
    }
    export enum LiquidityEnum {
        /**
         * taker
         */
        TAKER = <any>'taker',
        /**
         * maker
         */
        MAKER = <any>'maker',
    }
    export enum MarginModeEnum {
        /**
         * Isolated margin
         */
        ISOLATED = <any>'ISOLATED',
        /**
         * Cross margin
         */
        CROSS = <any>'CROSS',
    }
    export enum DisplayTypeEnum {
        /**
         * limit order
         */
        LIMIT = <any>'limit',
        /**
         * market order
         */
        MARKET = <any>'market',
        /**
         * stop limit order
         */
        LIMIT_STOP = <any>'limit_stop',
        /**
         * stop market order
         */
        MARKET_STOP = <any>'market_stop',
    }
    export enum OrderTypeEnum {
        /**
         * market
         */
        MARKET = <any>'market',
        /**
         * limit
         */
        LIMIT = <any>'limit',
    }
    export enum TradeTypeEnum {
        /**
         * trade
         */
        TRADE = <any>'trade',
        /**
         * liquid
         */
        LIQUID = <any>'liquid',
        /**
         * adl
         */
        ADL = <any>'adl',
        /**
         * settlement
         */
        SETTLEMENT = <any>'settlement',
    }
}
