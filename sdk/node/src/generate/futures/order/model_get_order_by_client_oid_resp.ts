// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { RestResponse } from '@model/common';
import { Response } from '@internal/interfaces/serializable';

export class GetOrderByClientOidResp implements Response<RestResponse> {
    /**
     * Order ID
     */
    id: string;

    /**
     * Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
     */
    symbol: string;

    /**
     * Order type, market order or limit order
     */
    type: GetOrderByClientOidResp.TypeEnum;

    /**
     * Transaction side
     */
    side: GetOrderByClientOidResp.SideEnum;

    /**
     * Order Price
     */
    price: string;

    /**
     * Order quantity
     */
    size: number;

    /**
     * Order value
     */
    value: string;

    /**
     * Executed size of funds
     */
    dealValue: string;

    /**
     * Executed quantity
     */
    dealSize: number;

    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into these strategies: CN, CO, CB. DC not currently supported.
     */
    stp: GetOrderByClientOidResp.StpEnum;

    /**
     * Stop order type (stop limit or stop market)
     */
    stop: string;

    /**
     * Trigger price type of stop orders
     */
    stopPriceType: GetOrderByClientOidResp.StopPriceTypeEnum;

    /**
     * Mark to show whether the stop order is triggered
     */
    stopTriggered: boolean;

    /**
     * Trigger price of stop orders
     */
    stopPrice: number;

    /**
     * Time in force policy type
     */
    timeInForce: string;

    /**
     * Mark of post only
     */
    postOnly: boolean;

    /**
     * Mark of the hidden order
     */
    hidden: boolean;

    /**
     * Mark of the iceberg order
     */
    iceberg: boolean;

    /**
     * Leverage of the order
     */
    leverage: string;

    /**
     * A mark to force-hold the funds for an order
     */
    forceHold: boolean;

    /**
     * A mark to close the position
     */
    closeOrder: boolean;

    /**
     * Visible size of the iceberg order
     */
    visibleSize: number;

    /**
     * Unique order ID created by users to identify their orders
     */
    clientOid: string;

    /**
     * Remark
     */
    remark: string;

    /**
     * Tag order source
     */
    tags: string;

    /**
     * Mark of the active orders
     */
    isActive: boolean;

    /**
     * Mark of the canceled orders
     */
    cancelExist: boolean;

    /**
     * Order creation time
     */
    createdAt: number;

    /**
     * Last update time
     */
    updatedAt: number;

    /**
     * Order Endtime
     */
    endAt: number;

    /**
     * Order creation time in nanoseconds
     */
    orderTime: number;

    /**
     * Settlement currency
     */
    settleCurrency: string;

    /**
     * Margin mode: ISOLATED (isolated), CROSS (cross margin).
     */
    marginMode: GetOrderByClientOidResp.MarginModeEnum;

    /**
     * Average transaction price, forward contract average transaction price = sum (transaction value) / sum (transaction quantity); reverse contract average transaction price = sum (transaction quantity) / sum (transaction value). Transaction quantity = lots * multiplier
     */
    avgDealPrice: string;

    /**
     * Value of the executed orders
     */
    filledSize: number;

    /**
     * Executed order quantity
     */
    filledValue: string;

    /**
     * order status: “open” or “done”
     */
    status: GetOrderByClientOidResp.StatusEnum;

    /**
     * A mark to reduce the position size only
     */
    reduceOnly: boolean;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.id = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.type = null;
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.price = null;
        // @ts-ignore
        this.size = null;
        // @ts-ignore
        this.value = null;
        // @ts-ignore
        this.dealValue = null;
        // @ts-ignore
        this.dealSize = null;
        // @ts-ignore
        this.stp = null;
        // @ts-ignore
        this.stop = null;
        // @ts-ignore
        this.stopPriceType = null;
        // @ts-ignore
        this.stopTriggered = null;
        // @ts-ignore
        this.stopPrice = null;
        // @ts-ignore
        this.timeInForce = null;
        // @ts-ignore
        this.postOnly = null;
        // @ts-ignore
        this.hidden = null;
        // @ts-ignore
        this.iceberg = null;
        // @ts-ignore
        this.leverage = null;
        // @ts-ignore
        this.forceHold = null;
        // @ts-ignore
        this.closeOrder = null;
        // @ts-ignore
        this.visibleSize = null;
        // @ts-ignore
        this.clientOid = null;
        // @ts-ignore
        this.remark = null;
        // @ts-ignore
        this.tags = null;
        // @ts-ignore
        this.isActive = null;
        // @ts-ignore
        this.cancelExist = null;
        // @ts-ignore
        this.createdAt = null;
        // @ts-ignore
        this.updatedAt = null;
        // @ts-ignore
        this.endAt = null;
        // @ts-ignore
        this.orderTime = null;
        // @ts-ignore
        this.settleCurrency = null;
        // @ts-ignore
        this.marginMode = null;
        // @ts-ignore
        this.avgDealPrice = null;
        // @ts-ignore
        this.filledSize = null;
        // @ts-ignore
        this.filledValue = null;
        // @ts-ignore
        this.status = null;
        // @ts-ignore
        this.reduceOnly = null;
    }
    /**
     * common response
     */
    @Exclude()
    commonResponse?: RestResponse;

    setCommonResponse(response: RestResponse): void {
        this.commonResponse = response;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetOrderByClientOidResp {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetOrderByClientOidResp {
        return plainToClassFromExist(new GetOrderByClientOidResp(), jsonObject);
    }
}

export namespace GetOrderByClientOidResp {
    export enum TypeEnum {
        /**
         * Market Order
         */
        MARKET = <any>'market',
        /**
         * Limit Order
         */
        LIMIT = <any>'limit',
    }
    export enum SideEnum {
        /**
         * buy
         */
        BUY = <any>'buy',
        /**
         * sell
         */
        SELL = <any>'sell',
    }
    export enum StpEnum {
        /**
         * None
         */
        NULL = <any>'',
        /**
         * Cancel new, Cancel the new order
         */
        CN = <any>'CN',
        /**
         * Cancel old, Cancel the old order
         */
        CO = <any>'CO',
        /**
         * Cancel both, Cancel both sides
         */
        CB = <any>'CB',
    }
    export enum StopPriceTypeEnum {
        /**
         * None
         */
        NULL = <any>'',
        /**
         * TP for trade price, The last trade price is the last price at which an order was filled. This price can be found in the latest match message.
         */
        TRADE_PRICE = <any>'TP',
        /**
         * MP for mark price. The mark price can be obtained through relevant OPEN API for index services.
         */
        MARK_PRICE = <any>'MP',
        /**
         * IP for index price. The index price can be obtained through relevant OPEN API for index services.
         */
        INDEX_PRICE = <any>'IP',
    }
    export enum MarginModeEnum {
        /**
         * Cross margin
         */
        CROSS = <any>'CROSS',
        /**
         * Isolated margin
         */
        ISOLATED = <any>'ISOLATED',
    }
    export enum StatusEnum {
        /**
         * open order
         */
        OPEN = <any>'open',
        /**
         * done order
         */
        DONE = <any>'done',
    }
}
