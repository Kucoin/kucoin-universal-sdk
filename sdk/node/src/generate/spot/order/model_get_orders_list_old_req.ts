// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetOrdersListOldReq implements Serializable {
    /**
     * Symbol
     */
    symbol?: string;

    /**
     * Active or done (done as default); only list orders with a specific status.
     */
    status?: GetOrdersListOldReq.StatusEnum = GetOrdersListOldReq.StatusEnum.DONE;

    /**
     * Buy or Sell
     */
    side?: GetOrdersListOldReq.SideEnum;

    /**
     * Order type
     */
    type?: GetOrdersListOldReq.TypeEnum;

    /**
     * The type of trading: TRADE - Spot Trading (TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
     */
    tradeType?: GetOrdersListOldReq.TradeTypeEnum = GetOrdersListOldReq.TradeTypeEnum.TRADE;

    /**
     * Start time (milliseconds)
     */
    startAt?: number;

    /**
     * End time (milliseconds)
     */
    endAt?: number;

    /**
     * Current request page.
     */
    currentPage?: number = 1;

    /**
     * Number of results per request. Minimum is 10, maximum is 500.
     */
    pageSize?: number = 50;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetOrdersListOldReq` class.
     * The builder pattern allows step-by-step construction of a `GetOrdersListOldReq` object.
     */
    static builder(): GetOrdersListOldReqBuilder {
        return new GetOrdersListOldReqBuilder(new GetOrdersListOldReq());
    }

    /**
     * Creates a new instance of the `GetOrdersListOldReq` class with the given data.
     */
    static create(data: {
        /**
         * Symbol
         */
        symbol?: string;
        /**
         * Active or done (done as default); only list orders with a specific status.
         */
        status?: GetOrdersListOldReq.StatusEnum;
        /**
         * Buy or Sell
         */
        side?: GetOrdersListOldReq.SideEnum;
        /**
         * Order type
         */
        type?: GetOrdersListOldReq.TypeEnum;
        /**
         * The type of trading: TRADE - Spot Trading (TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
         */
        tradeType?: GetOrdersListOldReq.TradeTypeEnum;
        /**
         * Start time (milliseconds)
         */
        startAt?: number;
        /**
         * End time (milliseconds)
         */
        endAt?: number;
        /**
         * Current request page.
         */
        currentPage?: number;
        /**
         * Number of results per request. Minimum is 10, maximum is 500.
         */
        pageSize?: number;
    }): GetOrdersListOldReq {
        let obj = new GetOrdersListOldReq();
        obj.symbol = data.symbol;
        if (data.status) {
            obj.status = data.status;
        } else {
            obj.status = GetOrdersListOldReq.StatusEnum.DONE;
        }
        obj.side = data.side;
        obj.type = data.type;
        if (data.tradeType) {
            obj.tradeType = data.tradeType;
        } else {
            obj.tradeType = GetOrdersListOldReq.TradeTypeEnum.TRADE;
        }
        obj.startAt = data.startAt;
        obj.endAt = data.endAt;
        if (data.currentPage) {
            obj.currentPage = data.currentPage;
        } else {
            obj.currentPage = 1;
        }
        if (data.pageSize) {
            obj.pageSize = data.pageSize;
        } else {
            obj.pageSize = 50;
        }
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetOrdersListOldReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetOrdersListOldReq {
        return plainToClassFromExist(new GetOrdersListOldReq(), jsonObject);
    }
}

export namespace GetOrdersListOldReq {
    export enum StatusEnum {
        /**
         * Active order
         */
        ACTIVE = <any>'active',
        /**
         * Done orders
         */
        DONE = <any>'done',
    }
    export enum SideEnum {
        /**
         * buy
         */
        BUY = <any>'buy',
        /**
         * sell
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         * limit
         */
        LIMIT = <any>'limit',
        /**
         * market
         */
        MARKET = <any>'market',
        /**
         * limit_stop
         */
        LIMIT_STOP = <any>'limit_stop',
        /**
         * market_stop
         */
        MARKET_STOP = <any>'market_stop',
        /**
         * oco_limit
         */
        OCO_LIMIT = <any>'oco_limit',
        /**
         * oco_stop
         */
        OCO_STOP = <any>'oco_stop',
    }
    export enum TradeTypeEnum {
        /**
         * Spot Trading
         */
        TRADE = <any>'TRADE',
        /**
         * Cross Margin Trading
         */
        MARGIN_TRADE = <any>'MARGIN_TRADE',
        /**
         * Isolated Margin Trading
         */
        MARGIN_ISOLATED_TRADE = <any>'MARGIN_ISOLATED_TRADE',
    }
}

export class GetOrdersListOldReqBuilder {
    constructor(readonly obj: GetOrdersListOldReq) {
        this.obj = obj;
    }
    /**
     * Symbol
     */
    setSymbol(value: string): GetOrdersListOldReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * Active or done (done as default); only list orders with a specific status.
     */
    setStatus(value: GetOrdersListOldReq.StatusEnum): GetOrdersListOldReqBuilder {
        this.obj.status = value;
        return this;
    }

    /**
     * Buy or Sell
     */
    setSide(value: GetOrdersListOldReq.SideEnum): GetOrdersListOldReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * Order type
     */
    setType(value: GetOrdersListOldReq.TypeEnum): GetOrdersListOldReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * The type of trading: TRADE - Spot Trading (TRADE as default), MARGIN_TRADE - Cross Margin Trading, MARGIN_ISOLATED_TRADE - Isolated Margin Trading.
     */
    setTradeType(value: GetOrdersListOldReq.TradeTypeEnum): GetOrdersListOldReqBuilder {
        this.obj.tradeType = value;
        return this;
    }

    /**
     * Start time (milliseconds)
     */
    setStartAt(value: number): GetOrdersListOldReqBuilder {
        this.obj.startAt = value;
        return this;
    }

    /**
     * End time (milliseconds)
     */
    setEndAt(value: number): GetOrdersListOldReqBuilder {
        this.obj.endAt = value;
        return this;
    }

    /**
     * Current request page.
     */
    setCurrentPage(value: number): GetOrdersListOldReqBuilder {
        this.obj.currentPage = value;
        return this;
    }

    /**
     * Number of results per request. Minimum is 10, maximum is 500.
     */
    setPageSize(value: number): GetOrdersListOldReqBuilder {
        this.obj.pageSize = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetOrdersListOldReq {
        return this.obj;
    }
}
