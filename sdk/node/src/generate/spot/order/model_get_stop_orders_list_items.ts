// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetStopOrdersListItems implements Serializable {
    /**
     * Order ID, the ID of an order.
     */
    id: string;

    /**
     * Symbol name
     */
    symbol: string;

    /**
     * User ID
     */
    userId: string;

    /**
     * Order status, include NEW, TRIGGERED
     */
    status: string;

    /**
     * Order type
     */
    type: GetStopOrdersListItems.TypeEnum;

    /**
     * transaction direction,include buy and sell
     */
    side: string;

    /**
     * order price
     */
    price: string;

    /**
     * order quantity
     */
    size: string;

    /**
     * order funds
     */
    funds?: string;

    /**
     *
     */
    stp?: string;

    /**
     * time InForce,include GTC,GTT,IOC,FOK
     */
    timeInForce: string;

    /**
     * cancel orders after n seconds，requires timeInForce to be GTT
     */
    cancelAfter: number;

    /**
     * postOnly
     */
    postOnly: boolean;

    /**
     * hidden order
     */
    hidden: boolean;

    /**
     * Iceberg order
     */
    iceberg: boolean;

    /**
     * displayed quantity for iceberg order
     */
    visibleSize?: string;

    /**
     * order source
     */
    channel: string;

    /**
     * user-entered order unique mark
     */
    clientOid: string;

    /**
     * Remarks at stop order creation
     */
    remark: string;

    /**
     * tag order source
     */
    tags?: string;

    /**
     * Time of place a stop order, accurate to nanoseconds
     */
    orderTime: number;

    /**
     * domainId, e.g: kucoin
     */
    domainId: string;

    /**
     * trade source: USER（Order by user）, MARGIN_SYSTEM（Order by margin system）
     */
    tradeSource: string;

    /**
     * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin).
     */
    tradeType: string;

    /**
     * The currency of the fee
     */
    feeCurrency: string;

    /**
     * Fee Rate of taker
     */
    takerFeeRate: string;

    /**
     * Fee Rate of maker
     */
    makerFeeRate: string;

    /**
     * order creation time
     */
    createdAt: number;

    /**
     * Stop order type, include loss and entry
     */
    stop: string;

    /**
     * The trigger time of the stop order
     */
    stopTriggerTime?: number;

    /**
     * stop price
     */
    stopPrice: string;

    /**
     *
     */
    relatedNo?: string;

    /**
     *
     */
    limitPrice?: string;

    /**
     *
     */
    pop?: string;

    /**
     *
     */
    activateCondition?: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.id = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.userId = null;
        // @ts-ignore
        this.status = null;
        // @ts-ignore
        this.type = null;
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.price = null;
        // @ts-ignore
        this.size = null;
        // @ts-ignore
        this.timeInForce = null;
        // @ts-ignore
        this.cancelAfter = null;
        // @ts-ignore
        this.postOnly = null;
        // @ts-ignore
        this.hidden = null;
        // @ts-ignore
        this.iceberg = null;
        // @ts-ignore
        this.channel = null;
        // @ts-ignore
        this.clientOid = null;
        // @ts-ignore
        this.remark = null;
        // @ts-ignore
        this.orderTime = null;
        // @ts-ignore
        this.domainId = null;
        // @ts-ignore
        this.tradeSource = null;
        // @ts-ignore
        this.tradeType = null;
        // @ts-ignore
        this.feeCurrency = null;
        // @ts-ignore
        this.takerFeeRate = null;
        // @ts-ignore
        this.makerFeeRate = null;
        // @ts-ignore
        this.createdAt = null;
        // @ts-ignore
        this.stop = null;
        // @ts-ignore
        this.stopPrice = null;
    }
    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetStopOrdersListItems {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetStopOrdersListItems {
        return plainToClassFromExist(new GetStopOrdersListItems(), jsonObject);
    }
}

export namespace GetStopOrdersListItems {
    export enum TypeEnum {
        /**
         * Limit order
         */
        LIMIT = <any>'limit',
        /**
         * Market order
         */
        MARKET = <any>'market',
    }
}
