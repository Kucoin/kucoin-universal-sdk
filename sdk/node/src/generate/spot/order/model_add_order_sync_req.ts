// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class AddOrderSyncReq implements Serializable {
    /**
     * Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     */
    clientOid?: string;

    /**
     * Specify if the order is to \'buy\' or \'sell\'.
     */
    side: AddOrderSyncReq.SideEnum;

    /**
     * symbol
     */
    symbol: string;

    /**
     * Specify if the order is a \'limit\' order or \'market\' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
     */
    type: AddOrderSyncReq.TypeEnum;

    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     */
    remark?: string;

    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     */
    stp?: AddOrderSyncReq.StpEnum;

    /**
     * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
     */
    price?: string;

    /**
     * Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     */
    size?: string;

    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     */
    timeInForce?: AddOrderSyncReq.TimeInForceEnum = AddOrderSyncReq.TimeInForceEnum.GTC;

    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     */
    postOnly?: boolean = false;

    /**
     * [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
     */
    hidden?: boolean = false;

    /**
     * Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
     */
    iceberg?: boolean = false;

    /**
     * Maximum visible quantity in iceberg orders
     */
    visibleSize?: string;

    /**
     * Order tag, length cannot exceed 20 characters (ASCII)
     */
    tags?: string;

    /**
     * Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
     */
    cancelAfter?: number = -1;

    /**
     * When **type** is market, select one out of two: size or funds
     */
    funds?: string;

    /**
     * Order failed after timeout of specified milliseconds, If clientTimestamp + allowMaxTimeWindow < the server reaches time, this order will fail.
     */
    allowMaxTimeWindow?: number;

    /**
     * Equal to KC-API-TIMESTAMP, Need to be defined if iceberg is specified.
     */
    clientTimestamp?: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.type = null;
    }
    /**
     * Creates a new instance of the `AddOrderSyncReq` class.
     * The builder pattern allows step-by-step construction of a `AddOrderSyncReq` object.
     */
    static builder(): AddOrderSyncReqBuilder {
        return new AddOrderSyncReqBuilder(new AddOrderSyncReq());
    }

    /**
     * Creates a new instance of the `AddOrderSyncReq` class with the given data.
     */
    static create(data: {
        /**
         * Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
         */
        clientOid?: string;
        /**
         * Specify if the order is to \'buy\' or \'sell\'.
         */
        side: AddOrderSyncReq.SideEnum;
        /**
         * symbol
         */
        symbol: string;
        /**
         * Specify if the order is a \'limit\' order or \'market\' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
         */
        type: AddOrderSyncReq.TypeEnum;
        /**
         * Order placement remarks, length cannot exceed 20 characters (ASCII)
         */
        remark?: string;
        /**
         * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
         */
        stp?: AddOrderSyncReq.StpEnum;
        /**
         * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
         */
        price?: string;
        /**
         * Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
         */
        size?: string;
        /**
         * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
         */
        timeInForce?: AddOrderSyncReq.TimeInForceEnum;
        /**
         * passive order labels, this is disabled when the order timing strategy is IOC or FOK
         */
        postOnly?: boolean;
        /**
         * [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
         */
        hidden?: boolean;
        /**
         * Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
         */
        iceberg?: boolean;
        /**
         * Maximum visible quantity in iceberg orders
         */
        visibleSize?: string;
        /**
         * Order tag, length cannot exceed 20 characters (ASCII)
         */
        tags?: string;
        /**
         * Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
         */
        cancelAfter?: number;
        /**
         * When **type** is market, select one out of two: size or funds
         */
        funds?: string;
        /**
         * Order failed after timeout of specified milliseconds, If clientTimestamp + allowMaxTimeWindow < the server reaches time, this order will fail.
         */
        allowMaxTimeWindow?: number;
        /**
         * Equal to KC-API-TIMESTAMP, Need to be defined if iceberg is specified.
         */
        clientTimestamp?: number;
    }): AddOrderSyncReq {
        let obj = new AddOrderSyncReq();
        obj.clientOid = data.clientOid;
        obj.side = data.side;
        obj.symbol = data.symbol;
        obj.type = data.type;
        obj.remark = data.remark;
        obj.stp = data.stp;
        obj.price = data.price;
        obj.size = data.size;
        if (data.timeInForce) {
            obj.timeInForce = data.timeInForce;
        } else {
            obj.timeInForce = AddOrderSyncReq.TimeInForceEnum.GTC;
        }
        if (data.postOnly) {
            obj.postOnly = data.postOnly;
        } else {
            obj.postOnly = false;
        }
        if (data.hidden) {
            obj.hidden = data.hidden;
        } else {
            obj.hidden = false;
        }
        if (data.iceberg) {
            obj.iceberg = data.iceberg;
        } else {
            obj.iceberg = false;
        }
        obj.visibleSize = data.visibleSize;
        obj.tags = data.tags;
        if (data.cancelAfter) {
            obj.cancelAfter = data.cancelAfter;
        } else {
            obj.cancelAfter = -1;
        }
        obj.funds = data.funds;
        obj.allowMaxTimeWindow = data.allowMaxTimeWindow;
        obj.clientTimestamp = data.clientTimestamp;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): AddOrderSyncReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): AddOrderSyncReq {
        return plainToClassFromExist(new AddOrderSyncReq(), jsonObject);
    }
}

export namespace AddOrderSyncReq {
    export enum SideEnum {
        /**
         *
         */
        BUY = <any>'buy',
        /**
         *
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         *
         */
        LIMIT = <any>'limit',
        /**
         *
         */
        MARKET = <any>'market',
    }
    export enum StpEnum {
        /**
         *
         */
        DC = <any>'DC',
        /**
         *
         */
        CO = <any>'CO',
        /**
         *
         */
        CN = <any>'CN',
        /**
         *
         */
        CB = <any>'CB',
    }
    export enum TimeInForceEnum {
        /**
         *
         */
        GTC = <any>'GTC',
        /**
         *
         */
        GTT = <any>'GTT',
        /**
         *
         */
        IOC = <any>'IOC',
        /**
         *
         */
        FOK = <any>'FOK',
    }
}

export class AddOrderSyncReqBuilder {
    constructor(readonly obj: AddOrderSyncReq) {
        this.obj = obj;
    }
    /**
     * Client Order ID: The ClientOid field is a unique ID created by the user (we recommend using a UUID), and can only contain numbers, letters, underscores (_), and hyphens (-). This field is returned when order information is obtained. You can use clientOid to tag your orders. ClientOid is different from the order ID created by the service provider. Please do not initiate requests using the same clientOid. The maximum length for the ClientOid is 40 characters.  Please remember the orderId created by the service provider, it used to check for updates in order status.
     */
    setClientOid(value: string): AddOrderSyncReqBuilder {
        this.obj.clientOid = value;
        return this;
    }

    /**
     * Specify if the order is to \'buy\' or \'sell\'.
     */
    setSide(value: AddOrderSyncReq.SideEnum): AddOrderSyncReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * symbol
     */
    setSymbol(value: string): AddOrderSyncReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * Specify if the order is a \'limit\' order or \'market\' order.   The type of order you specify when you place your order determines whether or not you need to request other parameters and also affects the execution of the matching engine.  When placing a limit order, you must specify a price and size. The system will try to match the order according to market price or a price better than market price. If the order cannot be immediately matched, it will stay in the order book until it is matched or the user cancels.  Unlike limit orders, the price for market orders fluctuates with market prices. When placing a market order, you do not need to specify a price; you only need to specify a quantity. Market orders are filled immediately and will not enter the order book. All market orders are takers and a taker fee will be charged.
     */
    setType(value: AddOrderSyncReq.TypeEnum): AddOrderSyncReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * Order placement remarks, length cannot exceed 20 characters (ASCII)
     */
    setRemark(value: string): AddOrderSyncReqBuilder {
        this.obj.remark = value;
        return this;
    }

    /**
     * [Self Trade Prevention](https://www.kucoin.com/docs-new/doc-338146) is divided into four strategies: CN, CO, CB , and DC
     */
    setStp(value: AddOrderSyncReq.StpEnum): AddOrderSyncReqBuilder {
        this.obj.stp = value;
        return this;
    }

    /**
     * Specify price for order  When placing a limit order, the price must be based on priceIncrement for the trading pair. The price increment (priceIncrement) is the price precision for the trading pair. For example, for the BTC-USDT trading pair, the priceIncrement is 0.00001000. So the price for your orders cannot be less than 0.00001000 and must be a multiple of priceIncrement. Otherwise, the order will return an invalid priceIncrement error.
     */
    setPrice(value: string): AddOrderSyncReqBuilder {
        this.obj.price = value;
        return this;
    }

    /**
     * Specify quantity for order.  When **type** is limited, size refers to the amount of trading targets (the asset name written in front) for the trading pair. The Size must be based on the baseIncrement of the trading pair. The baseIncrement represents the precision for the trading pair. The size of an order must be a positive-integer multiple of baseIncrement and must be between baseMinSize and baseMaxSize.  When **type** is market, select one out of two: size or funds
     */
    setSize(value: string): AddOrderSyncReqBuilder {
        this.obj.size = value;
        return this;
    }

    /**
     * [Time in force](https://www.kucoin.com/docs-new/doc-338146) is a special strategy used during trading
     */
    setTimeInForce(value: AddOrderSyncReq.TimeInForceEnum): AddOrderSyncReqBuilder {
        this.obj.timeInForce = value;
        return this;
    }

    /**
     * passive order labels, this is disabled when the order timing strategy is IOC or FOK
     */
    setPostOnly(value: boolean): AddOrderSyncReqBuilder {
        this.obj.postOnly = value;
        return this;
    }

    /**
     * [Hidden order](https://www.kucoin.com/docs-new/doc-338146) or not (not shown in order book)
     */
    setHidden(value: boolean): AddOrderSyncReqBuilder {
        this.obj.hidden = value;
        return this;
    }

    /**
     * Whether or not only visible portions of orders are shown in [Iceberg orders](https://www.kucoin.com/docs-new/doc-338146)
     */
    setIceberg(value: boolean): AddOrderSyncReqBuilder {
        this.obj.iceberg = value;
        return this;
    }

    /**
     * Maximum visible quantity in iceberg orders
     */
    setVisibleSize(value: string): AddOrderSyncReqBuilder {
        this.obj.visibleSize = value;
        return this;
    }

    /**
     * Order tag, length cannot exceed 20 characters (ASCII)
     */
    setTags(value: string): AddOrderSyncReqBuilder {
        this.obj.tags = value;
        return this;
    }

    /**
     * Cancel after n seconds, the order timing strategy is GTT, -1 means it will not be cancelled automatically, the default value is -1
     */
    setCancelAfter(value: number): AddOrderSyncReqBuilder {
        this.obj.cancelAfter = value;
        return this;
    }

    /**
     * When **type** is market, select one out of two: size or funds
     */
    setFunds(value: string): AddOrderSyncReqBuilder {
        this.obj.funds = value;
        return this;
    }

    /**
     * Order failed after timeout of specified milliseconds, If clientTimestamp + allowMaxTimeWindow < the server reaches time, this order will fail.
     */
    setAllowMaxTimeWindow(value: number): AddOrderSyncReqBuilder {
        this.obj.allowMaxTimeWindow = value;
        return this;
    }

    /**
     * Equal to KC-API-TIMESTAMP, Need to be defined if iceberg is specified.
     */
    setClientTimestamp(value: number): AddOrderSyncReqBuilder {
        this.obj.clientTimestamp = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): AddOrderSyncReq {
        return this.obj;
    }
}
