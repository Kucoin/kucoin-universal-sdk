// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetStopOrdersListReq implements Serializable {
    /**
     * Only list orders for a specific symbol
     */
    symbol?: string;

    /**
     * buy or sell
     */
    side?: string;

    /**
     * limit, market
     */
    type?: GetStopOrdersListReq.TypeEnum;

    /**
     * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin). Default is TRADE
     */
    tradeType?: string;

    /**
     * Start time (milisecond)
     */
    startAt?: number;

    /**
     * End time (milisecond)
     */
    endAt?: number;

    /**
     * Current page
     */
    currentPage?: number = 1;

    /**
     * Comma seperated order ID list
     */
    orderIds?: string;

    /**
     * Page size
     */
    pageSize?: number = 50;

    /**
     * Order type: stop: stop loss order, oco: oco order
     */
    stop?: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetStopOrdersListReq` class.
     * The builder pattern allows step-by-step construction of a `GetStopOrdersListReq` object.
     */
    static builder(): GetStopOrdersListReqBuilder {
        return new GetStopOrdersListReqBuilder(new GetStopOrdersListReq());
    }

    /**
     * Creates a new instance of the `GetStopOrdersListReq` class with the given data.
     */
    static create(data: {
        /**
         * Only list orders for a specific symbol
         */
        symbol?: string;
        /**
         * buy or sell
         */
        side?: string;
        /**
         * limit, market
         */
        type?: GetStopOrdersListReq.TypeEnum;
        /**
         * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin). Default is TRADE
         */
        tradeType?: string;
        /**
         * Start time (milisecond)
         */
        startAt?: number;
        /**
         * End time (milisecond)
         */
        endAt?: number;
        /**
         * Current page
         */
        currentPage?: number;
        /**
         * Comma seperated order ID list
         */
        orderIds?: string;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Order type: stop: stop loss order, oco: oco order
         */
        stop?: string;
    }): GetStopOrdersListReq {
        let obj = new GetStopOrdersListReq();
        obj.symbol = data.symbol;
        obj.side = data.side;
        obj.type = data.type;
        obj.tradeType = data.tradeType;
        obj.startAt = data.startAt;
        obj.endAt = data.endAt;
        if (data.currentPage) {
            obj.currentPage = data.currentPage;
        } else {
            obj.currentPage = 1;
        }
        obj.orderIds = data.orderIds;
        if (data.pageSize) {
            obj.pageSize = data.pageSize;
        } else {
            obj.pageSize = 50;
        }
        obj.stop = data.stop;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetStopOrdersListReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetStopOrdersListReq {
        return plainToClassFromExist(new GetStopOrdersListReq(), jsonObject);
    }
}

export namespace GetStopOrdersListReq {
    export enum TypeEnum {
        /**
         * limit order
         */
        LIMIT = <any>'limit',
        /**
         * market order
         */
        MARKET = <any>'market',
    }
}

export class GetStopOrdersListReqBuilder {
    constructor(readonly obj: GetStopOrdersListReq) {
        this.obj = obj;
    }
    /**
     * Only list orders for a specific symbol
     */
    setSymbol(value: string): GetStopOrdersListReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * buy or sell
     */
    setSide(value: string): GetStopOrdersListReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * limit, market
     */
    setType(value: GetStopOrdersListReq.TypeEnum): GetStopOrdersListReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * The type of trading : TRADE（Spot）, MARGIN_TRADE (Cross Margin), MARGIN_ISOLATED_TRADE (Isolated Margin). Default is TRADE
     */
    setTradeType(value: string): GetStopOrdersListReqBuilder {
        this.obj.tradeType = value;
        return this;
    }

    /**
     * Start time (milisecond)
     */
    setStartAt(value: number): GetStopOrdersListReqBuilder {
        this.obj.startAt = value;
        return this;
    }

    /**
     * End time (milisecond)
     */
    setEndAt(value: number): GetStopOrdersListReqBuilder {
        this.obj.endAt = value;
        return this;
    }

    /**
     * Current page
     */
    setCurrentPage(value: number): GetStopOrdersListReqBuilder {
        this.obj.currentPage = value;
        return this;
    }

    /**
     * Comma seperated order ID list
     */
    setOrderIds(value: string): GetStopOrdersListReqBuilder {
        this.obj.orderIds = value;
        return this;
    }

    /**
     * Page size
     */
    setPageSize(value: number): GetStopOrdersListReqBuilder {
        this.obj.pageSize = value;
        return this;
    }

    /**
     * Order type: stop: stop loss order, oco: oco order
     */
    setStop(value: string): GetStopOrdersListReqBuilder {
        this.obj.stop = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetStopOrdersListReq {
        return this.obj;
    }
}
