// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, Exclude, plainToClassFromExist } from 'class-transformer';
import { WsMessage } from '@model/common';
import { WebSocketMessageCallback } from '@internal/interfaces/websocket';
import { Response } from '@internal/interfaces/serializable';

export class OrderV2Event implements Response<WsMessage> {
    /**
     * Cumulative number of cancellations
     */
    canceledSize?: string;
    /**
     * Client Order ID: The ClientOid field is a unique ID created by the user
     */
    clientOid: string;
    /**
     * Cumulative number filled
     */
    filledSize?: string;
    /**
     * The unique order id generated by the trading system
     */
    orderId: string;
    /**
     * Order time (milliseconds)
     */
    orderTime: number;
    /**
     * User-specified order type
     */
    orderType: OrderV2Event.OrderTypeEnum;
    /**
     * User-specified order size
     */
    originSize: string;
    /**
     * Price
     */
    price?: string;
    /**
     * Remain funds
     */
    remainFunds?: string;
    /**
     * Remain size
     */
    remainSize?: string;
    /**
     * buy or sell
     */
    side: OrderV2Event.SideEnum;
    /**
     * User-specified order size
     */
    size?: string;
    /**
     * Order Status
     */
    status: OrderV2Event.StatusEnum;
    /**
     * Symbol
     */
    symbol: string;
    /**
     * Push time (nanoseconds)
     */
    ts: number;
    /**
     * Order Type
     */
    type: OrderV2Event.TypeEnum;
    /**
     * The size before order update
     */
    oldSize?: string;
    /**
     * Actual Fee Type
     */
    feeType?: OrderV2Event.FeeTypeEnum;
    /**
     * Actual transaction order type, If the counterparty order is an [Hidden/Iceberg Order](https://www.kucoin.com/docs-new/doc-338146), even if it is a maker order, this param will be displayed as taker. For actual trading fee, please refer to the **feeType**
     */
    liquidity?: OrderV2Event.LiquidityEnum;
    /**
     * Match Price (when the type is \"match\")
     */
    matchPrice?: string;
    /**
     * Match Size (when the type is \"match\")
     */
    matchSize?: string;
    /**
     * Trade ID: Generated by Matching engine.
     */
    tradeId?: string;

    private constructor() {
        // @ts-ignore
        this.clientOid = null;
        // @ts-ignore
        this.orderId = null;
        // @ts-ignore
        this.orderTime = null;
        // @ts-ignore
        this.orderType = null;
        // @ts-ignore
        this.originSize = null;
        // @ts-ignore
        this.side = null;
        // @ts-ignore
        this.status = null;
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.ts = null;
        // @ts-ignore
        this.type = null;
    }
    /**
     * common response
     */
    @Exclude()
    commonResponse?: WsMessage;

    setCommonResponse(response: WsMessage): void {
        this.commonResponse = response;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): OrderV2Event {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): OrderV2Event {
        return plainToClassFromExist(new OrderV2Event(), jsonObject);
    }
}

export namespace OrderV2Event {
    export enum OrderTypeEnum {
        /**
         * limit
         */
        LIMIT = <any>'limit',
        /**
         * market
         */
        MARKET = <any>'market',
    }
    export enum SideEnum {
        /**
         * buy
         */
        BUY = <any>'buy',
        /**
         * sell
         */
        SELL = <any>'sell',
    }
    export enum StatusEnum {
        /**
         * the order enters the matching system
         */
        _NEW = <any>'new',
        /**
         * the order is in the order book (maker order)
         */
        OPEN = <any>'open',
        /**
         * when taker order executes with orders in the order book, the taker order status is “match”
         */
        MATCH = <any>'match',
        /**
         * the order is fully executed successfully
         */
        DONE = <any>'done',
    }
    export enum TypeEnum {
        /**
         * the order is in the order book (maker order)
         */
        OPEN = <any>'open',
        /**
         * The message sent when the order is match, 1. When the status is open and the type is match, it is a maker match.  2. When the status is match and the type is match, it is a taker match.
         */
        MATCH = <any>'match',
        /**
         * The message sent due to the order being modified: STP triggering, partial cancellation of the order. Includes these three scenarios:  1. When the status is open and the type is update: partial amounts of the order have been canceled, or STP triggers  2. When the status is match and the type is update: STP triggers  3. When the status is done and the type is update: partial amounts of the order have been filled and the unfilled part got canceled, or STP is triggered.
         */
        UPDATE = <any>'update',
        /**
         * The message sent when the status of the order changes to DONE after the transaction
         */
        FILLED = <any>'filled',
        /**
         * The message sent when the status of the order changes to DONE due to being canceled
         */
        CANCELED = <any>'canceled',
        /**
         * The message sent when the order enters the matching system. When the order has just entered the matching system and has not yet done matching logic with the counterparty, a private message with the message type &quot;received&quot; and the order status &quot;new&quot; will be pushed.
         */
        RECEIVED = <any>'received',
    }
    export enum FeeTypeEnum {
        /**
         * takerFee
         */
        TAKERFEE = <any>'takerFee',
        /**
         * makerFee
         */
        MAKERFEE = <any>'makerFee',
    }
    export enum LiquidityEnum {
        /**
         * taker
         */
        TAKER = <any>'taker',
        /**
         * maker
         */
        MAKER = <any>'maker',
    }
}

export type OrderV2EventCallback = (topic: string, subject: string, data: OrderV2Event) => void;

export class OrderV2EventCallbackWrapper implements WebSocketMessageCallback {
    constructor(private callback: OrderV2EventCallback) {
        this.callback = callback;
    }

    onMessage(msg: WsMessage): void {
        let event = OrderV2Event.fromObject(msg.data);
        event.setCommonResponse(msg);
        this.callback(msg.topic, msg.subject, event);
    }
}
