// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import 'reflect-metadata';
import { Serializable } from '@internal/interfaces/serializable';

export class GetCurrencyReq implements Serializable {
    /**
     * Path parameter, Currency
     */
    @Reflect.metadata('path', 'currency')
    currency?: string;

    /**
     * Support for querying the chain of currency, e.g. the available values for USDT are OMNI, ERC20, TRC20. This only applies to multi-chain currencies; no need for single-chain currencies.
     */
    chain?: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetCurrencyReq` class.
     * The builder pattern allows step-by-step construction of a `GetCurrencyReq` object.
     */
    static builder(): GetCurrencyReqBuilder {
        return new GetCurrencyReqBuilder(new GetCurrencyReq());
    }

    /**
     * Creates a new instance of the `GetCurrencyReq` class with the given data.
     */
    static create(data: {
        /**
         * Path parameter, Currency
         */
        currency?: string;
        /**
         * Support for querying the chain of currency, e.g. the available values for USDT are OMNI, ERC20, TRC20. This only applies to multi-chain currencies; no need for single-chain currencies.
         */
        chain?: string;
    }): GetCurrencyReq {
        let obj = new GetCurrencyReq();
        obj.currency = data.currency;
        obj.chain = data.chain;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetCurrencyReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetCurrencyReq {
        return plainToClassFromExist(new GetCurrencyReq(), jsonObject);
    }
}

export class GetCurrencyReqBuilder {
    constructor(readonly obj: GetCurrencyReq) {
        this.obj = obj;
    }
    /**
     * Path parameter, Currency
     */
    setCurrency(value: string): GetCurrencyReqBuilder {
        this.obj.currency = value;
        return this;
    }

    /**
     * Support for querying the chain of currency, e.g. the available values for USDT are OMNI, ERC20, TRC20. This only applies to multi-chain currencies; no need for single-chain currencies.
     */
    setChain(value: string): GetCurrencyReqBuilder {
        this.obj.chain = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetCurrencyReq {
        return this.obj;
    }
}
