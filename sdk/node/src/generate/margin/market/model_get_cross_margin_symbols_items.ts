// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetCrossMarginSymbolsItems implements Serializable {
    /**
     * symbol
     */
    symbol: string;

    /**
     * Symbol name
     */
    name: string;

    /**
     * Whether trading is enabled: True for enabled; false for disabled
     */
    enableTrading: boolean;

    /**
     * Trading market
     */
    market: string;

    /**
     * Base currency, e.g. BTC.
     */
    baseCurrency: string;

    /**
     * Quote currency, e.g. USDT.
     */
    quoteCurrency: string;

    /**
     * Quantity increment: The quantity for an order must be a positive integer multiple of this increment. Here, the size refers to the quantity of the base currency for the order. For example, for the ETH-USDT trading pair, if the baseIncrement is 0.0000001, the order quantity can be 1.0000001 but not 1.00000001.
     */
    baseIncrement: string;

    /**
     * The minimum order quantity required to place an order.
     */
    baseMinSize: string;

    /**
     * Quote increment: The funds for a market order must be a positive integer multiple of this increment. The funds refer to the quote currency amount. For example, for the ETH-USDT trading pair, if the quoteIncrement is 0.000001, the amount of USDT for the order can be 3000.000001 but not 3000.0000001.
     */
    quoteIncrement: string;

    /**
     * The minimum order funds required to place a market order.
     */
    quoteMinSize: string;

    /**
     * The maximum order size required to place an order.
     */
    baseMaxSize: string;

    /**
     * The maximum order funds required to place a market order.
     */
    quoteMaxSize: string;

    /**
     * Price increment: The price of an order must be a positive integer multiple of this increment. For example, for the ETH-USDT trading pair, if the priceIncrement is 0.01, the order price can be 3000.01 but not 3000.001.  Specifies the min. order price as well as the price increment.This also applies to quote currency.
     */
    priceIncrement: string;

    /**
     * The currency of charged fees.
     */
    feeCurrency: string;

    /**
     * Threshold for price protection
     */
    priceLimitRate: string;

    /**
     * The minimum trading amounts
     */
    minFunds: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.symbol = null;
        // @ts-ignore
        this.name = null;
        // @ts-ignore
        this.enableTrading = null;
        // @ts-ignore
        this.market = null;
        // @ts-ignore
        this.baseCurrency = null;
        // @ts-ignore
        this.quoteCurrency = null;
        // @ts-ignore
        this.baseIncrement = null;
        // @ts-ignore
        this.baseMinSize = null;
        // @ts-ignore
        this.quoteIncrement = null;
        // @ts-ignore
        this.quoteMinSize = null;
        // @ts-ignore
        this.baseMaxSize = null;
        // @ts-ignore
        this.quoteMaxSize = null;
        // @ts-ignore
        this.priceIncrement = null;
        // @ts-ignore
        this.feeCurrency = null;
        // @ts-ignore
        this.priceLimitRate = null;
        // @ts-ignore
        this.minFunds = null;
    }
    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetCrossMarginSymbolsItems {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetCrossMarginSymbolsItems {
        return plainToClassFromExist(new GetCrossMarginSymbolsItems(), jsonObject);
    }
}
