// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetTradeHistoryReq implements Serializable {
    /**
     * symbol
     */
    symbol?: string;

    /**
     * Trade type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
     */
    tradeType?: GetTradeHistoryReq.TradeTypeEnum;

    /**
     * The unique order id generated by the trading system (If orderId is specified, please ignore the other query parameters)
     */
    orderId?: string;

    /**
     * Specify if the order is to \'buy\' or \'sell\'.
     */
    side?: GetTradeHistoryReq.SideEnum;

    /**
     * Specify if the order is a \'limit\' order or \'market\' order.
     */
    type?: GetTradeHistoryReq.TypeEnum;

    /**
     * The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
     */
    lastId?: number;

    /**
     * Default20, Max100
     */
    limit?: number = 20;

    /**
     * Start time (milliseconds)
     */
    startAt?: number;

    /**
     * End time (milliseconds)
     */
    endAt?: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetTradeHistoryReq` class.
     * The builder pattern allows step-by-step construction of a `GetTradeHistoryReq` object.
     */
    static builder(): GetTradeHistoryReqBuilder {
        return new GetTradeHistoryReqBuilder(new GetTradeHistoryReq());
    }

    /**
     * Creates a new instance of the `GetTradeHistoryReq` class with the given data.
     */
    static create(data: {
        /**
         * symbol
         */
        symbol?: string;
        /**
         * Trade type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
         */
        tradeType?: GetTradeHistoryReq.TradeTypeEnum;
        /**
         * The unique order id generated by the trading system (If orderId is specified, please ignore the other query parameters)
         */
        orderId?: string;
        /**
         * Specify if the order is to \'buy\' or \'sell\'.
         */
        side?: GetTradeHistoryReq.SideEnum;
        /**
         * Specify if the order is a \'limit\' order or \'market\' order.
         */
        type?: GetTradeHistoryReq.TypeEnum;
        /**
         * The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
         */
        lastId?: number;
        /**
         * Default20, Max100
         */
        limit?: number;
        /**
         * Start time (milliseconds)
         */
        startAt?: number;
        /**
         * End time (milliseconds)
         */
        endAt?: number;
    }): GetTradeHistoryReq {
        let obj = new GetTradeHistoryReq();
        obj.symbol = data.symbol;
        obj.tradeType = data.tradeType;
        obj.orderId = data.orderId;
        obj.side = data.side;
        obj.type = data.type;
        obj.lastId = data.lastId;
        if (data.limit) {
            obj.limit = data.limit;
        } else {
            obj.limit = 20;
        }
        obj.startAt = data.startAt;
        obj.endAt = data.endAt;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetTradeHistoryReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetTradeHistoryReq {
        return plainToClassFromExist(new GetTradeHistoryReq(), jsonObject);
    }
}

export namespace GetTradeHistoryReq {
    export enum TradeTypeEnum {
        /**
         *
         */
        MARGIN_TRADE = <any>'MARGIN_TRADE',
        /**
         *
         */
        MARGIN_ISOLATED_TRADE = <any>'MARGIN_ISOLATED_TRADE',
    }
    export enum SideEnum {
        /**
         *
         */
        BUY = <any>'buy',
        /**
         *
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         *
         */
        LIMIT = <any>'limit',
        /**
         *
         */
        MARKET = <any>'market',
    }
}

export class GetTradeHistoryReqBuilder {
    constructor(readonly obj: GetTradeHistoryReq) {
        this.obj = obj;
    }
    /**
     * symbol
     */
    setSymbol(value: string): GetTradeHistoryReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * Trade type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
     */
    setTradeType(value: GetTradeHistoryReq.TradeTypeEnum): GetTradeHistoryReqBuilder {
        this.obj.tradeType = value;
        return this;
    }

    /**
     * The unique order id generated by the trading system (If orderId is specified, please ignore the other query parameters)
     */
    setOrderId(value: string): GetTradeHistoryReqBuilder {
        this.obj.orderId = value;
        return this;
    }

    /**
     * Specify if the order is to \'buy\' or \'sell\'.
     */
    setSide(value: GetTradeHistoryReq.SideEnum): GetTradeHistoryReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * Specify if the order is a \'limit\' order or \'market\' order.
     */
    setType(value: GetTradeHistoryReq.TypeEnum): GetTradeHistoryReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
     */
    setLastId(value: number): GetTradeHistoryReqBuilder {
        this.obj.lastId = value;
        return this;
    }

    /**
     * Default20, Max100
     */
    setLimit(value: number): GetTradeHistoryReqBuilder {
        this.obj.limit = value;
        return this;
    }

    /**
     * Start time (milliseconds)
     */
    setStartAt(value: number): GetTradeHistoryReqBuilder {
        this.obj.startAt = value;
        return this;
    }

    /**
     * End time (milliseconds)
     */
    setEndAt(value: number): GetTradeHistoryReqBuilder {
        this.obj.endAt = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetTradeHistoryReq {
        return this.obj;
    }
}
