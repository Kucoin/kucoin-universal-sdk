// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetClosedOrdersReq implements Serializable {
    /**
     * symbol
     */
    symbol?: string;

    /**
     * Transaction type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
     */
    tradeType?: GetClosedOrdersReq.TradeTypeEnum;

    /**
     * Specify if the order is to \'buy\' or \'sell\'.
     */
    side?: GetClosedOrdersReq.SideEnum;

    /**
     * Specify if the order is a \'limit\' order or \'market\' order.
     */
    type?: GetClosedOrdersReq.TypeEnum;

    /**
     * The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
     */
    lastId?: number;

    /**
     * Default20, Max100
     */
    limit?: number = 20;

    /**
     * Start time (milliseconds)
     */
    startAt?: number;

    /**
     * End time (milliseconds)
     */
    endAt?: number;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetClosedOrdersReq` class.
     * The builder pattern allows step-by-step construction of a `GetClosedOrdersReq` object.
     */
    static builder(): GetClosedOrdersReqBuilder {
        return new GetClosedOrdersReqBuilder(new GetClosedOrdersReq());
    }

    /**
     * Creates a new instance of the `GetClosedOrdersReq` class with the given data.
     */
    static create(data: {
        /**
         * symbol
         */
        symbol?: string;
        /**
         * Transaction type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
         */
        tradeType?: GetClosedOrdersReq.TradeTypeEnum;
        /**
         * Specify if the order is to \'buy\' or \'sell\'.
         */
        side?: GetClosedOrdersReq.SideEnum;
        /**
         * Specify if the order is a \'limit\' order or \'market\' order.
         */
        type?: GetClosedOrdersReq.TypeEnum;
        /**
         * The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
         */
        lastId?: number;
        /**
         * Default20, Max100
         */
        limit?: number;
        /**
         * Start time (milliseconds)
         */
        startAt?: number;
        /**
         * End time (milliseconds)
         */
        endAt?: number;
    }): GetClosedOrdersReq {
        let obj = new GetClosedOrdersReq();
        obj.symbol = data.symbol;
        obj.tradeType = data.tradeType;
        obj.side = data.side;
        obj.type = data.type;
        obj.lastId = data.lastId;
        if (data.limit) {
            obj.limit = data.limit;
        } else {
            obj.limit = 20;
        }
        obj.startAt = data.startAt;
        obj.endAt = data.endAt;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetClosedOrdersReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetClosedOrdersReq {
        return plainToClassFromExist(new GetClosedOrdersReq(), jsonObject);
    }
}

export namespace GetClosedOrdersReq {
    export enum TradeTypeEnum {
        /**
         *
         */
        MARGIN_TRADE = <any>'MARGIN_TRADE',
        /**
         *
         */
        MARGIN_ISOLATED_TRADE = <any>'MARGIN_ISOLATED_TRADE',
    }
    export enum SideEnum {
        /**
         *
         */
        BUY = <any>'buy',
        /**
         *
         */
        SELL = <any>'sell',
    }
    export enum TypeEnum {
        /**
         *
         */
        LIMIT = <any>'limit',
        /**
         *
         */
        MARKET = <any>'market',
    }
}

export class GetClosedOrdersReqBuilder {
    constructor(readonly obj: GetClosedOrdersReq) {
        this.obj = obj;
    }
    /**
     * symbol
     */
    setSymbol(value: string): GetClosedOrdersReqBuilder {
        this.obj.symbol = value;
        return this;
    }

    /**
     * Transaction type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
     */
    setTradeType(value: GetClosedOrdersReq.TradeTypeEnum): GetClosedOrdersReqBuilder {
        this.obj.tradeType = value;
        return this;
    }

    /**
     * Specify if the order is to \'buy\' or \'sell\'.
     */
    setSide(value: GetClosedOrdersReq.SideEnum): GetClosedOrdersReqBuilder {
        this.obj.side = value;
        return this;
    }

    /**
     * Specify if the order is a \'limit\' order or \'market\' order.
     */
    setType(value: GetClosedOrdersReq.TypeEnum): GetClosedOrdersReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
     */
    setLastId(value: number): GetClosedOrdersReqBuilder {
        this.obj.lastId = value;
        return this;
    }

    /**
     * Default20, Max100
     */
    setLimit(value: number): GetClosedOrdersReqBuilder {
        this.obj.limit = value;
        return this;
    }

    /**
     * Start time (milliseconds)
     */
    setStartAt(value: number): GetClosedOrdersReqBuilder {
        this.obj.startAt = value;
        return this;
    }

    /**
     * End time (milliseconds)
     */
    setEndAt(value: number): GetClosedOrdersReqBuilder {
        this.obj.endAt = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetClosedOrdersReq {
        return this.obj;
    }
}
