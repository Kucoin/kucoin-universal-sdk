
describe('Auto Test', ()=> {
    let api: OrderAPI;

    beforeAll(()=> {
        api = ??
    });
    test('addOrder request test', ()=> {
    /**
    * addOrder
    * Add Order
    * /api/v3/hf/margin/order
    */
    let builder = AddOrderReq.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setType(?).setStp(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setCancelAfter(?).setFunds(?).setIsIsolated(?).setAutoBorrow(?).setAutoRepay(?);
    let req = builder.build();
    let resp = api.addOrder(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.loanApplyId).toEqual(expect.anything());
        expect(result.borrowSize).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('addOrderTest request test', ()=> {
    /**
    * addOrderTest
    * Add Order Test
    * /api/v3/hf/margin/order/test
    */
    let builder = AddOrderTestReq.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setType(?).setStp(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setCancelAfter(?).setFunds(?).setIsIsolated(?).setAutoBorrow(?).setAutoRepay(?);
    let req = builder.build();
    let resp = api.addOrderTest(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.loanApplyId).toEqual(expect.anything());
        expect(result.borrowSize).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('cancelOrderByOrderId request test', ()=> {
    /**
    * cancelOrderByOrderId
    * Cancel Order By OrderId
    * /api/v3/hf/margin/orders/{orderId}
    */
    let builder = CancelOrderByOrderIdReq.builder();
    builder.setOrderId(?).setSymbol(?);
    let req = builder.build();
    let resp = api.cancelOrderByOrderId(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('cancelOrderByClientOid request test', ()=> {
    /**
    * cancelOrderByClientOid
    * Cancel Order By ClientOid
    * /api/v3/hf/margin/orders/client-order/{clientOid}
    */
    let builder = CancelOrderByClientOidReq.builder();
    builder.setClientOid(?).setSymbol(?);
    let req = builder.build();
    let resp = api.cancelOrderByClientOid(req);
    return resp.then(result => {
        expect(result.clientOid).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('cancelAllOrdersBySymbol request test', ()=> {
    /**
    * cancelAllOrdersBySymbol
    * Cancel All Orders By Symbol
    * /api/v3/hf/margin/orders
    */
    let builder = CancelAllOrdersBySymbolReq.builder();
    builder.setSymbol(?).setTradeType(?);
    let req = builder.build();
    let resp = api.cancelAllOrdersBySymbol(req);
    return resp.then(result => {
        expect(result.data).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('getSymbolsWithOpenOrder request test', ()=> {
    /**
    * getSymbolsWithOpenOrder
    * Get Symbols With Open Order
    * /api/v3/hf/margin/order/active/symbols
    */
    let builder = GetSymbolsWithOpenOrderReq.builder();
    builder.setTradeType(?);
    let req = builder.build();
    let resp = api.getSymbolsWithOpenOrder(req);
    return resp.then(result => {
        expect(result.symbolSize).toEqual(expect.anything());
        expect(result.symbols).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('getOpenOrders request test', ()=> {
    /**
    * getOpenOrders
    * Get Open Orders
    * /api/v3/hf/margin/orders/active
    */
    let builder = GetOpenOrdersReq.builder();
    builder.setSymbol(?).setTradeType(?);
    let req = builder.build();
    let resp = api.getOpenOrders(req);
    return resp.then(result => {
        expect(result.data).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('getClosedOrders request test', ()=> {
    /**
    * getClosedOrders
    * Get Closed Orders
    * /api/v3/hf/margin/orders/done
    */
    let builder = GetClosedOrdersReq.builder();
    builder.setSymbol(?).setTradeType(?).setSide(?).setType(?).setLastId(?).setLimit(?).setStartAt(?).setEndAt(?);
    let req = builder.build();
    let resp = api.getClosedOrders(req);
    return resp.then(result => {
        expect(result.lastId).toEqual(expect.anything());
        expect(result.items).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('getTradeHistory request test', ()=> {
    /**
    * getTradeHistory
    * Get Trade History
    * /api/v3/hf/margin/fills
    */
    let builder = GetTradeHistoryReq.builder();
    builder.setSymbol(?).setTradeType(?).setOrderId(?).setSide(?).setType(?).setLastId(?).setLimit(?).setStartAt(?).setEndAt(?);
    let req = builder.build();
    let resp = api.getTradeHistory(req);
    return resp.then(result => {
        expect(result.items).toEqual(expect.anything());
        expect(result.lastId).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('getOrderByOrderId request test', ()=> {
    /**
    * getOrderByOrderId
    * Get Order By OrderId
    * /api/v3/hf/margin/orders/{orderId}
    */
    let builder = GetOrderByOrderIdReq.builder();
    builder.setOrderId(?).setSymbol(?);
    let req = builder.build();
    let resp = api.getOrderByOrderId(req);
    return resp.then(result => {
        expect(result.id).toEqual(expect.anything());
        expect(result.symbol).toEqual(expect.anything());
        expect(result.opType).toEqual(expect.anything());
        expect(result.type).toEqual(expect.anything());
        expect(result.side).toEqual(expect.anything());
        expect(result.price).toEqual(expect.anything());
        expect(result.size).toEqual(expect.anything());
        expect(result.funds).toEqual(expect.anything());
        expect(result.dealSize).toEqual(expect.anything());
        expect(result.dealFunds).toEqual(expect.anything());
        expect(result.fee).toEqual(expect.anything());
        expect(result.feeCurrency).toEqual(expect.anything());
        expect(result.stp).toEqual(expect.anything());
        expect(result.stop).toEqual(expect.anything());
        expect(result.stopTriggered).toEqual(expect.anything());
        expect(result.stopPrice).toEqual(expect.anything());
        expect(result.timeInForce).toEqual(expect.anything());
        expect(result.postOnly).toEqual(expect.anything());
        expect(result.hidden).toEqual(expect.anything());
        expect(result.iceberg).toEqual(expect.anything());
        expect(result.visibleSize).toEqual(expect.anything());
        expect(result.cancelAfter).toEqual(expect.anything());
        expect(result.channel).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        expect(result.remark).toEqual(expect.anything());
        expect(result.tags).toEqual(expect.anything());
        expect(result.cancelExist).toEqual(expect.anything());
        expect(result.createdAt).toEqual(expect.anything());
        expect(result.lastUpdatedAt).toEqual(expect.anything());
        expect(result.tradeType).toEqual(expect.anything());
        expect(result.inOrderBook).toEqual(expect.anything());
        expect(result.cancelledSize).toEqual(expect.anything());
        expect(result.cancelledFunds).toEqual(expect.anything());
        expect(result.remainSize).toEqual(expect.anything());
        expect(result.remainFunds).toEqual(expect.anything());
        expect(result.tax).toEqual(expect.anything());
        expect(result.active).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('getOrderByClientOid request test', ()=> {
    /**
    * getOrderByClientOid
    * Get Order By ClientOid
    * /api/v3/hf/margin/orders/client-order/{clientOid}
    */
    let builder = GetOrderByClientOidReq.builder();
    builder.setClientOid(?).setSymbol(?);
    let req = builder.build();
    let resp = api.getOrderByClientOid(req);
    return resp.then(result => {
        expect(result.id).toEqual(expect.anything());
        expect(result.symbol).toEqual(expect.anything());
        expect(result.opType).toEqual(expect.anything());
        expect(result.type).toEqual(expect.anything());
        expect(result.side).toEqual(expect.anything());
        expect(result.price).toEqual(expect.anything());
        expect(result.size).toEqual(expect.anything());
        expect(result.funds).toEqual(expect.anything());
        expect(result.dealSize).toEqual(expect.anything());
        expect(result.dealFunds).toEqual(expect.anything());
        expect(result.fee).toEqual(expect.anything());
        expect(result.feeCurrency).toEqual(expect.anything());
        expect(result.stp).toEqual(expect.anything());
        expect(result.stop).toEqual(expect.anything());
        expect(result.stopTriggered).toEqual(expect.anything());
        expect(result.stopPrice).toEqual(expect.anything());
        expect(result.timeInForce).toEqual(expect.anything());
        expect(result.postOnly).toEqual(expect.anything());
        expect(result.hidden).toEqual(expect.anything());
        expect(result.iceberg).toEqual(expect.anything());
        expect(result.visibleSize).toEqual(expect.anything());
        expect(result.cancelAfter).toEqual(expect.anything());
        expect(result.channel).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        expect(result.remark).toEqual(expect.anything());
        expect(result.tags).toEqual(expect.anything());
        expect(result.cancelExist).toEqual(expect.anything());
        expect(result.createdAt).toEqual(expect.anything());
        expect(result.lastUpdatedAt).toEqual(expect.anything());
        expect(result.tradeType).toEqual(expect.anything());
        expect(result.inOrderBook).toEqual(expect.anything());
        expect(result.cancelledSize).toEqual(expect.anything());
        expect(result.cancelledFunds).toEqual(expect.anything());
        expect(result.remainSize).toEqual(expect.anything());
        expect(result.remainFunds).toEqual(expect.anything());
        expect(result.tax).toEqual(expect.anything());
        expect(result.active).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('addOrderV1 request test', ()=> {
    /**
    * addOrderV1
    * Add Order - V1
    * /api/v1/margin/order
    */
    let builder = AddOrderV1Req.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setType(?).setStp(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setCancelAfter(?).setFunds(?).setAutoBorrow(?).setAutoRepay(?).setMarginModel(?);
    let req = builder.build();
    let resp = api.addOrderV1(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.loanApplyId).toEqual(expect.anything());
        expect(result.borrowSize).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        console.log(resp);
    });
    })

    test('addOrderTestV1 request test', ()=> {
    /**
    * addOrderTestV1
    * Add Order Test - V1
    * /api/v1/margin/order/test
    */
    let builder = AddOrderTestV1Req.builder();
    builder.setClientOid(?).setSide(?).setSymbol(?).setType(?).setStp(?).setPrice(?).setSize(?).setTimeInForce(?).setPostOnly(?).setHidden(?).setIceberg(?).setVisibleSize(?).setCancelAfter(?).setFunds(?).setAutoBorrow(?).setAutoRepay(?).setMarginModel(?);
    let req = builder.build();
    let resp = api.addOrderTestV1(req);
    return resp.then(result => {
        expect(result.orderId).toEqual(expect.anything());
        expect(result.loanApplyId).toEqual(expect.anything());
        expect(result.borrowSize).toEqual(expect.anything());
        expect(result.clientOid).toEqual(expect.anything());
        console.log(resp);
    });
    })

})