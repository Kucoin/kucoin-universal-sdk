// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class GetSpotActualFeeReq implements Serializable {
    /**
     * Trading pair (optional; you can inquire fee rates of 10 trading pairs each time at most)
     */
    symbols?: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {}
    /**
     * Creates a new instance of the `GetSpotActualFeeReq` class.
     * The builder pattern allows step-by-step construction of a `GetSpotActualFeeReq` object.
     */
    static builder(): GetSpotActualFeeReqBuilder {
        return new GetSpotActualFeeReqBuilder(new GetSpotActualFeeReq());
    }

    /**
     * Creates a new instance of the `GetSpotActualFeeReq` class with the given data.
     */
    static create(data: {
        /**
         * Trading pair (optional; you can inquire fee rates of 10 trading pairs each time at most)
         */
        symbols?: string;
    }): GetSpotActualFeeReq {
        let obj = new GetSpotActualFeeReq();
        obj.symbols = data.symbols;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): GetSpotActualFeeReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): GetSpotActualFeeReq {
        return plainToClassFromExist(new GetSpotActualFeeReq(), jsonObject);
    }
}

export class GetSpotActualFeeReqBuilder {
    constructor(readonly obj: GetSpotActualFeeReq) {
        this.obj = obj;
    }
    /**
     * Trading pair (optional; you can inquire fee rates of 10 trading pairs each time at most)
     */
    setSymbols(value: string): GetSpotActualFeeReqBuilder {
        this.obj.symbols = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): GetSpotActualFeeReq {
        return this.obj;
    }
}
