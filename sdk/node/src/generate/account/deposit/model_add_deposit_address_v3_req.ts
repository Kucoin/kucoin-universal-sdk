// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from "class-transformer"
import { Serializable } from '@internal/interfaces/serializable';

export class AddDepositAddressV3Req implements Serializable{
    /**
    * currency
    */
    currency: string;
    
    /**
    * The currency chainId, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native. 
    */
    chain: string = 'eth';
    
    /**
    * Deposit account type: MAIN (funding account), TRADE (spot trading account); the default is MAIN
    */
    to?: AddDepositAddressV3Req.ToEnum = AddDepositAddressV3Req.'MAIN';
    
    /**
    * Deposit amount. This parameter is only used when applying for invoices on the Lightning Network. This parameter is invalid if it is not passed through the Lightning Network.
    */
    amount?: string;
    
    /**
    * Private constructor, please use the corresponding static methods to construct the object.
    */
    private constructor() {
    // @ts-ignore
    this.currency = null;
    // @ts-ignore
    this.chain = null;
    }
    /**
    * Creates a new instance of the `AddDepositAddressV3Req` class.
    * The builder pattern allows step-by-step construction of a `AddDepositAddressV3Req` object.
    */
    static builder(): AddDepositAddressV3ReqBuilder {
        return new AddDepositAddressV3ReqBuilder(new AddDepositAddressV3Req());
    }

    /**
    * Creates a new instance of the `AddDepositAddressV3Req` class with the given data.
    */
    static create(data : {
        /**
        * currency
        */
        currency: string;
        /**
        * The currency chainId, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native. 
        */
        chain: string;
        /**
        * Deposit account type: MAIN (funding account), TRADE (spot trading account); the default is MAIN
        */
        to?: AddDepositAddressV3Req.ToEnum;
        /**
        * Deposit amount. This parameter is only used when applying for invoices on the Lightning Network. This parameter is invalid if it is not passed through the Lightning Network.
        */
        amount?: string;
    }): AddDepositAddressV3Req {
        let obj = new AddDepositAddressV3Req()
        obj.currency = data.currency
        if (data.chain) {
            obj.chain = data.chain
        } else {
            obj.chain = 'eth'
        }
        if (data.to) {
            obj.to = data.to
        } else {
            obj.to = AddDepositAddressV3Req.'MAIN'
        }
        obj.amount = data.amount
        return obj
    }

    /**
    * Convert the object to a JSON string.
    */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
    * Create an object from a JSON string.
    */
    static fromJson(input: string): AddDepositAddressV3Req {
        return this.fromObject(JSON.parse(input));
    }
    /**
    * Create an object from Js Object.
    */
    static fromObject(jsonObject: Object): AddDepositAddressV3Req {
        return plainToClassFromExist(new AddDepositAddressV3Req(), jsonObject);
    }

}

export namespace AddDepositAddressV3Req {
    export enum ToEnum {
        /**
        * Funding account
        */
        MAIN = <any> 'main',
        /**
        * Spot account
        */
        TRADE = <any> 'trade'
    }
}

export class AddDepositAddressV3ReqBuilder {
    constructor(readonly obj: AddDepositAddressV3Req) {
        this.obj = obj;
    }
    /**
    * currency
    */
    setCurrency(value :string) :AddDepositAddressV3ReqBuilder {
        this.obj.currency = value
        return this
    }

    /**
    * The currency chainId, e.g. the available values for USDT are OMNI, ERC20, and TRC20; default is ERC20. The available values for BTC are Native, Segwit, TRC20; the parameters are bech32, btc, trx; default is Native. 
    */
    setChain(value :string) :AddDepositAddressV3ReqBuilder {
        this.obj.chain = value
        return this
    }

    /**
    * Deposit account type: MAIN (funding account), TRADE (spot trading account); the default is MAIN
    */
    setTo(value :AddDepositAddressV3Req.ToEnum) :AddDepositAddressV3ReqBuilder {
        this.obj.to = value
        return this
    }

    /**
    * Deposit amount. This parameter is only used when applying for invoices on the Lightning Network. This parameter is invalid if it is not passed through the Lightning Network.
    */
    setAmount(value :string) :AddDepositAddressV3ReqBuilder {
        this.obj.amount = value
        return this
    }

    /**
    * Get the final object.
    */
    build():AddDepositAddressV3Req {
        return this.obj;
    }
}

