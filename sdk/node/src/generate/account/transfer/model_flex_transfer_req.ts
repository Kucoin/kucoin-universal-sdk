// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

import { instanceToPlain, plainToClassFromExist } from 'class-transformer';
import { Serializable } from '@internal/interfaces/serializable';

export class FlexTransferReq implements Serializable {
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     */
    clientOid: string;

    /**
     * currency
     */
    currency: string;

    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     */
    amount: string;

    /**
     * Transfer out UserId: This is required when transferring from sub-account to master-account. It is optional for internal transfers.
     */
    fromUserId?: string;

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     */
    fromAccountType: FlexTransferReq.FromAccountTypeEnum;

    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     */
    fromAccountTag?: string;

    /**
     * Transfer type: INTERNAL (Transfer within account), PARENT_TO_SUB (Transfer from master-account to sub-account), SUB_TO_PARENT (Transfer from sub-account to master-account)
     */
    type: FlexTransferReq.TypeEnum;

    /**
     * Transfer in UserId: This is required when transferring master-account to sub-account. It is optional for internal transfers.
     */
    toUserId?: string;

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     */
    toAccountType: FlexTransferReq.ToAccountTypeEnum;

    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     */
    toAccountTag?: string;

    /**
     * Private constructor, please use the corresponding static methods to construct the object.
     */
    private constructor() {
        // @ts-ignore
        this.clientOid = null;
        // @ts-ignore
        this.currency = null;
        // @ts-ignore
        this.amount = null;
        // @ts-ignore
        this.fromAccountType = null;
        // @ts-ignore
        this.type = null;
        // @ts-ignore
        this.toAccountType = null;
    }
    /**
     * Creates a new instance of the `FlexTransferReq` class.
     * The builder pattern allows step-by-step construction of a `FlexTransferReq` object.
     */
    static builder(): FlexTransferReqBuilder {
        return new FlexTransferReqBuilder(new FlexTransferReq());
    }

    /**
     * Creates a new instance of the `FlexTransferReq` class with the given data.
     */
    static create(data: {
        /**
         * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
         */
        clientOid: string;
        /**
         * currency
         */
        currency: string;
        /**
         * Transfer amount: The amount is a positive integer multiple of the currency precision.
         */
        amount: string;
        /**
         * Transfer out UserId: This is required when transferring from sub-account to master-account. It is optional for internal transfers.
         */
        fromUserId?: string;
        /**
         * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
         */
        fromAccountType: FlexTransferReq.FromAccountTypeEnum;
        /**
         * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
         */
        fromAccountTag?: string;
        /**
         * Transfer type: INTERNAL (Transfer within account), PARENT_TO_SUB (Transfer from master-account to sub-account), SUB_TO_PARENT (Transfer from sub-account to master-account)
         */
        type: FlexTransferReq.TypeEnum;
        /**
         * Transfer in UserId: This is required when transferring master-account to sub-account. It is optional for internal transfers.
         */
        toUserId?: string;
        /**
         * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
         */
        toAccountType: FlexTransferReq.ToAccountTypeEnum;
        /**
         * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
         */
        toAccountTag?: string;
    }): FlexTransferReq {
        let obj = new FlexTransferReq();
        obj.clientOid = data.clientOid;
        obj.currency = data.currency;
        obj.amount = data.amount;
        obj.fromUserId = data.fromUserId;
        obj.fromAccountType = data.fromAccountType;
        obj.fromAccountTag = data.fromAccountTag;
        obj.type = data.type;
        obj.toUserId = data.toUserId;
        obj.toAccountType = data.toAccountType;
        obj.toAccountTag = data.toAccountTag;
        return obj;
    }

    /**
     * Convert the object to a JSON string.
     */
    toJson(): string {
        return JSON.stringify(instanceToPlain(this));
    }
    /**
     * Create an object from a JSON string.
     */
    static fromJson(input: string): FlexTransferReq {
        return this.fromObject(JSON.parse(input));
    }
    /**
     * Create an object from Js Object.
     */
    static fromObject(jsonObject: Object): FlexTransferReq {
        return plainToClassFromExist(new FlexTransferReq(), jsonObject);
    }
}

export namespace FlexTransferReq {
    export enum FromAccountTypeEnum {
        /**
         * Funding account
         */
        MAIN = <any>'MAIN',
        /**
         * Spot account
         */
        TRADE = <any>'TRADE',
        /**
         * Futures account
         */
        CONTRACT = <any>'CONTRACT',
        /**
         * Cross margin account
         */
        MARGIN = <any>'MARGIN',
        /**
         * Isolated margin account
         */
        ISOLATED = <any>'ISOLATED',
        /**
         * Cross margin account
         */
        MARGIN_V2 = <any>'MARGIN_V2',
        /**
         * Isolated margin account
         */
        ISOLATED_V2 = <any>'ISOLATED_V2',
        /**
         * Option account
         */
        OPTION = <any>'OPTION',
    }
    export enum TypeEnum {
        /**
         *
         */
        INTERNAL = <any>'INTERNAL',
        /**
         *
         */
        PARENT_TO_SUB = <any>'PARENT_TO_SUB',
        /**
         *
         */
        SUB_TO_PARENT = <any>'SUB_TO_PARENT',
    }
    export enum ToAccountTypeEnum {
        /**
         * Funding account
         */
        MAIN = <any>'MAIN',
        /**
         * Spot account
         */
        TRADE = <any>'TRADE',
        /**
         * Futures account
         */
        CONTRACT = <any>'CONTRACT',
        /**
         * Cross margin account
         */
        MARGIN = <any>'MARGIN',
        /**
         * Isolated margin account
         */
        ISOLATED = <any>'ISOLATED',
        /**
         * Cross margin account
         */
        MARGIN_V2 = <any>'MARGIN_V2',
        /**
         * Isolated margin account
         */
        ISOLATED_V2 = <any>'ISOLATED_V2',
        /**
         * Option account
         */
        OPTION = <any>'OPTION',
    }
}

export class FlexTransferReqBuilder {
    constructor(readonly obj: FlexTransferReq) {
        this.obj = obj;
    }
    /**
     * Unique order ID created by users to identify their orders, e.g. UUID, with a maximum length of 128 bits
     */
    setClientOid(value: string): FlexTransferReqBuilder {
        this.obj.clientOid = value;
        return this;
    }

    /**
     * currency
     */
    setCurrency(value: string): FlexTransferReqBuilder {
        this.obj.currency = value;
        return this;
    }

    /**
     * Transfer amount: The amount is a positive integer multiple of the currency precision.
     */
    setAmount(value: string): FlexTransferReqBuilder {
        this.obj.amount = value;
        return this;
    }

    /**
     * Transfer out UserId: This is required when transferring from sub-account to master-account. It is optional for internal transfers.
     */
    setFromUserId(value: string): FlexTransferReqBuilder {
        this.obj.fromUserId = value;
        return this;
    }

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     */
    setFromAccountType(value: FlexTransferReq.FromAccountTypeEnum): FlexTransferReqBuilder {
        this.obj.fromAccountType = value;
        return this;
    }

    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     */
    setFromAccountTag(value: string): FlexTransferReqBuilder {
        this.obj.fromAccountTag = value;
        return this;
    }

    /**
     * Transfer type: INTERNAL (Transfer within account), PARENT_TO_SUB (Transfer from master-account to sub-account), SUB_TO_PARENT (Transfer from sub-account to master-account)
     */
    setType(value: FlexTransferReq.TypeEnum): FlexTransferReqBuilder {
        this.obj.type = value;
        return this;
    }

    /**
     * Transfer in UserId: This is required when transferring master-account to sub-account. It is optional for internal transfers.
     */
    setToUserId(value: string): FlexTransferReqBuilder {
        this.obj.toUserId = value;
        return this;
    }

    /**
     * Account type: MAIN, TRADE, CONTRACT, MARGIN, ISOLATED, MARGIN_V2, ISOLATED_V2
     */
    setToAccountType(value: FlexTransferReq.ToAccountTypeEnum): FlexTransferReqBuilder {
        this.obj.toAccountType = value;
        return this;
    }

    /**
     * Symbol: Required when the account type is ISOLATED or ISOLATED_V2, for example: BTC-USDT
     */
    setToAccountTag(value: string): FlexTransferReqBuilder {
        this.obj.toAccountTag = value;
        return this;
    }

    /**
     * Get the final object.
     */
    build(): FlexTransferReq {
        return this.obj;
    }
}
