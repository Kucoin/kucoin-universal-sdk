package com.kucoin.universal.sdk.plugin.generator;

import com.kucoin.universal.sdk.plugin.model.EnumEntry;
import com.kucoin.universal.sdk.plugin.model.Meta;
import com.kucoin.universal.sdk.plugin.model.ModeSwitch;
import com.kucoin.universal.sdk.plugin.service.NameService;
import com.kucoin.universal.sdk.plugin.service.OperationService;
import com.kucoin.universal.sdk.plugin.service.SchemaService;
import com.kucoin.universal.sdk.plugin.service.impl.OperationServiceImpl;
import com.kucoin.universal.sdk.plugin.service.impl.SchemaServiceImpl;
import com.kucoin.universal.sdk.plugin.util.KeywordsUtil;
import com.kucoin.universal.sdk.plugin.util.SpecificationUtil;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.servers.Server;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import org.openapitools.codegen.*;
import org.openapitools.codegen.languages.AbstractJavaCodegen;
import org.openapitools.codegen.model.ModelMap;
import org.openapitools.codegen.model.ModelsMap;
import org.openapitools.codegen.model.OperationMap;
import org.openapitools.codegen.model.OperationsMap;
import org.openapitools.codegen.utils.CamelizeOption;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.*;

import static org.openapitools.codegen.utils.StringUtils.camelize;

/**
 * @author isaac.tang
 */
@Slf4j
public class JavaSdkGenerator extends AbstractJavaCodegen implements NameService {
    private final Logger LOGGER = LoggerFactory.getLogger(JavaSdkGenerator.class);

    private SchemaService schemaService;
    private OperationService operationService;
    private ModeSwitch modeSwitch;

    private String service;
    private String subService;

    public CodegenType getTag() {
        return CodegenType.OTHER;
    }

    public String getName() {
        return "java-sdk";
    }

    public String getHelp() {
        return "Generates a java-sdk library.";
    }

    public JavaSdkGenerator() {
        super();
        cliOptions.add(ModeSwitch.option);
        this.modelTemplateFiles.clear();
        this.apiTemplateFiles.clear();
        this.apiTestTemplateFiles.clear();
        this.modelDocTemplateFiles.clear();
        this.apiDocTemplateFiles.clear();
        typeMapping.put("number", "Double");
    }

    @Override
    public void processOpts() {
        super.processOpts();
        this.supportingFiles.clear();
        modeSwitch = new ModeSwitch(additionalProperties);
        service = KeywordsUtil.getKeyword(camelize(openAPI.getInfo().getTitle()));
        subService = camelize(openAPI.getInfo().getDescription());
        apiPackage = String.format("com.kucoin.universal.sdk.generate.%s.%s", service.toLowerCase(), subService.toLowerCase());
        modelPackage = String.format("com.kucoin.universal.sdk.generate.%s.%s", service.toLowerCase(), subService.toLowerCase());

        switch (modeSwitch.getMode()) {
            case API: {
                modelTemplateFiles.put("model.mustache", ".java");
                apiTemplateFiles.put("api.mustache", ".java");
                apiTemplateFiles.put("api_impl.mustache", "Impl.java");
                break;
            }
            case TEST: {
                apiTemplateFiles.put("api_test.mustache", "AutoGeneratedTest.java");
                break;
            }
            case TEST_TEMPLATE: {
                apiTemplateFiles.put("api_test_template.mustache", ".template");
                break;
            }
            case ENTRY: {
                apiPackage = "com.kucoin.universal.sdk.generate.service";
                apiTemplateFiles.put("api_entry.mustache", ".java");
                apiTemplateFiles.put("api_entry_impl.mustache", "Impl.java");
                break;
            }
            case WS: {
                modelTemplateFiles.put("model_ws.mustache", ".java");
                apiTemplateFiles.put("api_ws.mustache", ".java");
                apiTemplateFiles.put("api_ws_impl.mustache", "Impl.java");
                additionalProperties.put("WS_MODE", "true");
                break;
            }
            case WS_TEST: {
                additionalProperties.put("WS_MODE", "true");
                apiTemplateFiles.put("api_ws_test.mustache", "AutoGeneratedTest.java");
                break;
            }
            case WS_TEST_TEMPLATE: {
                additionalProperties.put("WS_MODE", "true");
                apiTemplateFiles.put("ws_test_template.mustache", ".template");
                break;
            }
            default:
                throw new RuntimeException("unsupported mode");
        }

        supportingFiles.add(new SupportingFile("version.mustache", "Version.java"));

        templateDir = "java-sdk";

        // override parent properties
        enablePostProcessFile = true;
        useBeanValidation = false;

        inlineSchemaOption.put("SKIP_SCHEMA_REUSE", "true");
    }

    @Override
    public void preprocessOpenAPI(OpenAPI openAPI) {
        super.preprocessOpenAPI(openAPI);

        // parse and update operations and models
        schemaService = new SchemaServiceImpl(openAPI);
        operationService = new OperationServiceImpl(openAPI, this);

        operationService.parseOperation();
        schemaService.parseSchema();
    }

    @Override
    public String formatParamName(String name) {
        return toParamName(name);
    }

    @Override
    public String formatMethodName(String name) {
        return camelize(sanitizeName(name), CamelizeOption.LOWERCASE_FIRST_CHAR);
    }

    @Override
    public String formatService(String name) {
        return camelize(name);
    }

    @Override
    public String formatPackage(String name) {
        return formatService(name).toLowerCase();
    }

    @Override
    public CodegenProperty fromProperty(String name, Schema p, boolean required) {
        CodegenProperty prop = super.fromProperty(name, p, required);
        if (prop.defaultValue != null && prop.defaultValue.equalsIgnoreCase("undefined")) {
            prop.defaultValue = null;
        }

        if (prop.isEnum) {
            List<EnumEntry> enums = new ArrayList<>();

            List<Map<String, Object>> enumList;
            CodegenProperty realEnumProp = null;
            if (prop.openApiType.equalsIgnoreCase("array")) {
                enumList = (List<Map<String, Object>>) prop.mostInnerItems.vendorExtensions.get("x-api-enum");
                realEnumProp = prop.mostInnerItems;
            } else {
                enumList = (List<Map<String, Object>>) prop.vendorExtensions.get("x-api-enum");
                realEnumProp = prop;
            }

            String enumDataType = "String";
            if (realEnumProp.isString) {
                enumDataType = "String";
            } else {
                enumDataType = "Integer";
            }


            List<String> names = new ArrayList<>();
            List<String> values = new ArrayList<>();
            List<String> description = new ArrayList<>();

            enumList.forEach(e -> {
                Object enumValueOriginal = e.get("value");

                String enumValueNameGauss;
                if (enumValueOriginal instanceof Integer) {
                    enumValueNameGauss = "_" + e.get("value");
                } else if (enumValueOriginal instanceof String) {
                    enumValueNameGauss = enumValueOriginal.toString();
                } else {
                    throw new IllegalArgumentException("unknown enum value type..." + e.get("value"));
                }

                String enumName = (String) e.get("name");
                if (StringUtils.isEmpty(enumName)) {
                    enumName = enumValueNameGauss;
                }

                enumName = toVarName(enumName).toUpperCase();
                String enumValue = toEnumValue(enumValueOriginal.toString().trim(), typeMapping.get(p.getType()));

                names.add(enumName);
                values.add(enumValueOriginal.toString().trim());
                description.add(e.get("description").toString());

                enums.add(new EnumEntry(enumName, enumValue, enumValueOriginal, (String) e.get("description"), enumValueOriginal instanceof String));
            });

            // update internal enum support
            prop._enum = values;
            prop.allowableValues.put("values", values);
            prop.vendorExtensions.put("x-enum-varnames", names);
            prop.vendorExtensions.put("x-enum-descriptions", description);
            prop.vendorExtensions.put("x-enums", enums);
            prop.vendorExtensions.put("x-enums-datatype", enumDataType);
            prop.vendorExtensions.put("x-enums-isString", enumDataType.equalsIgnoreCase("string"));
        }


        return prop;
    }

    @Override
    public String toModelName(String name) {
        return formatService(schemaService.getGeneratedModelName(name));
    }

    @Override
    public String toApiName(String name) {
        name = KeywordsUtil.getKeyword(name);
        return camelize(name + "_" + (modeSwitch.isWs() || modeSwitch.isWsTest() ? "Ws" : "Api"));
    }

    @Override
    public String toModelFilename(String name) {
        name = schemaService.getGeneratedModelName(name);
        name = formatService(name);
        return name;
    }

    @Override
    public String modelFileFolder() {
        switch (modeSwitch.getMode()) {
            case ENTRY:
                return outputFolder + File.separator + "service";
            default:
                return outputFolder + File.separator + service.toLowerCase() + File.separator + subService.toLowerCase();
        }
    }

    @Override
    public String toApiFilename(String name) {
        String apiName = name.replaceAll("-", "_");
        apiName = KeywordsUtil.getKeyword(apiName);
        switch (modeSwitch.getMode()) {
            case API:
            case ENTRY:
            case TEST_TEMPLATE:
            case TEST: {
                apiName = apiName + "Api";
                break;
            }
            case WS:
            case WS_TEST:
            case WS_TEST_TEMPLATE: {
                apiName = apiName + "Ws";
                break;
            }
        }

        return apiName;
    }

    @Override
    public String modelFilename(String templateName, String name) {
        String suffix = modelTemplateFiles().get(templateName);
        return modelFileFolder() + File.separator + toModelFilename(name) + suffix;
    }

    @Override
    public String apiFilename(String templateName, String tag) {
        String suffix = apiTemplateFiles().get(templateName);
        if (modeSwitch.isEntry()) {
            String entryType = service + "Service";
            return modelFileFolder() + File.separator + entryType + suffix;
        }
        return modelFileFolder() + File.separator + toApiFilename(tag) + suffix;
    }

    @Override
    public CodegenOperation fromOperation(String path, String httpMethod, Operation operation, List<Server> servers) {
        CodegenOperation result = super.fromOperation(path, httpMethod, operation, servers);
        if (httpMethod.equalsIgnoreCase("patch")) {
            result.httpMethod = (String) operation.getExtensions().get("x-original-method");
        }
        return result;
    }


    @Override
    public ModelsMap postProcessModels(ModelsMap objs) {
        objs = super.postProcessModels(objs);


        List<ModelMap> models = objs.getModels();

        if (models != null) {
            for (ModelMap model : models) {
                CodegenModel codegenModel = model.getModel();

                Set<String> imports = new TreeSet<>();
                Set<String> annotation = new TreeSet<>();

                imports.add("import lombok.Data;");
                imports.add("import lombok.NoArgsConstructor;");
                imports.add("import lombok.AllArgsConstructor;");
                imports.add("import com.fasterxml.jackson.annotation.JsonProperty;");
                imports.add("import com.fasterxml.jackson.annotation.JsonIgnoreProperties;");
                annotation.add("@Data");
                annotation.add("@NoArgsConstructor");
                annotation.add("@AllArgsConstructor");

                Map<String, Object> vendorExtension = codegenModel.getVendorExtensions();

                if (vendorExtension.containsKey("x-request-model")) {
                    annotation.add("@Builder");
                    imports.add("import lombok.Builder;");
                    imports.add("import com.kucoin.universal.sdk.internal.interfaces.Request;");
                }


                if (vendorExtension.containsKey("x-response-model")) {
                    imports.add("import com.fasterxml.jackson.annotation.JsonIgnore;");
                    imports.add("import com.kucoin.universal.sdk.internal.interfaces.Response;");

                    if (modeSwitch.isWs()) {
                        imports.add("import com.kucoin.universal.sdk.model.WsMessage;");
                        imports.add("import com.kucoin.universal.sdk.internal.interfaces.WebSocketMessageCallback;");
                    } else {
                        imports.add("import com.kucoin.universal.sdk.model.RestResponse;");
                    }

                }

                if (vendorExtension.containsKey("x-original-response") || vendorExtension.containsKey("x-request-raw-array")) {
                    imports.add("import com.fasterxml.jackson.annotation.JsonCreator;");
                }

                codegenModel.getVars().forEach(var -> {

                    if (var.getVendorExtensions().containsKey("x-tag-path")) {
                        imports.add("import com.fasterxml.jackson.annotation.JsonIgnore;");
                        imports.add("import com.kucoin.universal.sdk.internal.interfaces.PathVar;");
                    }

                    if (vendorExtension.containsKey("x-request-model")) {
                        if (var.getDefaultValue() != null) {
                            List<String> varAnnotation = (List<String>) var.getVendorExtensions().computeIfAbsent("x-annotation", key -> new ArrayList<String>());
                            varAnnotation.add("@Builder.Default");
                        }
                    }

                    if (var.getIsArray()) {
                        imports.add(String.format("import %s;", importMapping.get("List")));
                        imports.add(String.format("import %s;", importMapping.get("ArrayList")));
                    } else if (var.getIsMap()) {
                        imports.add(String.format("import %s;", importMapping.get("Map")));
                        imports.add(String.format("import %s;", importMapping.get("HashMap")));
                    }

                    if (var.getIsEnum() || var.mostInnerItems != null && var.mostInnerItems.isEnum) {
                        imports.add("import com.fasterxml.jackson.annotation.JsonValue;");
                        imports.add("import com.fasterxml.jackson.annotation.JsonCreator;");
                    }

                });


                vendorExtension.put("x-imports", imports);
                vendorExtension.put("x-annotation", annotation);
            }
        }
        return objs;
    }


    @Override
    public OperationsMap postProcessOperationsWithModels(OperationsMap objs, List<ModelMap> allModels) {
        objs = super.postProcessOperationsWithModels(objs, allModels);

        OperationMap operationMap = objs.getOperations();


        Set<String> imports = new TreeSet<>();
        Set<String> implImports = new TreeSet<>();

        for (CodegenOperation op : operationMap.getOperation()) {

            if (op.vendorExtensions.containsKey("x-request-example")) {
                String example = StringEscapeUtils.unescapeJson((String) op.vendorExtensions.get("x-request-example"));
                example = StringEscapeUtils.escapeJava(example);
                op.vendorExtensions.put("x-request-example", example);
            }

            if (op.vendorExtensions.containsKey("x-response-example")) {
                String example = StringEscapeUtils.unescapeJson((String) op.vendorExtensions.get("x-response-example"));
                example = StringEscapeUtils.escapeJava(example);
                op.vendorExtensions.put("x-response-example", example);
            }

            Meta meta = SpecificationUtil.getMeta(op.vendorExtensions);
            if (meta != null) {
                switch (modeSwitch.getMode()) {
                    case ENTRY: {
                        // api entry
                        List<Map<String, String>> entryValue = new ArrayList<>();
                        operationService.getServiceMeta().forEach((k, v) -> {
                            if (v.getService().equalsIgnoreCase(meta.getService())) {
                                Map<String, String> kv = new HashMap<>();
                                k = KeywordsUtil.getKeyword(k);
                                kv.put("method", formatMethodName(k));
                                kv.put("methodUppercase", camelize(formatMethodName(k)));
                                kv.put("target_service", formatService(k + "Api"));
                                entryValue.add(kv);
                                imports.add(String.format("import com.kucoin.universal.sdk.generate.%s.%s.%s;", v.getService().toLowerCase(), v.getSubService().toLowerCase(), k + "Api"));
                                imports.add("import com.kucoin.universal.sdk.internal.interfaces.Transport;");
                                implImports.add(String.format("import com.kucoin.universal.sdk.generate.%s.%s.%s;", v.getService().toLowerCase(), v.getSubService().toLowerCase(), k + "ApiImpl"));
                            }
                        });
                        Map<String, Object> apiEntryInfo = new HashMap<>();
                        apiEntryInfo.put("api_entry_name", formatService(meta.getService() + "Service"));
                        apiEntryInfo.put("api_entry_value", entryValue);
                        objs.put("api_entry", apiEntryInfo);
                        break;
                    }

                    case API:
                    case TEST: {
                        break;
                    }
                    case WS:
                    case WS_TEST: {

                        break;
                    }
                    case TEST_TEMPLATE: {
                        String reqName = String.format("%s.%s", modelPackage, meta.getMethodServiceFmt() + "Req");
                        String responseName = String.format("%s.%s", modelPackage, meta.getMethodServiceFmt() + "Resp");
                        allModels.stream().filter(m -> reqName.equalsIgnoreCase((String) m.get("importPath"))).
                                forEach(m -> op.vendorExtensions.put("x-request-model", m.getModel()));
                        allModels.stream().filter(m -> responseName.equalsIgnoreCase((String) m.get("importPath"))).
                                forEach(m -> {

                                    CodegenModel model = m.getModel();
                                    for (CodegenProperty var : model.vars) {
                                        if (var.isArray) {
                                            String innerDataName = String.format("%s.%s", modelPackage, var.getComplexType());
                                            CodegenModel innerClass = null;
                                            for (ModelMap map : allModels) {
                                                if (innerDataName.equalsIgnoreCase((String) map.get("importPath"))) {
                                                    innerClass = map.getModel();
                                                    break;
                                                }
                                            }

                                            if (innerClass != null) {
                                                var.vendorExtensions.put("x-response-inner-model", innerClass);
                                            }
                                        }
                                    }

                                    op.vendorExtensions.put("x-response-model", m.getModel());
                                });
                        break;
                    }
                    case WS_TEST_TEMPLATE: {
                        String eventName = String.format("%s.%s", modelPackage, meta.getMethodServiceFmt() + "Event");
                        allModels.stream().filter(m -> eventName.equalsIgnoreCase((String) m.get("importPath"))).
                                forEach(m -> {
                                    CodegenModel model = m.getModel();
                                    for (CodegenProperty var : model.vars) {
                                        if (var.isArray) {
                                            String innerDataName = String.format("%s.%s", modelPackage, var.getComplexType());
                                            CodegenModel innerClass = null;
                                            for (ModelMap map : allModels) {
                                                if (innerDataName.equalsIgnoreCase((String) map.get("importPath"))) {
                                                    innerClass = map.getModel();
                                                    break;
                                                }
                                            }

                                            if (innerClass != null) {
                                                var.vendorExtensions.put("x-response-inner-model", innerClass);
                                            }
                                        }
                                    }
                                    op.vendorExtensions.put("x-response-model", m.getModel());
                                });
                        break;
                    }
                }
            }
        }
        objs.put("imports", imports);
        objs.put("implImports", implImports);
        return objs;
    }
}
