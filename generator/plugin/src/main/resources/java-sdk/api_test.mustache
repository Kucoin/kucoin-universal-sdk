package {{package}};
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.kucoin.universal.sdk.model.RestResponse;
import java.util.ArrayList;
import java.util.List;

class {{classname}}AutoGeneratedTest{
    public static ObjectMapper mapper = new ObjectMapper();

    private static final List<String> failedTests = new ArrayList<>();

    private static int totalTest = 0;

{{#operations}}
    {{#operation}}
    /**
    * {{vendorExtensions.x-meta.method}} Request
    * {{summary}}
    * {{path}}
    */
    public static void test{{vendorExtensions.x-meta.methodServiceFmt}}Request() throws Exception
    {
    {{#hasParams}}
        String data = "{{{vendorExtensions.x-request-example}}}";
        {{vendorExtensions.x-meta.methodServiceFmt}}Req obj = mapper.readValue(data, {{vendorExtensions.x-meta.methodServiceFmt}}Req.class);
    {{/hasParams}}
    {{^hasParams}}
        // pass
    {{/hasParams}}
    }

    /**
    * {{vendorExtensions.x-meta.method}} Response
    * {{summary}}
    * {{path}}
    */
    public static void test{{vendorExtensions.x-meta.methodServiceFmt}}Response() throws Exception
    {
        String data = "{{{vendorExtensions.x-response-example}}}";
        RestResponse<{{vendorExtensions.x-meta.methodServiceFmt}}Resp> resp = mapper.readValue(data, new TypeReference<RestResponse<{{vendorExtensions.x-meta.methodServiceFmt}}Resp>>(){});
    }
    {{/operation}}
{{/operations}}

    public static void runAllTests() {
{{#operations}}
    {{#operation}}
        run({{classname}}AutoGeneratedTest::test{{vendorExtensions.x-meta.methodServiceFmt}}Request, "test{{vendorExtensions.x-meta.methodServiceFmt}}Request");
        run({{classname}}AutoGeneratedTest::test{{vendorExtensions.x-meta.methodServiceFmt}}Response, "test{{vendorExtensions.x-meta.methodServiceFmt}}Response");
    {{/operation}}
{{/operations}}
    }

    private static void run(TestCase test, String name) {
       System.out.println("Running test: " + name);
       totalTest++;
       try {
           test.execute();
           System.out.println("PASSED: " + name);
       } catch (Exception e) {
           System.err.println("FAILED: " + name + " - " + e.getMessage());
           e.printStackTrace(System.err);
           failedTests.add(name);
       }
    }

    @FunctionalInterface
    interface TestCase {
        void execute() throws Exception;
    }

    public static void main(String[] args) {
        runAllTests();
        finish();
    }

    public static void finish() {
        System.out.printf("Test total: %d, failed: %d\n", totalTest, failedTests.size());
        if (!failedTests.isEmpty()) {
            System.err.println("\n=== TEST SUMMARY ===");
            System.err.println("Failed tests:");
            for (String name : failedTests) {
                System.err.println(" - " + name);
            }
            System.exit(1);
        } else {
            System.out.println("\nAll tests passed.");
        }
    }
}