{{>partial_header}}

import { UnifiedWsArgs, UnifiedWsMessage } from '@model/unified_ws';
import { DefaultWebSocketUnifiedService } from '@internal/infra/default_ws_unified_service';

/**
 * Interface for the unified private WebSocket API of KuCoin.
 */
export interface {{classname}} {
{{#operations}}
    {{#operation}}
    /**
    * {{summary}}
    *
    * {{notes}}
    *
    * @see {{vendorExtensions.x-api-doc}}
    */
    {{vendorExtensions.x-meta.method}}(args: UnifiedWsArgs): Promise<UnifiedWsMessage>;

    {{/operation}}
{{/operations}}

    /**
    * Initiates the WebSocket service
    *
    * This method must be called before invoking any APIs.
    */
    start(): Promise<void>;

    /**
    * Stops the WebSocket service.
    *
    * This method is used to terminate the WebSocket connection and stop all ongoing
    * calls. It should be called when no further communication is needed with
    * the server, or when the application is being shut down to ensure a clean
    * disconnection and release of resources.
    */
    stop(): Promise<void>;
}

/**
 * Implementation of the UnifiedPrivateWs interface.
 */
export class {{classname}}Impl implements {{classname}} {
    private wsService: DefaultWebSocketUnifiedService;

    constructor(wsService: DefaultWebSocketUnifiedService) {
        this.wsService = wsService;
    }

{{#operations}}
    {{#operation}}
    {{vendorExtensions.x-meta.method}}(args: UnifiedWsArgs): Promise<UnifiedWsMessage> {
        return this.wsService.call(args);
    }

    {{/operation}}
{{/operations}}

    start(): Promise<void> {
        return this.wsService.start();
    }

    stop(): Promise<void> {
        return this.wsService.stop();
    }
}